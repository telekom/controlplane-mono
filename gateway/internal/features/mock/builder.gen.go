// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go
//
// Generated by this command:
//
//	mockgen -source=builder.go -destination=mock/builder.gen.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/telekom/controlplane-mono/gateway/api/v1"
	features "github.com/telekom/controlplane-mono/gateway/internal/features"
	client "github.com/telekom/controlplane-mono/gateway/pkg/kong/client"
	plugin "github.com/telekom/controlplane-mono/gateway/pkg/kong/client/plugin"
	gomock "go.uber.org/mock/gomock"
)

// MockFeature is a mock of Feature interface.
type MockFeature struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureMockRecorder
	isgomock struct{}
}

// MockFeatureMockRecorder is the mock recorder for MockFeature.
type MockFeatureMockRecorder struct {
	mock *MockFeature
}

// NewMockFeature creates a new mock instance.
func NewMockFeature(ctrl *gomock.Controller) *MockFeature {
	mock := &MockFeature{ctrl: ctrl}
	mock.recorder = &MockFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeature) EXPECT() *MockFeatureMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockFeature) Apply(ctx context.Context, builder features.FeaturesBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, builder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockFeatureMockRecorder) Apply(ctx, builder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockFeature)(nil).Apply), ctx, builder)
}

// IsUsed mocks base method.
func (m *MockFeature) IsUsed(ctx context.Context, builder features.FeaturesBuilder) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsed", ctx, builder)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUsed indicates an expected call of IsUsed.
func (mr *MockFeatureMockRecorder) IsUsed(ctx, builder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsed", reflect.TypeOf((*MockFeature)(nil).IsUsed), ctx, builder)
}

// Name mocks base method.
func (m *MockFeature) Name() v1.FeatureType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(v1.FeatureType)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFeatureMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFeature)(nil).Name))
}

// Priority mocks base method.
func (m *MockFeature) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockFeatureMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockFeature)(nil).Priority))
}

// MockFeaturesBuilder is a mock of FeaturesBuilder interface.
type MockFeaturesBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesBuilderMockRecorder
	isgomock struct{}
}

// MockFeaturesBuilderMockRecorder is the mock recorder for MockFeaturesBuilder.
type MockFeaturesBuilderMockRecorder struct {
	mock *MockFeaturesBuilder
}

// NewMockFeaturesBuilder creates a new mock instance.
func NewMockFeaturesBuilder(ctrl *gomock.Controller) *MockFeaturesBuilder {
	mock := &MockFeaturesBuilder{ctrl: ctrl}
	mock.recorder = &MockFeaturesBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesBuilder) EXPECT() *MockFeaturesBuilderMockRecorder {
	return m.recorder
}

// AclPlugin mocks base method.
func (m *MockFeaturesBuilder) AclPlugin() *plugin.AclPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AclPlugin")
	ret0, _ := ret[0].(*plugin.AclPlugin)
	return ret0
}

// AclPlugin indicates an expected call of AclPlugin.
func (mr *MockFeaturesBuilderMockRecorder) AclPlugin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclPlugin", reflect.TypeOf((*MockFeaturesBuilder)(nil).AclPlugin))
}

// AddAllowedConsumers mocks base method.
func (m *MockFeaturesBuilder) AddAllowedConsumers(arg0 ...*v1.ConsumeRoute) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAllowedConsumers", varargs...)
}

// AddAllowedConsumers indicates an expected call of AddAllowedConsumers.
func (mr *MockFeaturesBuilderMockRecorder) AddAllowedConsumers(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAllowedConsumers", reflect.TypeOf((*MockFeaturesBuilder)(nil).AddAllowedConsumers), arg0...)
}

// Build mocks base method.
func (m *MockFeaturesBuilder) Build(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockFeaturesBuilderMockRecorder) Build(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockFeaturesBuilder)(nil).Build), arg0)
}

// EnableFeature mocks base method.
func (m *MockFeaturesBuilder) EnableFeature(f features.Feature) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableFeature", f)
}

// EnableFeature indicates an expected call of EnableFeature.
func (mr *MockFeaturesBuilderMockRecorder) EnableFeature(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableFeature", reflect.TypeOf((*MockFeaturesBuilder)(nil).EnableFeature), f)
}

// GetAllowedConsumers mocks base method.
func (m *MockFeaturesBuilder) GetAllowedConsumers() []*v1.ConsumeRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedConsumers")
	ret0, _ := ret[0].([]*v1.ConsumeRoute)
	return ret0
}

// GetAllowedConsumers indicates an expected call of GetAllowedConsumers.
func (mr *MockFeaturesBuilderMockRecorder) GetAllowedConsumers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedConsumers", reflect.TypeOf((*MockFeaturesBuilder)(nil).GetAllowedConsumers))
}

// GetGateway mocks base method.
func (m *MockFeaturesBuilder) GetGateway() *v1.Gateway {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateway")
	ret0, _ := ret[0].(*v1.Gateway)
	return ret0
}

// GetGateway indicates an expected call of GetGateway.
func (mr *MockFeaturesBuilderMockRecorder) GetGateway() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateway", reflect.TypeOf((*MockFeaturesBuilder)(nil).GetGateway))
}

// GetRealm mocks base method.
func (m *MockFeaturesBuilder) GetRealm() *v1.Realm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm")
	ret0, _ := ret[0].(*v1.Realm)
	return ret0
}

// GetRealm indicates an expected call of GetRealm.
func (mr *MockFeaturesBuilderMockRecorder) GetRealm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*MockFeaturesBuilder)(nil).GetRealm))
}

// GetRoute mocks base method.
func (m *MockFeaturesBuilder) GetRoute() *v1.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute")
	ret0, _ := ret[0].(*v1.Route)
	return ret0
}

// GetRoute indicates an expected call of GetRoute.
func (mr *MockFeaturesBuilderMockRecorder) GetRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockFeaturesBuilder)(nil).GetRoute))
}

// JumperConfig mocks base method.
func (m *MockFeaturesBuilder) JumperConfig() *plugin.JumperConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JumperConfig")
	ret0, _ := ret[0].(*plugin.JumperConfig)
	return ret0
}

// JumperConfig indicates an expected call of JumperConfig.
func (mr *MockFeaturesBuilderMockRecorder) JumperConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JumperConfig", reflect.TypeOf((*MockFeaturesBuilder)(nil).JumperConfig))
}

// JwtPlugin mocks base method.
func (m *MockFeaturesBuilder) JwtPlugin() *plugin.JwtPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JwtPlugin")
	ret0, _ := ret[0].(*plugin.JwtPlugin)
	return ret0
}

// JwtPlugin indicates an expected call of JwtPlugin.
func (mr *MockFeaturesBuilderMockRecorder) JwtPlugin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JwtPlugin", reflect.TypeOf((*MockFeaturesBuilder)(nil).JwtPlugin))
}

// RateLimitPlugin mocks base method.
func (m *MockFeaturesBuilder) RateLimitPlugin() *plugin.RateLimitPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimitPlugin")
	ret0, _ := ret[0].(*plugin.RateLimitPlugin)
	return ret0
}

// RateLimitPlugin indicates an expected call of RateLimitPlugin.
func (mr *MockFeaturesBuilderMockRecorder) RateLimitPlugin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimitPlugin", reflect.TypeOf((*MockFeaturesBuilder)(nil).RateLimitPlugin))
}

// RequestTransformerPlugin mocks base method.
func (m *MockFeaturesBuilder) RequestTransformerPlugin() *plugin.RequestTransformerPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTransformerPlugin")
	ret0, _ := ret[0].(*plugin.RequestTransformerPlugin)
	return ret0
}

// RequestTransformerPlugin indicates an expected call of RequestTransformerPlugin.
func (mr *MockFeaturesBuilderMockRecorder) RequestTransformerPlugin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTransformerPlugin", reflect.TypeOf((*MockFeaturesBuilder)(nil).RequestTransformerPlugin))
}

// SetUpstream mocks base method.
func (m *MockFeaturesBuilder) SetUpstream(arg0 client.Upstream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpstream", arg0)
}

// SetUpstream indicates an expected call of SetUpstream.
func (mr *MockFeaturesBuilderMockRecorder) SetUpstream(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpstream", reflect.TypeOf((*MockFeaturesBuilder)(nil).SetUpstream), arg0)
}
