# kics-scan ignore
openapi: 3.0.0
info:
  contact:
    email: docs@konghq.com
    name: Kong Inc
    url: https://konghq.com
  description: |-
    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.

    You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com)
    .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Kong Admin API
  version: 3.7.1
externalDocs:
  description: Kong Gateway Admin API (OSS)
  url: https://docs.konghq.com
servers:
- description: Default Admin API URL
  url: "{protocol}://{hostname}:{port}{path}"
  variables:
    hostname:
      default: localhost
      description: Hostname for Kong's Admin API
    path:
      default: /
      description: Base path for Kong's Admin API
    port:
      default: "8001"
      description: Port for Kong's Admin API
    protocol:
      default: http
      description: Protocol for requests to Kong's Admin API
      enum:
      - http
      - https
tags:
- description: "Service entities are abstractions of your microservice interfaces\
    \ or formal APIs. For example, a service could be a data transformation microservice\
    \ or a billing API.\n<br><br>\nThe main attribute of a service is the destination\
    \ URL for proxying traffic. This URL can be set as a single string or by specifying\
    \ its protocol, host, port and path individually. \n<br><br>\nServices are associated\
    \ to routes, and a single service can have many routes associated with it. Routes\
    \ are entrypoints in Kong Gateway which define rules to match client requests.\
    \ Once a route is matched, Kong Gateway proxies the request to its associated\
    \ service. See the [Proxy Reference](https://docs.konghq.com/gateway/latest/how-kong-works/routing-traffic/)\
    \ for a detailed explanation of how Kong proxies traffic.\n<br><br>\nServices\
    \ can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).\n"
  name: Services
- description: "Route entities define rules to match client requests. Each route is\
    \ associated with a service, and a service may have multiple routes associated\
    \ to it. Every request matching a given route will be proxied to the associated\
    \ service. You need at least one matching rule that applies to the protocol being\
    \ matched by the route.\n<br><br>\nThe combination of routes and services, and\
    \ the separation of concerns between them, offers a powerful routing mechanism\
    \ with which it is possible to define fine-grained entrypoints in Kong Gateway\
    \ leading to different upstream services of your infrastructure.\n<br><br>\nDepending\
    \ on the protocol, one of the following attributes must be set:\n<br>\n* `http`:\
    \ At least one of `methods`, `hosts`, `headers`, or `paths`\n* `https`:  At least\
    \ one of `methods`, `hosts`, `headers`, `paths`, or `snis`\n* `tcp`: At least\
    \ one of `sources` or `destinations`\n* `tls`: at least one of `sources`, `destinations`,\
    \ or `snis`\n* `tls_passthrough`: set `snis`\n* `grpc`: At least one of `hosts`,\
    \ `headers`, or `paths`\n* `grpcs`: At least one of `hosts`, `headers`, `paths`,\
    \ or `snis`\n<br>\n\nA route can't have both `tls` and `tls_passthrough` protocols\
    \ at same time.\n<br><br>\n\nLearn more about the router: \n* [Configure routes\
    \ using expressions](https://docs.konghq.com/gateway/latest/key-concepts/routes/expressions/)\n\
    * [Router Expressions language reference](https://docs.konghq.com/gateway/latest/reference/expressions-language/)\n"
  name: Routes
- description: |
    A plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. Plugins let you add functionality to services that run behind a Kong Gateway instance, like authentication or rate limiting.
    You can find more information about available plugins and which values each plugin accepts at the [Plugin Hub](https://docs.konghq.com/hub/).
    <br><br>
    When adding a plugin configuration to a service, the plugin will run on every request made by a client to that service. If a plugin needs to be tuned to different values for some specific consumers, you can do so by creating a separate plugin instance that specifies both the service and the consumer, through the service and consumer fields.
    <br><br>
    Plugins can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).
  name: Plugins
- description: "The consumer object represents a consumer - or a user - of a service.\
    \ \nYou can either rely on Kong Gateway as the primary datastore, or you can map\
    \ the consumer list with your database to keep consistency between Kong Gateway\
    \ and your existing primary datastore.\n"
  name: Consumers
- description: "A certificate object represents a public certificate, and can be optionally\
    \ paired with the corresponding private key. These objects are used by Kong Gateway\
    \ to handle SSL/TLS termination for encrypted requests, or for use as a trusted\
    \ CA store when validating peer certificate of client/service. \n<br><br>  \n\
    Certificates are optionally associated with SNI objects to tie a cert/key pair\
    \ to one or more hostnames. \n<br><br>\nIf intermediate certificates are required\
    \ in addition to the main certificate, they should be concatenated together into\
    \ one string.\n"
  name: Certificates
- description: "An SNI object represents a many-to-one mapping of hostnames to a certificate.\
    \ \n<br><br>\nA certificate object can have many hostnames associated with it.\
    \ When Kong Gateway receives an SSL request, it uses the SNI field in the Client\
    \ Hello to look up the certificate object based on the SNI associated with the\
    \ certificate.\n"
  name: SNIs
- description: "A CA certificate object represents a trusted certificate authority.\
    \ \nThese objects are used by Kong Gateway to verify the validity of a client\
    \ or server certificate.\n"
  name: CA Certificates
- description: "The upstream object represents a virtual hostname and can be used\
    \ to load balance incoming requests over multiple services (targets). \n<br><br>\n\
    An upstream also includes a [health checker](https://docs.konghq.com/gateway/latest/how-kong-works/health-checks/),\
    \ which can enable and disable targets based on their ability or inability to\
    \ serve requests. \nThe configuration for the health checker is stored in the\
    \ upstream object, and applies to all of its targets.\n"
  name: Upstreams
- description: "Vault objects are used to configure different vault connectors for\
    \ [managing secrets](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/).\
    \ \nConfiguring a vault lets you reference secrets from other entities.\nThis\
    \ allows for a proper separation of secrets and configuration and prevents secret\
    \ sprawl. \n<br><br>\nFor example, you could store a certificate and a key in\
    \ a vault, then reference them from a certificate entity. This way, the certificate\
    \ and key are not stored in the entity directly and are more secure.\n<br><br>\n\
    Secrets rotation can be managed using [TTLs](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/advanced-usage/).\n"
  name: Vaults
- description: |
    A key object holds a representation of asymmetric keys in various formats. When Kong Gateway or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
  name: Keys
- description: |
    A JSON Web key set. Key sets are the preferred way to expose keys to plugins because they tell the plugin where to look for keys or have a scoping mechanism to restrict plugins to specific keys.
  name: Key-sets
- description: Information routes
  name: Information
- description: Debug routes
  name: Debug
- description: |
    A target is an IP address or hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added, modified, or deleted. Changes take effect on the fly.
    <br><br>
    To disable a target, post a new one with `weight=0`, or use the `DELETE` method to accomplish the same.
  name: Targets
- description: "Tags are strings associated to entities in Kong Gateway. Tags can\
    \ contain almost all UTF-8 characters, with the following exceptions: `,`,`/`,\
    \ and non-printable ASCII (for example, the space character). \n<br><br>\nMost\
    \ core entities can be tagged via the tags attribute upon creation or modification.\n"
  name: Tags
- description: |
    Retreieve information about the status of data planes when Kong Gateway is configured in hybrid mode.
  name: clustering
- description: |
    Querying and managing cache entries.
  name: cache
paths:
  /:
    get:
      description: |
        Returns detailed information about the Kong gateway instance, including the full Kong configuration, available and unavailable plugins, version, edition (enterprise or community), a tagline, the unique node identifier, and other metadata.
      operationId: geInfo
      responses:
        "200":
          content:
            application/json:
              examples:
                openSourceExample:
                  summary: Open Source Edition Example Response
                  value:
                    configuration:
                      _debug_pg_ttl_cleanup_interval: 300
                      admin_acc_logs: /usr/local/kong/logs/admin_access.log
                      admin_access_log: /dev/stdout
                    edition: community
                    hostname: b8f553cfbd0c
                    lua_version: LuaJIT 2.1.0-20230410
                    node_id: 39bfa49d-3394-4f8e-b9db-94b786bc4e5f
                    pids:
                      master: 1
                      workers:
                      - 1278
                      - 1279
                      - 1280
                      - 1281
                      - 1282
                      - 1283
                      - 1284
                      - 1285
                    plugins:
                      available_on_server:
                        acl:
                          priority: 950
                          version: 3.6.0
                      enabled_in_cluster: []
                    tagline: Welcome to kong
                    timers:
                      pending: 1
                      running: 145
                    version: 3.6.0
              schema:
                $ref: '#/components/schemas/geInfo_200_response'
          description: Success
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Method Not Allowed
          headers:
            Server:
              description: Kong's server tokens.
              explode: false
              schema:
                example: kong/2.3.3
                type: string
              style: simple
      summary: Get Kong's instance information
      tags:
      - Information
  /ca_certificates:
    get:
      description: "Retrieve a list of all available Certificate Authority (CA) certificates,\
        \ including the certificate ID, creation date, and other details. You can\
        \ use query parameters to filter the results by size or tags, for example\
        \ `/ca-certificates?size=50&tags=enterprise`."
      operationId: list-ca_certificate
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples: {}
              schema:
                $ref: '#/components/schemas/CA-Certificate'
            text/plain:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: A successful response listing CA Certificates
      summary: List all CA certificates
      tags:
      - CA Certificates
    post:
      description: "Create a new Certificate Authority (CA) certificate. The request\
        \ body must include the `cert` property, the certificate data in PEM format;\
        \ it can also include `cert_digest`, a digest of the certificate in hex format\
        \ for verifying the certificates integrity, and `tags`, an optional list of\
        \ tags to categorize the certificate."
      operationId: create-ca_certificate
      requestBody:
        $ref: '#/components/requestBodies/CA-cert-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: The created certificate object.
        "400":
          description: Invalid CA certificate
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new CA certificate
      tags:
      - CA Certificates
  /ca_certificates/{ca_certificate_id}:
    delete:
      description: Delete the specified Certificate Authority (CA) certificate using
        the provided ca_certificate_id.
      operationId: delete-ca_certificate
      parameters:
      - description: ID of the related certificate
        explode: false
        in: path
        name: ca_certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted CA Certificate or the resource didn't
            exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a CA Certificate
      tags:
      - CA Certificates
    get:
      description: Retrieve details about the specified Certificate Authority (CA)
        certificate using the provided path parameter `ca_certificate_id`.
      operationId: get-ca_certificate
      parameters:
      - description: ID of the related certificate
        explode: false
        in: path
        name: ca_certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: "The specified CA certificate exists in the system, and the\
            \ response includes details about the certificate."
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a CA certificate
      tags:
      - CA Certificates
    patch:
      description: |-
        Update the specified Certificate Authority (CA) certificate using the provided ca_certificate_id. Use this endpoint to modify an existing CA certificate in the system. The request body should include the fields of the CA certificate that need to be updated.

        > This API is not available in DB-less mode.
      operationId: update-ca_certificate
      parameters:
      - description: ID of the related certificate
        explode: false
        in: path
        name: ca_certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CA-cert-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: Successfully updated CA Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid CA Certificate
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a CA Certificate
      tags:
      - CA Certificates
    put:
      description: Create or Update a CA Certificate using the provided path parameter
        `ca_certificate_id`.
      operationId: updatet-ca_certificate
      parameters:
      - description: ID of the related certificate
        explode: false
        in: path
        name: ca_certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CA-cert-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: Successfully upserted CA Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid CA Certificate
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update a CA Certificate
      tags:
      - CA Certificates
  /certificates:
    get:
      description: "Retrieve a list of all available CA Certificate Authority (CA)\
        \ certificates. You can use query parameters to filter the results by size\
        \ or tags, for example `/certificates?size=50&tags=enterprise`."
      operationId: list-certificate
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_certificate_200_response'
          description: A successful response listing Certificates
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all certificates
      tags:
      - Certificates
    post:
      description: |-
        Create a new certificate with the provided details. Use this endpoint to add a new certificate to the system. The request body must include the certificate data and other details required for creating a new certificate.

        > Note: This API is not available in DB-less mode.
      operationId: create-certificate
      requestBody:
        $ref: '#/components/requestBodies/cert-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully created Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Certificate
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Certificate
      tags:
      - Certificates
  /certificates/{certificate_id}:
    delete:
      description: |
        Delete a Certificate

        >Note: This API is not available in DB-less mode.
      operationId: delete-certificate
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Certificate or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Certificate
      tags:
      - Certificates
    get:
      description: Retrieve details about the specified certificate using the provided
        path parameter `certificate_id`.
      operationId: get-certificate
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: HTTP 200 OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Certificate
      tags:
      - Certificates
    patch:
      description: |-
        Update a Certificate

        Inserts (or replaces) the certificate under the requested `certificate_id`with the definition specified in the request body. When the `name` or `id` attribute has the structure of a UUID, the certificate being inserted/replaced will be identified by its `id`. Otherwise it will be identified by the `name`.

        When creating a new Certificate without specifying `id` (neither in the path or the request body), then it will be auto-generated.

        >Note: This API is not available in DB-less mode.
      operationId: update-certificate
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/cert-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully updated Certificate
        "400":
          description: Invalid Certificate
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Certificate
      tags:
      - Certificates
    put:
      description: |
        Update details about the specified certificate using the provided path parameter `certificate_id`.

        Inserts (or replaces) the certificate under the requested `certificate_id`with the definition specified in the request body. When the `name` or `id` attribute has the structure of a UUID, the certificate being inserted/replaced will be identified by its `id`. Otherwise it will be identified by the `name`.

        When creating a new Certificate without specifying `id` (neither in the path or the request body), then it will be auto-generated.



        > Note: This API is not available in DB-less mode.
      operationId: update-certificate-put
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/cert-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully upserted Certificate
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Certificate
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update a Certificate
      tags:
      - Certificates
  /certificates/{certificate_name_or_id}/snis:
    get:
      description: Retrieve a paginated list of all SNIs associated with a certificate.
        Use this endpoint to retrieve a list of SNIs that are linked to a specific
        certificate. You can use the optional query parameters to filter the results
        based on specific criteria. The response will include the list of SNIs and
        pagination information. See the response schema for details on the expected
        format of the response body.
      operationId: get-sni-with-certificate
      parameters:
      - description: "The unique identifier or the `name` attribute of the Certificate\
          \ whose SNIs are to be retrieved. When using this endpoint, only SNIs associated\
          \ to the specified Certificate will be listed."
        explode: false
        in: path
        name: certificate_name_or_id
        required: true
        schema:
          enum:
          - a3ad71a8-6685-4b03-a101-980a953544f6
          - name
          example: name
          type: string
        style: simple
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_sni_with_certificate_200_response'
          description: SNI response object
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List SNIs associated with a certificate
      tags:
      - SNIs
    post:
      description: Create a new SNI and associate it with a certificate in the system.
        Use this endpoint to add a new SNI to the system and link it to a specific
        certificate.
      operationId: create-sni-for-certificate
      parameters:
      - description: "The unique identifier or the `name` attribute of the Certificate\
          \ whose SNIs are to be retrieved. When using this endpoint, only SNIs associated\
          \ to the specified Certificate will be listed."
        explode: false
        in: path
        name: certificate_name_or_id
        required: true
        schema:
          enum:
          - a3ad71a8-6685-4b03-a101-980a953544f6
          - name
          example: name
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new SNI associated with a Certificate
      tags:
      - SNIs
  /certificates/{certificate_id}/snis/{sni_name_or_id}:
    delete:
      description: |
        Delete a an SNI associated with a Certificate using ID or name.
      operationId: delete-sni-for-certificate
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted SNI or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a an SNI associated with a Certificate
      tags:
      - SNIs
    get:
      description: Get an SNI associated with a Certificate using ID or name.
      operationId: fetch-sni-with-certificate
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch an SNI associated with a certificate
      tags:
      - SNIs
    patch:
      description: |2



         Update an existing SNI associated with a certificate in the system using the SNI ID or name. The request body should include the fields of the SNI that need to be updated, such as the name, description, or other properties. If the request body contains valid data, the endpoint will update the SNI and return a success response.
      operationId: update-sni-for-certificate
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully updated SNI
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update SNI associated to a certificate
      tags:
      - SNIs
    put:
      description: |
        Create or Update an SNI associated with a Certificate using ID or name.

        Inserts (or replaces) the SNI under the requested resource with the definition specified in the body. The SNI will be identified via the name or id attribute.

        When the name or id attribute has the structure of a UUID, the SNI being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.

        When creating a new SNI without specifying id (neither in the URL nor in the body), then it will be auto-generated.
      operationId: upsert-sni-for-certificate
      parameters:
      - description: The unique identifier of the Certificate to retrieve.
        explode: false
        in: path
        name: certificate_id
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully upserted SNI
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert an SNI associated with a certificate
      tags:
      - SNIs
  /consumers:
    get:
      description: "Retrieve a list of all consumers.You can use query parameters\
        \ to filter the results by size or tags, for example `/consumers?size=50&tags=enterprise`."
      operationId: list-consumer
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_consumer_200_response'
          description: A successful response listing Consumers
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Consumers
      tags:
      - Consumers
    post:
      description: Create a new Consumer
      operationId: create-consumer
      requestBody:
        $ref: '#/components/requestBodies/consumer-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully created Consumer
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Consumer
      tags:
      - Consumers
  /consumers/{consumer_username_or_id}:
    delete:
      description: Delete a specific consumer from the system using either the consumer
        ID or the consumer username. This operation is irreversible and permanently
        removes all data associated with the specified consumer. If the consumer was
        deleted succesfully the endpoint will return a 204 response indicating that
        the resource did not exist.
      operationId: delete-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Consumer or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Consumer
      tags:
      - Consumers
    get:
      description: "Retrieve the details of a specific consumer in the system using\
        \ either the consumer ID or the consumer username. If the consumer with the\
        \ specified ID or username cannot be found, the endpoint will return a 404."
      operationId: get-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully fetched Consumer
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Consumer
      tags:
      - Consumers
    patch:
      description: "Update the details of a specific consumer in the system using\
        \ either the consumer ID or the consumer username.If the consumer with the\
        \ specified ID or username cannot be found, the endpoint will return a 404."
      operationId: update-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/consumer-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully updated Consumer
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Consumer
      tags:
      - Consumers
    put:
      description: |-
        Create or Update Consumer using ID or username. The consumer will be identified via the username or id attribute.If the consumer with the specified ID or username cannot be found, the endpoint will return a 404.

        When the username or id attribute has the structure of a UUID, the Consumer being inserted/replaced will be identified by its id. Otherwise it will be identified by its username.

        When creating a new Consumer without specifying id (neither in the URL nor in the body), then it will be auto-generated.

        Notice that specifying a username in the URL and a different one in the request body is not allowed.

        > Note: This API is not available in DB-less mode.
      operationId: upsert-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/consumer-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upsert_consumer_200_response'
          description: The consumer object response body
        "400":
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Not Found
      summary: Update a Consumer
      tags:
      - Consumers
  /consumers/{consumer_username_or_id}/plugins:
    get:
      description: Retrieve a list of all plugins associated with a consumer.
      operationId: list-plugins-for-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Plugin response:
                  value:
                    data:
                    - id: 02621eee-8309-4bf6-b36b-a82017a5393e
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - http
                      - https
                      enabled: true
                      tags:
                      - user-level
                      - low-priority
                    - id: 66c7b5c4-4aaf-4119-af1e-ee3ad75d0af4
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - tcp
                      - tls
                      enabled: true
                      tags:
                      - admin
                      - high-priority
                      - critical
                    next: http://localhost:8001/plugins?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_plugins_for_consumer_200_response'
              x-examples:
                Example 1:
                  id: ce44eef5-41ed-47f6-baab-f725cecf98c7
                  name: rate-limiting
                  created_at: 1422386534
                  instance_name: rate-limiting-foo
                  config:
                    hour: 500
                    minute: 20
                  protocols:
                  - http
                  - https
                  enabled: true
                  tags:
                  - user-level
                  - low-priority
          description: Example response
      summary: List all plugins associated with a consumer
      tags:
      - Plugins
    post:
      description: Create a new Plugin associated with a Consumer
      operationId: create-plugin-for-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Plugin associated with a Consumer
      tags:
      - Plugins
  /consumers/{consumer_username_or_id}/plugins/{plugin_id}:
    delete:
      description: Delete a Plugin associated with a Consumer using ID.
      operationId: delete-plugin-for-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Plugin or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Plugin associated with a Consumer
      tags:
      - Plugins
    get:
      description: Get a Plugin associated with a Consumer using ID.
      operationId: fetch-plugin-for-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Plugin associated with a Consumer
      tags:
      - Plugins
    patch:
      description: Update a Plugin associated with a consumer using the consumer username
        or ID.
      operationId: update-plugin-for-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Plugin response:
                  value:
                    data:
                    - id: 02621eee-8309-4bf6-b36b-a82017a5393e
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - http
                      - https
                      enabled: true
                      tags:
                      - user-level
                      - low-priority
                    - id: 66c7b5c4-4aaf-4119-af1e-ee3ad75d0af4
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - tcp
                      - tls
                      enabled: true
                      tags:
                      - admin
                      - high-priority
                      - critical
                    next: http://localhost:8001/plugins?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_plugins_for_consumer_200_response'
              x-examples:
                Example 1:
                  id: ce44eef5-41ed-47f6-baab-f725cecf98c7
                  name: rate-limiting
                  created_at: 1422386534
                  instance_name: rate-limiting-foo
                  config:
                    hour: 500
                    minute: 20
                  protocols:
                  - http
                  - https
                  enabled: true
                  tags:
                  - user-level
                  - low-priority
          description: Example response
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Plugin associated with a Consumer
      tags:
      - Plugins
    put:
      description: Create or Update a Plugin associated with a Consumer using ID.
      operationId: upsert-plugin-for-consumer
      parameters:
      - description: The unique identifier or the username of the Consumer to retrieve.
        explode: false
        in: path
        name: consumer_username_or_id
        required: true
        schema:
          example: my-username
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Plugin response:
                  value:
                    data:
                    - id: 02621eee-8309-4bf6-b36b-a82017a5393e
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - http
                      - https
                      enabled: true
                      tags:
                      - user-level
                      - low-priority
                    - id: 66c7b5c4-4aaf-4119-af1e-ee3ad75d0af4
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - tcp
                      - tls
                      enabled: true
                      tags:
                      - admin
                      - high-priority
                      - critical
                    next: http://localhost:8001/plugins?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_plugins_for_consumer_200_response'
              x-examples:
                Example 1:
                  id: ce44eef5-41ed-47f6-baab-f725cecf98c7
                  name: rate-limiting
                  created_at: 1422386534
                  instance_name: rate-limiting-foo
                  config:
                    hour: 500
                    minute: 20
                  protocols:
                  - http
                  - https
                  enabled: true
                  tags:
                  - user-level
                  - low-priority
          description: Example response
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a Plugin associated with a Consumer
      tags:
      - Plugins
# START OF CUSTOM SECTION
  '/consumers/{consumer_name_or_id}/acls':
    parameters:
      - schema:
          type: string
        name: consumer_name_or_id
        in: path
        required: true
        description: The unique identifier or the name of the Consumer to view, modify, or delete.
    get:
      summary: Get Consumer ACL
      tags:
        - Consumers
      responses:
        '200':
          description: Return specified consumer group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupResponse'
              examples:
                'Response Body':
                  value:
                    id: ec1a1f6f-2aa4-4e58-93ff-b56368f19b27
                    name: rate-limiting
                    created_at: 1422386534
                    route: null
                    service: null
                    consumer: null
                    config:
                      hour: 500
                      minute: 20
                    protocols:
                      - http
                      - https
                    enabled: true
                    tags:
                      - user-level
                      - low-priority
      operationId: view-group-consumer
      description: Returns specified consumer group details
    post:
      summary: Create group for Consumer
      tags:
        - Consumers
      responses:
        '200':
          description: Consumer added to group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
              examples:
                'Response Body':
                  value:
                    id: 127dfc88-ed57-45bf-b77a-a9d3a152ad31
                    created_at: 1422386534
                    username: my-username
                    custom_id: my-custom-id
                    tags:
                      - user-level
                      - low-priority
        '201':
          description: Consumer Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
              examples:
                'Response Body':
                  value:
                    id: 127dfc88-ed57-45bf-b77a-a9d3a152ad31
                    created_at: 1422386534
                    username: my-username
                    custom_id: my-custom-id
                    tags:
                      - user-level
                      - low-priority
      description: Consumer added to group
      operationId: add-consumer-to-group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerGroupRequest'
            examples:
              'Request Body':
                value:
                  group: my-group
                  tags:
                    - user-level
                    - low-priority
    delete:
      summary: Delete Consumer
      tags:
        - Consumers
      responses:
        '204':
          description: No Content
      description: ''
      operationId: delete-group-of-consumer
# END OF CUSTOM SECTION
  /key-sets:
    get:
      description: |
        Retrieve a list of all Key-sets in the system. A Key Set object holds a collection of asymmetric key objects. This entity allows to logically group keys by their purpose. Key Sets can be both tagged and filtered by tags.
      operationId: list-key-set
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                    name: my-key_set
                    created_at: 1422386534
                    updated_at: 1422386534
                    tags:
                    - string
                    next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_key_set_200_response'
          description: Key set object response body
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Key-sets
      tags:
      - Key-sets
    post:
      description: This endpoint allows creating a new Key-set by sending a JSON object
        that describes the Key-set to be created.The request body must contain all
        the fields required to create a new Key-set.
      operationId: create-key-set
      requestBody:
        $ref: '#/components/requestBodies/key-set-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                    name: my-key_set
                    created_at: 1422386534
                    updated_at: 1422386534
                    tags:
                    - string
                    next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_key_set_200_response'
          description: Key set object response body
        "400":
          description: Returned if the request contains invalid data.
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Key-set
      tags:
      - Key-sets
  /key-sets/{key-set_id_or_name}:
    delete:
      description: |-
        Delete a Key-set

        > Note: This API is not available in DB-less mode.
      operationId: delete-key-set
      parameters:
      - description: The unique identifier or the `name` attribute of the Key Set
          that should be associated to the newly-created Key.
        explode: false
        in: path
        name: key-set_id_or_name
        required: true
        schema:
          example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Key-set or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Key-set
      tags:
      - Key-sets
    get:
      description: This endpoint retrieves information about a specific key-set based
        on its ID or name.
      operationId: get-key-set
      parameters:
      - description: The unique identifier or the `name` attribute of the Key Set
          that should be associated to the newly-created Key.
        explode: false
        in: path
        name: key-set_id_or_name
        required: true
        schema:
          example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                    name: my-key_set
                    created_at: 1422386534
                    updated_at: 1422386534
                    tags:
                    - string
                    next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_key_set_200_response'
          description: Key set object response body
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Key-set
      tags:
      - Key-sets
    patch:
      description: |-
        Update a Key-set using ID or name.

        > Note: This API is not available in DB-less mode.

        Inserts (or replaces) the Key Set under the requested resource with the definition specified in the body. The Key Set will be identified via the name or id attribute.

        When the name or id attribute has the structure of a UUID, the Key Set being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.

        When creating a new Key Set without specifying id (neither in the URL nor in the body), then it will be auto-generated.

        Notice that specifying a name in the URL and a different one in the request body is not allowed.
      operationId: update-key-set
      parameters:
      - description: The unique identifier or the `name` attribute of the Key Set
          that should be associated to the newly-created Key.
        explode: false
        in: path
        name: key-set_id_or_name
        required: true
        schema:
          example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/key-set-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                    name: my-key_set
                    created_at: 1422386534
                    updated_at: 1422386534
                    tags:
                    - string
                    next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_key_set_200_response'
          description: Key set object response body
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key-set
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Key-set
      tags:
      - Key-sets
    put:
      description: |-
        Update a Key-set using ID or name.

        > Note: This API is not available in DB-less mode.
      operationId: upsert-key-set
      parameters:
      - description: The unique identifier or the `name` attribute of the Key Set
          that should be associated to the newly-created Key.
        explode: false
        in: path
        name: key-set_id_or_name
        required: true
        schema:
          example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/key-set-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                    name: my-key_set
                    created_at: 1422386534
                    updated_at: 1422386534
                    tags:
                    - string
                    next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_key_set_200_response'
          description: Key set object response body
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key-set
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update a Key-set
      tags:
      - Key-sets
  /keys:
    get:
      description: List all Keys
      operationId: list-key
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_key_200_response'
          description: A successful response listing Keys
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Keys
      tags:
      - Keys
    post:
      description: |
        This API endpoint allows you to create a new key. When the request is successful, the API will respond with a 200 status code and a JSON object that represents the newly created key. If the request is invalid, the API will respond with a `400` status code and an error message in the response body.

        > Note: This API is not available in DB-less mode.
      operationId: create-key
      requestBody:
        $ref: '#/components/requestBodies/keys-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully created Key
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Key
      tags:
      - Keys
  /keys/{key_id_or_name}:
    delete:
      description: Delete a Key
      operationId: delete-key
      parameters:
      - description: The unique identifier or the name of the Key to retrieve.
        explode: false
        in: path
        name: key_id_or_name
        required: true
        schema:
          example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Key or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Key
      tags:
      - Keys
    get:
      description: Get a Key using ID or name.
      operationId: get-key
      parameters:
      - description: The unique identifier or the name of the Key to retrieve.
        explode: false
        in: path
        name: key_id_or_name
        required: true
        schema:
          example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
                    jwk: "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}"
                    kid: "42"
                    name: a-key
                    pem:
                      private_key: '-----BEGIN'
                      public_key: '-----BEGIN'
                    set:
                      id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully fetched Key
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Key
      tags:
      - Keys
    patch:
      description: Update a Key
      operationId: update-key
      parameters:
      - description: The unique identifier or the name of the Key to retrieve.
        explode: false
        in: path
        name: key_id_or_name
        required: true
        schema:
          example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/keys-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example:
                  value:
                    id: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                    set:
                      id: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
                    name: my-key
                    kid: "42"
                    jwk: "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}"
                    pem:
                      private_key: '-----BEGIN'
                      public_key: '-----BEGIN'
                    tags:
                    - application-a
                    - public-key-xyz
                    created_at: 1422386534
                    updated_at: 1422386534
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully updated Key
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Key
      tags:
      - Keys
    put:
      description: Create or Update Key using ID or name.
      operationId: upsert-key
      parameters:
      - description: The unique identifier or the name of the Key to retrieve.
        explode: false
        in: path
        name: key_id_or_name
        required: true
        schema:
          example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/keys-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example:
                  value:
                    id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
                    jwk: "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}"
                    kid: "42"
                    name: a-key
                    pem:
                      private_key: '-----BEGIN'
                      public_key: '-----BEGIN'
                    set:
                      id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully upserted Key
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a Key
      tags:
      - Keys
  /plugins:
    get:
      description: "This endpoint allows you to list all the plugins. You can use\
        \ query parameters to filter the results by size or tags, for example `/plugins?size=50&tags=enterprise`."
      operationId: list-plugin
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Plugin response:
                  value:
                    data:
                    - id: 02621eee-8309-4bf6-b36b-a82017a5393e
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - http
                      - https
                      enabled: true
                      tags:
                      - user-level
                      - low-priority
                    - id: 66c7b5c4-4aaf-4119-af1e-ee3ad75d0af4
                      name: rate-limiting
                      created_at: 1422386534
                      route: null
                      service: null
                      consumer: null
                      config:
                        hour: 500
                        minute: 20
                      protocols:
                      - tcp
                      - tls
                      enabled: true
                      tags:
                      - admin
                      - high-priority
                      - critical
                    next: http://localhost:8001/plugins?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
              schema:
                $ref: '#/components/schemas/list_plugins_for_consumer_200_response'
              x-examples:
                Example 1:
                  id: ce44eef5-41ed-47f6-baab-f725cecf98c7
                  name: rate-limiting
                  created_at: 1422386534
                  instance_name: rate-limiting-foo
                  config:
                    hour: 500
                    minute: 20
                  protocols:
                  - http
                  - https
                  enabled: true
                  tags:
                  - user-level
                  - low-priority
          description: Example response
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Plugins
      tags:
      - Plugins
    post:
      description: |-
        Create a new Plugin

        >Note: This API is not available in DB-less mode.
      operationId: create-plugin
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    config:
                      anonymous: null
                      hide_credentials: false
                      key_in_body: false
                      key_in_header: true
                      key_in_query: true
                      key_names:
                      - apikey
                      run_on_preflight: true
                    enabled: true
                    id: 3fd1eea1-885a-4011-b986-289943ff8177
                    name: key-auth
                    protocols:
                    - grpc
                    - grpcs
                    - http
                    - https
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Plugin
      tags:
      - Plugins
  /plugins/{plugin_id}:
    delete:
      description: Delete a Plugin
      operationId: delete-plugin
      parameters:
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Plugin or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Plugin
      tags:
      - Plugins
    get:
      description: Get a Plugin using ID.
      operationId: get-plugin
      parameters:
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
      - Plugins
    patch:
      description: Update a Plugin
      operationId: update-plugin
      parameters:
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    config:
                      anonymous: null
                      hide_credentials: false
                      key_in_body: false
                      key_in_header: true
                      key_in_query: true
                      key_names:
                      - apikey
                      run_on_preflight: true
                    enabled: true
                    id: 3fd1eea1-885a-4011-b986-289943ff8177
                    name: key-auth
                    protocols:
                    - grpc
                    - grpcs
                    - http
                    - https
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully updated Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Plugin
      tags:
      - Plugins
    put:
      description: Create or Update Plugin using ID.
      operationId: upsert-plugin
      parameters:
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    config:
                      anonymous: null
                      hide_credentials: false
                      key_in_body: false
                      key_in_header: true
                      key_in_query: true
                      key_names:
                      - apikey
                      run_on_preflight: true
                    enabled: true
                    id: 3fd1eea1-885a-4011-b986-289943ff8177
                    name: key-auth
                    protocols:
                    - grpc
                    - grpcs
                    - http
                    - https
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a Plugin
      tags:
      - Plugins
  /routes:
    get:
      description: |-
        List all routes

        route entities define rules to match client requests. Each route is associated with a service, and a service may have multiple routes associated to it. Every request matching a given route will be proxied to its associated service.

        > Note: Path handling algorithms v1 was deprecated in Kong 3.0. From Kong 3.0, when router_flavor is set to expressions, route.path_handling will be unconfigurable and the path handling behavior will be "v0"; when router_flavor is set to traditional_compatible, the path handling behavior will be "v0" regardless of the value of route.path_handling. Only router_flavor = traditional will support path_handling "v1" behavior.
      operationId: list-route
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_route_200_response'
          description: A successful response listing routes
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all routes
      tags:
      - Routes
    post:
      description: Create a new route
      operationId: create-route
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new route
      tags:
      - Routes
  /routes/{route_id_or_name}:
    delete:
      description: |-
        Delete a route


        > Note: This API is not available in DB-less mode.
      operationId: delete-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted route or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a route
      tags:
      - Routes
    get:
      description: Get a route using ID or name.
      operationId: get-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a route
      tags:
      - Routes
    patch:
      description: |-
        Update a route

        > Note: This API is not available in DB-less mode.
      operationId: update-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully updated route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a route
      tags:
      - Routes
    put:
      description: |-
        Create or Update route using ID or name.


        > Note: This API is not available in DB-less mode.
      operationId: upsert-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully upserted route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update a route
      tags:
      - Routes
  /routes/{route_id_or_name}/plugins:
    get:
      description: List all Plugins associated with a route
      operationId: list-plugins-for-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_plugins_for_route_200_response'
          description: A successful response listing Plugins
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Plugins associated with a route
      tags:
      - Plugins
    post:
      description: Create a new Plugin associated with a route
      operationId: create-plugin-for-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    config:
                      anonymous: null
                      hide_credentials: false
                      key_in_body: false
                      key_in_header: true
                      key_in_query: true
                      key_names:
                      - apikey
                      run_on_preflight: true
                    enabled: true
                    id: 3fd1eea1-885a-4011-b986-289943ff8177
                    name: key-auth
                    protocols:
                    - grpc
                    - grpcs
                    - http
                    - https
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Plugin associated with a route
      tags:
      - Plugins
  /routes/{route_id_or_name}/plugins/{plugin_id}:
    delete:
      description: Delete a Plugin associated with a route using ID.
      operationId: delete-plugin-for-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Plugin or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Plugin associated with a route
      tags:
      - Plugins
    get:
      description: Get a Plugin associated with a route using ID.
      operationId: fetch-plugin-for-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Plugin associated with a route
      tags:
      - Plugins
    patch:
      description: Update a Plugin associated with a route using ID.
      operationId: update-plugin-for-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully updated Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Plugin associated with a route
      tags:
      - Plugins
    put:
      description: Create or Update a Plugin associated with a route using ID.
      operationId: upsert-plugin-for-route
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a Plugin associated with a route
      tags:
      - Plugins
  /services:
    get:
      description: List all services
      operationId: list-service
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
            application/xml:
              schema:
                properties: {}
                type: object
          description: A successful response listing services
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all services
      tags:
      - Services
    post:
      description: Create a new service
      operationId: create-service
      requestBody:
        $ref: '#/components/requestBodies/service-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully created service
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid service
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new service
      tags:
      - Services
  /services/{service_id_or_name}:
    delete:
      description: Delete a service
      operationId: delete-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted service or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a service
      tags:
      - Services
    get:
      description: Get a service using ID or name.
      operationId: get-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully fetched service
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a service
      tags:
      - Services
    patch:
      description: Update a service
      operationId: update-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/service-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully updated service
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid service
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a service
      tags:
      - Services
    put:
      description: Create or Update service using ID or name.
      operationId: upsert-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/service-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully upserted service
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid service
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a service
      tags:
      - Services
  /services/{service_id_or_name}plugins:
    get:
      description: List all Plugins associated with a service
      operationId: get-plugins-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_plugins_for_route_200_response'
          description: A successful response listing Plugins
      summary: List all Plugins associated with a service
      tags:
      - Plugins
    post:
      description: Create a new Plugin associated with a service
      operationId: create-plugin-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Plugin associated with a service
      tags:
      - Plugins
  /services/{service_id_or_name}/plugins/{plugin_id}:
    delete:
      description: Delete a Plugin associated with a service using ID.
      operationId: delete-plugin-for-a-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Plugin or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a plugin associated with a service
      tags:
      - Plugins
    get:
      description: Get a Plugin associated with a service using ID.
      operationId: fetch-plugin-with-a-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Plugin associated with a service
      tags:
      - Plugins
    patch:
      description: Update a Plugin associated with a service using ID.
      operationId: update-plugin-for-a-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully updated Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a plugin associated with a service
      tags:
      - Plugins
    put:
      description: Create or Update a Plugin associated with a service using ID.
      operationId: upsert-plugin-for-a-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the Plugin to create or update.
        explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          example: response-ratelimiting
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a plugin associated with a service
      tags:
      - Plugins
  /services/{service_id_or_name}/routes:
    get:
      description: List all routes associated with a service
      operationId: list-routes-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    data:
                    - hosts:
                      - foo.example.com
                      - bar.example.com
                      id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                      name: example-route
                      paths:
                      - /v1
                      - /v2
                      service:
                        id: bd380f99-659d-415e-b0e7-72ea05df3218
                    offset: string
              schema:
                $ref: '#/components/schemas/list_route_200_response'
          description: A successful response listing routes
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all routes associated with a service
      tags:
      - Routes
    post:
      description: Create a new route associated with a service
      operationId: create-route-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    hosts:
                    - foo.example.com
                    - bar.example.com
                    id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                    name: example-route
                    paths:
                    - /v1
                    - /v2
                    service:
                      id: bd380f99-659d-415e-b0e7-72ea05df3218
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new route associated with a service
      tags:
      - Routes
  /services/{service_id_or_name}/routes/{route_id_or_name}:
    delete:
      description: Delete a route associated with a service using ID or name.
      operationId: delete-route-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted route or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a route associated with a service
      tags:
      - Routes
    get:
      description: Get a route associated with a service using ID or name.
      operationId: fetch-route-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    hosts:
                    - foo.example.com
                    - bar.example.com
                    id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                    name: example-route
                    paths:
                    - /v1
                    - /v2
                    service:
                      id: bd380f99-659d-415e-b0e7-72ea05df3218
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a route associated with a service
      tags:
      - Routes
    patch:
      description: Update a route associated with a service using ID or name.
      operationId: update-route-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    hosts:
                    - foo.example.com
                    - bar.example.com
                    id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                    name: example-route
                    paths:
                    - /v1
                    - /v2
                    service:
                      id: bd380f99-659d-415e-b0e7-72ea05df3218
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully updated route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a route associated with a service
      tags:
      - Routes
    put:
      description: Create or Update a route associated with a service using ID or
        name.
      operationId: upsert-route-for-service
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    hosts:
                    - foo.example.com
                    - bar.example.com
                    id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                    name: example-route
                    paths:
                    - /v1
                    - /v2
                    service:
                      id: bd380f99-659d-415e-b0e7-72ea05df3218
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully upserted route
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a route associated with a service
      tags:
      - Routes
  /snis:
    get:
      description: List all SNIs
      operationId: list-sni
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_sni_with_certificate_200_response'
          description: SNI response object
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all SNIs
      tags:
      - SNIs
    post:
      description: Create a new SNI
      operationId: create-sni
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_sni_with_certificate_200_response'
          description: SNI response object
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new SNI
      tags:
      - SNIs
  /snis/{sni_name_or_id}:
    delete:
      description: Delete an SNI
      operationId: delete-sni
      parameters:
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted SNI or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete an SNI
      tags:
      - SNIs
    get:
      description: Get an SNI using ID or name.
      operationId: get-sni
      parameters:
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_sni_with_certificate_200_response'
          description: SNI response object
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch an SNI
      tags:
      - SNIs
    patch:
      description: Update an SNI
      operationId: update-sni
      parameters:
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_sni_with_certificate_200_response'
          description: SNI response object
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update an SNI
      tags:
      - SNIs
    put:
      description: Create or Update SNI using ID or name.
      operationId: upsert-sni
      parameters:
      - description: The unique identifier or the name of the SNI to retrieve.
        explode: false
        in: path
        name: sni_name_or_id
        required: true
        schema:
          example: my-sni
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_sni_with_certificate_200_response'
          description: SNI response object
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update an SNI
      tags:
      - SNIs
  /upstreams:
    get:
      description: |
        List all registered upstreams. You can filter the results by pagination size, offset, or tags like `/upstreams?size=10&offset=0`.
      operationId: list-upstream
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                example:
                  value:
                    data:
                    - algorithm: round-robin
                      hash_fallback: none
                      hash_on: none
                      hash_on_cookie_path: /
                      healthchecks:
                        active:
                          concurrency: 10
                          healthy:
                            http_statuses:
                            - 200
                            - 302
                            interval: 0
                            successes: 0
                          http_path: /
                          https_verify_certificate: true
                          timeout: 1
                          type: http
                          unhealthy:
                            http_failures: 0
                            http_statuses:
                            - 429
                            - 404
                            - 500
                            - 501
                            - 502
                            - 503
                            - 504
                            - 505
                            interval: 0
                            tcp_failures: 0
                            timeouts: 0
                        passive:
                          healthy:
                            http_statuses:
                            - 200
                            - 201
                            - 202
                            - 203
                            - 204
                            - 205
                            - 206
                            - 207
                            - 208
                            - 226
                            - 300
                            - 301
                            - 302
                            - 303
                            - 304
                            - 305
                            - 306
                            - 307
                            - 308
                            successes: 0
                          type: http
                          unhealthy:
                            http_failures: 0
                            http_statuses:
                            - 429
                            - 500
                            - 503
                            tcp_failures: 0
                            timeouts: 0
                        threshold: 0
                      id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
                      name: api.example.internal
                      slots: 10000
                    offset: string
              schema:
                $ref: '#/components/schemas/list_upstream_200_response'
          description: A successful response listing Upstreams
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Upstreams
      tags:
      - Upstreams
    post:
      description: |
        Create a new Upstream
      operationId: create-upstream
      requestBody:
        $ref: '#/components/requestBodies/upstream-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully created Upstream
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Upstream
      tags:
      - Upstreams
  /upstreams/{upstream_id_or_name}:
    delete:
      description: Delete an Upstream
      operationId: delete-upstream
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Upstream or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete an Upstream
      tags:
      - Upstreams
    get:
      description: Get an Upstream using ID or name.
      operationId: get-upstream
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully fetched Upstream
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch an Upstream
      tags:
      - Upstreams
    patch:
      description: Update an Upstream
      operationId: update-upstream
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/upstream-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    id: 58c8ccbb-eafb-4566-991f-2ed4f678fa70
                    created_at: 1422386534
                    name: my-upstream
                    algorithm: round-robin
                    hash_on: none
                    hash_fallback: none
                    hash_on_cookie_path: /
                    slots: 10000
                    healthchecks:
                      passive:
                        type: http
                        healthy:
                          http_statuses:
                          - 200
                          - 201
                          - 202
                          - 203
                          - 204
                          - 205
                          - 206
                          - 207
                          - 208
                          - 226
                          - 300
                          - 301
                          - 302
                          - 303
                          - 304
                          - 305
                          - 306
                          - 307
                          - 308
                          successes: 0
                        unhealthy:
                          http_statuses:
                          - 429
                          - 500
                          - 503
                          timeouts: 0
                          http_failures: 0
                          tcp_failures: 0
                      active:
                        https_verify_certificate: true
                        healthy:
                          http_statuses:
                          - 200
                          - 302
                          successes: 0
                          interval: 0
                        unhealthy:
                          http_failures: 0
                          http_statuses:
                          - 429
                          - 404
                          - 500
                          - 501
                          - 502
                          - 503
                          - 504
                          - 505
                          timeouts: 0
                          tcp_failures: 0
                          interval: 0
                        type: http
                        concurrency: 10
                        headers:
                          x-my-header:
                          - foo
                          - bar
                          x-another-header:
                          - bla
                        timeout: 1
                        http_path: /
                        https_sni: example.com
                      threshold: 0
                    tags:
                    - user-level
                    - low-priority
                    host_header: example.com
                    client_certificate:
                      id: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
                    use_srv_name: false
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully updated Upstream
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update an Upstream
      tags:
      - Upstreams
    put:
      description: Create or Update Upstream using ID or name.
      operationId: upsert-upstream
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/upstream-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    id: 58c8ccbb-eafb-4566-991f-2ed4f678fa70
                    created_at: 1422386534
                    name: my-upstream
                    algorithm: round-robin
                    hash_on: none
                    hash_fallback: none
                    hash_on_cookie_path: /
                    slots: 10000
                    healthchecks:
                      passive:
                        type: http
                        healthy:
                          http_statuses:
                          - 200
                          - 201
                          - 202
                          - 203
                          - 204
                          - 205
                          - 206
                          - 207
                          - 208
                          - 226
                          - 300
                          - 301
                          - 302
                          - 303
                          - 304
                          - 305
                          - 306
                          - 307
                          - 308
                          successes: 0
                        unhealthy:
                          http_statuses:
                          - 429
                          - 500
                          - 503
                          timeouts: 0
                          http_failures: 0
                          tcp_failures: 0
                      active:
                        https_verify_certificate: true
                        healthy:
                          http_statuses:
                          - 200
                          - 302
                          successes: 0
                          interval: 0
                        unhealthy:
                          http_failures: 0
                          http_statuses:
                          - 429
                          - 404
                          - 500
                          - 501
                          - 502
                          - 503
                          - 504
                          - 505
                          timeouts: 0
                          tcp_failures: 0
                          interval: 0
                        type: http
                        concurrency: 10
                        headers:
                          type: object
                          properties:
                            x-my-header:
                              type: array
                              items:
                                type: string
                              description: The value(s) of the x-my-header header.
                            x-another-header:
                              type: array
                              items:
                                type: string
                              description: The value(s) of the x-another-header header.
                        timeout: 1
                        http_path: /
                        https_sni: example.com
                      threshold: 0
                    tags:
                    - user-level
                    - low-priority
                    host_header: example.com
                    client_certificate:
                      id: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
                    use_srv_name: false
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully upserted Upstream
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update an Upstream
      tags:
      - Upstreams
  /upstreams/{upstream_id_or_name}/targets:
    get:
      description: List all Targets associated with a an Upstream
      operationId: list-targets-for-upstream
      parameters:
      - description: ID or name of the related Upstream
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_targets_for_upstream_200_response'
          description: A successful response listing Targets
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Targets associated with an Upstream
      tags:
      - Targets
    post:
      description: Create a new Target associated with an Upstream
      operationId: create-target-for-upstream
      parameters:
      - description: ID or name of the related Upstream
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/target-request'
      responses:
        "200":
          content:
            application/json:
              examples:
                Successfully created Target:
                  value:
                    id: 173a6cee-90d1-40a7-89cf-0329eca780a6
                    created_at: 1422386534
                    upstream:
                      id: bdab0e47-4e37-4f0b-8fd0-87d95cc4addc
                    target: example.com:8000
                    weight: 100
                    tags:
                    - user-level
                    - low-priority
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully created Target
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Target
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Target associated with an Upstream
      tags:
      - Targets
  /upstreams/{upstream_id_or_name}/targets/{target_id_or_target}:
    delete:
      description: Delete a Target associated with a an Upstream using ID or target.
      operationId: delete-upstream-target
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: "The host/port combination element of the target to set as unhealthy,\
          \ or the `id` of an existing target entry."
        explode: false
        in: path
        name: target_id_or_target
        required: true
        schema:
          example: example.com:8000
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Target or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Target associated with a an Upstream
      tags:
      - Targets
    get:
      description: Get a Target associated with an Upstream using ID or target.
      operationId: fetch-target-for-upstream
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: "The host/port combination element of the target to set as unhealthy,\
          \ or the `id` of an existing target entry."
        explode: false
        in: path
        name: target_id_or_target
        required: true
        schema:
          example: example.com:8000
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully fetched Target
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Target associated with an Upstream
      tags:
      - Targets
    patch:
      description: Update a Target associated with a an Upstream using ID or target.
      operationId: update-target-for-upstream
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: "The host/port combination element of the target to set as unhealthy,\
          \ or the `id` of an existing target entry."
        explode: false
        in: path
        name: target_id_or_target
        required: true
        schema:
          example: example.com:8000
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/target-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully updated Target
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Target
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a target associated with an Upstream
      tags:
      - Targets
    put:
      description: Create or Update a Target associated with an Upstream using ID
        or target.
      operationId: upsert-target-for-upstream
      parameters:
      - description: The unique identifier or the name of the Upstream associated
          to the Certificate to be retrieved.
        explode: false
        in: path
        name: upstream_id_or_name
        required: true
        schema:
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          type: string
        style: simple
      - description: "The host/port combination element of the target to set as unhealthy,\
          \ or the `id` of an existing target entry."
        explode: false
        in: path
        name: target_id_or_target
        required: true
        schema:
          example: example.com:8000
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/target-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully upserted Target
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Target
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a Target associated with an Upstream
      tags:
      - Targets
  /vaults:
    get:
      description: List all Vaults
      operationId: list-vault
      parameters:
      - description: Number of resources to be returned.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Offset from which to return the next set of resources. Use the
          value of the 'offset' field from the response of a list operation as input
          here to paginate through all the resources
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: "A list of tags to filter the list of resources on. Multiple\
          \ tags can be concatenated using ','' to mean AND or using ''/'' to mean\
          \ OR.'"
        example: "tag1,tag2"
        explode: true
        in: query
        name: tags
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_vault_200_response'
          description: A successful response listing Vaults
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all Vaults
      tags:
      - Vaults
    post:
      description: Create a new Vault
      operationId: create-vault
      requestBody:
        $ref: '#/components/requestBodies/vault-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully created Vault
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create a new Vault
      tags:
      - Vaults
  /vaults/{vault_id_or_prefix}:
    delete:
      description: Delete a Vault
      operationId: delete-vault
      parameters:
      - description: The unique identifier or the prefix of the Vault to retrieve.
        explode: false
        in: path
        name: vault_id_or_prefix
        required: true
        schema:
          example: env
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted Vault or the resource didn't exist
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete a Vault
      tags:
      - Vaults
    get:
      description: |-
        Get a Vault using ID or prefix.

        Vault entities are used to configure different Vault connectors.
      operationId: get-vault
      parameters:
      - description: The unique identifier or the prefix of the Vault to retrieve.
        explode: false
        in: path
        name: vault_id_or_prefix
        required: true
        schema:
          example: env
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully fetched Vault
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Fetch a Vault
      tags:
      - Vaults
    patch:
      description: Update a Vault
      operationId: update-vault
      parameters:
      - description: The unique identifier or the prefix of the Vault to retrieve.
        explode: false
        in: path
        name: vault_id_or_prefix
        required: true
        schema:
          example: env
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/vault-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully updated Vault
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Resource does not exist
      summary: Update a Vault
      tags:
      - Vaults
    put:
      description: Create or Update Vault using ID or prefix.
      operationId: upsert-vault
      parameters:
      - description: The unique identifier or the prefix of the Vault to retrieve.
        explode: false
        in: path
        name: vault_id_or_prefix
        required: true
        schema:
          example: env
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/vault-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully upserted Vault
        "400":
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Upsert a Vault
      tags:
      - Vaults
  /endpoints:
    get:
      description: List all available endpoints provided by the Admin API.
      operationId: get-endpoints
      responses:
        "200":
          content:
            application/json:
              examples:
                Get all endpoints:
                  value:
                    data:
                    - /
                    - /acls
                    - "/acls/{acls}"
                    - "/acls/{acls}/consumer"
                    - /acme
                    - /acme/certificates
                    - "/acme/certificates/{certificates}"
                    - /acme_storage
                    - "/acme_storage/{acme_storage}"
                    - /applications
                    - "/applications/{applications}"
                    - "/applications/{applications}/application_instances"
                    - "/applications/{applications}/application_instances/{application_instances}"
                    - "/applications/{applications}/consumer"
                    - "/applications/{applications}/credentials/{plugin}"
                    - "/applications/{applications}/credentials/{plugin}/{credential_id}"
                    - "/applications/{applications}/developer"
                    - /auth
                    - /basic-auths
                    - "/basic-auths/{basicauth_credentials}"
                    - "/basic-auths/{basicauth_credentials}/consumer"
                    - /ca_certificates
                    - "/ca_certificates/{ca_certificates}"
                    - "/ca_certificates/{ca_certificates}/mtls_auth_credentials"
                    - "/ca_certificates/{ca_certificates}/mtls_auth_credentials/{mtls_auth_credentials}"
                    - /cache
                    - "/cache/{key}"
                    - /certificates
                    - "/certificates/{certificates}"
                    - "/certificates/{certificates}/services"
                    - "/certificates/{certificates}/services/{services}"
                    - "/certificates/{certificates}/snis"
                    - "/certificates/{certificates}/snis/{snis}"
                    - "/certificates/{certificates}/upstreams"
                    - "/certificates/{certificates}/upstreams/{upstreams}"
                    - /clustering/data-planes
                    - /clustering/status
                    - /config
                    - /consumers
                    - "/consumers/{consumers}"
                    - "/consumers/{consumers}/acls"
                    - "/consumers/{consumers}/acls/{acls}"
                    - "/consumers/{consumers}/admins"
                    - "/consumers/{consumers}/admins/{admins}"
                    - "/consumers/{consumers}/applications"
                    - "/consumers/{consumers}/applications/{applications}"
                    - "/consumers/{consumers}/basic-auth"
                    - "/consumers/{consumers}/basic-auth/{basicauth_credentials}"
                    - "/consumers/{consumers}/developers"
                    - "/consumers/{consumers}/developers/{developers}"
                    - "/consumers/{consumers}/hmac-auth"
                    - "/consumers/{consumers}/hmac-auth/{hmacauth_credentials}"
                    - "/consumers/{consumers}/jwt"
                    - "/consumers/{consumers}/jwt/{jwt_secrets}"
                    - "/consumers/{consumers}/key-auth"
                    - "/consumers/{consumers}/key-auth/{keyauth_credentials}"
                    - "/consumers/{consumers}/key-auth-enc"
                    - "/consumers/{consumers}/key-auth-enc/{keyauth_enc_credentials}"
                    - "/consumers/{consumers}/login_attempts"
                    - "/consumers/{consumers}/login_attempts/{login_attempts}"
                    - "/consumers/{consumers}/mtls-auth"
                    - "/consumers/{consumers}/mtls-auth/{mtls_auth_credentials}"
                    - "/consumers/{consumers}/mtls_auth_credentials"
                    - "/consumers/{consumers}/mtls_auth_credentials/{mtls_auth_credentials}"
                    - "/consumers/{consumers}/oauth2"
                    - "/consumers/{consumers}/oauth2/{oauth2_credentials}"
                    - "/consumers/{consumers}/plugins"
                    - "/consumers/{consumers}/plugins/{plugins}"
                    - "/debug/cluster/log-level/{log_level}"
                    - /debug/node/log-level
                    - "/debug/node/log-level/{log_level}"
                    - /debug/profiling/cpu
                    - /debug/profiling/gc-snapshot
                    - /debug/profiling/memory
                    - /degraphql_routes
                    - "/degraphql_routes/{degraphql_routes}"
                    - "/degraphql_routes/{degraphql_routes}/service"
                    - /endpoints
                    - /entities/migrate
                    - /event-hooks
                    - /event-hooks/sources
                    - "/event-hooks/sources/{source}"
                    - "/event-hooks/sources/{source}/{event}"
                    - "/event-hooks/{event_hooks}"
                    - "/event-hooks/{event_hooks}/ping"
                    - "/event-hooks/{event_hooks}/test"
                    - /files
                    - /files/*
                    - /files/partials/*
                    - "/files/{files}"
                    - /filter-chains
                    - "/filter-chains/{filter_chains}"
                    - "/filter-chains/{filter_chains}/route"
                    - "/filter-chains/{filter_chains}/service"
                    - /graphql-proxy-cache-advanced
                    - "/graphql-proxy-cache-advanced/{cache_key}"
                    - "/graphql-proxy-cache-advanced/{plugin_id}/caches/{cache_key}"
                    - /graphql-rate-limiting-advanced/costs
                    - "/graphql-rate-limiting-advanced/costs/{graphql_ratelimiting_advanced_cost_decoration}"
                    - /graphql_ratelimiting_advanced_cost_decoration
                    - "/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}"
                    - "/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}/service"
                    - /groups
                    - "/groups/{groups}"
                    - "/groups/{groups}/roles"
                    - /hmac-auths
                    - "/hmac-auths/{hmacauth_credentials}"
                    - "/hmac-auths/{hmacauth_credentials}/consumer"
                    - /jwt-signer/jwks
                    - "/jwt-signer/jwks/{jwt_signer_jwks}"
                    - "/jwt-signer/jwks/{jwt_signer_jwks}/rotate"
                    - /jwts
                    - "/jwts/{jwt_secrets}"
                    - "/jwts/{jwt_secrets}/consumer"
                    - /key-auths
                    - "/key-auths/{keyauth_credentials}"
                    - "/key-auths/{keyauth_credentials}/consumer"
                    - /key-auths-enc
                    - "/key-auths-enc/{keyauth_enc_credentials}"
                    - "/key-auths-enc/{keyauth_enc_credentials}/consumer"
                    - /key-sets
                    - "/key-sets/{key_sets}"
                    - "/key-sets/{key_sets}/keys"
                    - "/key-sets/{key_sets}/keys/{keys}"
                    - /keys
                    - "/keys/{keys}"
                    - "/keys/{keys}/set"
                    - /konnect_applications
                    - "/konnect_applications/{konnect_applications}"
                    - /license/report
                    - /licenses
                    - "/licenses/{licenses}"
                    - /login_attempts
                    - "/login_attempts/{login_attempts}"
                    - "/login_attempts/{login_attempts}/consumer"
                    - /metrics
                    - /mtls-auths
                    - "/mtls-auths/{mtls_auth_credentials}/consumer"
                    - /mtls_auth_credentials
                    - "/mtls_auth_credentials/{mtls_auth_credentials}"
                    - "/mtls_auth_credentials/{mtls_auth_credentials}/ca_certificate"
                    - "/mtls_auth_credentials/{mtls_auth_credentials}/consumer"
                    - /oauth2
                    - "/oauth2/{oauth2_credentials}"
                    - "/oauth2/{oauth2_credentials}/consumer"
                    - "/oauth2/{oauth2_credentials}/oauth2_tokens"
                    - "/oauth2/{oauth2_credentials}/oauth2_tokens/{oauth2_tokens}"
                    - /oauth2_tokens
                    - "/oauth2_tokens/{oauth2_tokens}"
                    - "/oauth2_tokens/{oauth2_tokens}/credential"
                    - "/oauth2_tokens/{oauth2_tokens}/service"
                    - /openid-connect/issuers
                    - "/openid-connect/issuers/{oic_issuers}"
                    - /openid-connect/jwks
                    - /plugins
                    - /plugins/enabled
                    - "/plugins/schema/{name}"
                    - "/plugins/{plugins}"
                    - "/plugins/{plugins}/consumer"
                    - "/plugins/{plugins}/route"
                    - "/plugins/{plugins}/service"
                    - /proxy-cache
                    - "/proxy-cache/{cache_key}"
                    - "/proxy-cache/{plugin_id}/caches/{cache_key}"
                    - /proxy-cache-advanced
                    - "/proxy-cache-advanced/{cache_key}"
                    - "/proxy-cache-advanced/{plugin_id}/caches/{cache_key}"
                    - /routes
                    - "/routes/{routes}"
                    - "/routes/{routes}/filter-chains"
                    - "/routes/{routes}/filter-chains/{filter_chains}"
                    - "/routes/{routes}/filters/all"
                    - "/routes/{routes}/filters/disabled"
                    - "/routes/{routes}/filters/enabled"
                    - "/routes/{routes}/plugins"
                    - "/routes/{routes}/plugins/{plugins}"
                    - "/routes/{routes}/service"
                    - /schemas/plugins/validate
                    - "/schemas/plugins/{name}"
                    - "/schemas/{db_entity_name}/validate"
                    - "/schemas/{name}"
                    - /services
                    - "/services/{services}"
                    - "/services/{services}/application_instances"
                    - "/services/{services}/application_instances/{application_instances}"
                    - "/services/{services}/applications"
                    - "/services/{services}/client_certificate"
                    - "/services/{services}/degraphql/routes"
                    - "/services/{services}/degraphql/routes/{degraphql_routes}"
                    - "/services/{services}/degraphql_routes"
                    - "/services/{services}/degraphql_routes/{degraphql_routes}"
                    - "/services/{services}/filter-chains"
                    - "/services/{services}/filter-chains/{filter_chains}"
                    - "/services/{services}/graphql-rate-limiting-advanced/costs"
                    - "/services/{services}/graphql_ratelimiting_advanced_cost_decoration"
                    - "/services/{services}/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}"
                    - "/services/{services}/oauth2_tokens"
                    - "/services/{services}/oauth2_tokens/{oauth2_tokens}"
                    - "/services/{services}/plugins"
                    - "/services/{services}/plugins/{plugins}"
                    - "/services/{services}/routes"
                    - "/services/{services}/routes/{routes}"
                    - /sessions
                    - "/sessions/{sessions}"
                    - /snis
                    - "/snis/{snis}"
                    - "/snis/{snis}/certificate"
                    - /status
                    - /tags
                    - "/tags/{tags}"
                    - /targets
                    - "/targets/{targets}"
                    - "/targets/{targets}/upstream"
                    - /timers
                    - /upstreams
                    - "/upstreams/{upstreams}"
                    - "/upstreams/{upstreams}/client_certificate"
                    - "/upstreams/{upstreams}/health"
                    - "/upstreams/{upstreams}/targets"
                    - "/upstreams/{upstreams}/targets/all"
                    - "/upstreams/{upstreams}/targets/{targets}"
                    - "/upstreams/{upstreams}/targets/{targets}/healthy"
                    - "/upstreams/{upstreams}/targets/{targets}/unhealthy"
                    - "/upstreams/{upstreams}/targets/{targets}/{address}/healthy"
                    - "/upstreams/{upstreams}/targets/{targets}/{address}/unhealthy"
                    - /userinfo
                    - /vault-auth
                    - "/vault-auth/{vault_auth_vaults}"
                    - "/vault-auth/{vault}/credentials"
                    - "/vault-auth/{vault}/credentials/token/{access_token}"
                    - "/vault-auth/{vault}/credentials/{consumer}"
                    - /vaults
                    - "/vaults/{vaults}"
                    - /vitals/
                    - /vitals/cluster
                    - /vitals/cluster/status_codes
                    - "/vitals/consumers/{consumer_id}/cluster"
                    - /vitals/nodes/
                    - "/vitals/nodes/{node_id}"
                    - "/vitals/reports/{entity_type}"
                    - /vitals/status_code_classes
                    - /vitals/status_codes/by_consumer
                    - /vitals/status_codes/by_consumer_and_route
                    - /vitals/status_codes/by_route
                    - /vitals/status_codes/by_service
              schema:
                $ref: '#/components/schemas/get_endpoints_200_response'
          description: Example response
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all endpoints
      tags:
      - Information
  /{endpoint}:
    head:
      description: |
        Similar to `HTTP` GET, but does not return the body. Returns HTTP 200 when the endpoint exits or HTTP 404 when it does not. Other status codes are possible.
      operationId: head-endpoints
      parameters:
      - description: Any available endpoint
        explode: false
        in: path
        name: endpoint
        required: true
        schema:
          example: key
          type: string
        style: simple
      responses:
        "204":
          description: No Content
          headers:
            Date:
              description: The date and time at which the message was originated
              example: "Fri, 14 Apr 2023 17:38:29 GMT"
              explode: false
              schema:
                type: string
              style: simple
            Content-Type:
              description: The media type of the message content
              explode: false
              schema:
                example: text/html; charset=UTF-8
                type: string
              style: simple
            Connection:
              description: Indicates whether the connection will be closed after the
                message is completed
              example: keep-alive
              explode: false
              schema:
                enum:
                - keep-alive
                - close
                type: string
              style: simple
            Access-Control-Allow-Origin:
              description: Indicates whether the resource can be accessed by any origin
              explode: false
              schema:
                example: '*'
                type: string
              style: simple
            X-Kong-Admin-Request-ID:
              description: "A unique identifier for the request, generated by Kong"
              explode: false
              schema:
                example: aqETeVmkeiGnAMzdUT2JRWroB2myY1lB
                type: string
              style: simple
            X-Kong-Admin-Latency:
              description: "The time taken to process the request on the server, in\
                \ milliseconds"
              explode: false
              schema:
                example: 5
                type: integer
              style: simple
            Server:
              description: The software used by the origin server to handle the request
              explode: false
              schema:
                example: kong/3.2.2.0-enterprise-edition
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: Endpoint does not exist
      summary: Check endpoint or entity existence
      tags:
      - Information
    options:
      description: |
        List all the supported HTTP methods by an endpoint. This can also be used with a CORS preflight request.
      operationId: options-endpoint
      parameters:
      - description: Any available endpoint
        explode: false
        in: path
        name: endpoint
        required: true
        schema:
          example: key
          type: string
        style: simple
      responses:
        "204":
          description: No Content
          headers:
            Date:
              description: The date and time at which the message was originated
              example: "Fri, 14 Apr 2023 17:24:17 GMT"
              explode: false
              schema:
                type: string
              style: simple
            Connection:
              description: Indicates whether the connection will be closed after the
                message is completed
              example: keep-alive
              explode: false
              schema:
                enum:
                - keep-alive
                - close
                type: string
              style: simple
            Access-Control-Allow-Origin:
              description: Indicates whether the resource can be accessed by any origin
              explode: false
              schema:
                example: '*'
                type: string
              style: simple
            Access-Control-Allow-Headers:
              description: Used in response to a preflight request to indicate which
                HTTP headers can be used during the actual request
              explode: false
              schema:
                example: "Content-Type, Kong-Admin-Token, Kong-Request-Type, Cache-Control"
                type: string
              style: simple
            X-Kong-Admin-Request-ID:
              description: "A unique identifier for the request, generated by Kong"
              explode: false
              schema:
                example: gDP1cF3OsNbrgcKPhRNE0RXRNfS7NcoG
                type: string
              style: simple
            Allow:
              description: Lists the HTTP methods that are supported for the resource
              explode: false
              schema:
                example: "OPTIONS, PATCH, POST"
                type: string
              style: simple
            Access-Control-Allow-Methods:
              description: Indicates the methods allowed when accessing the resource
                in response to a preflight request
              explode: false
              schema:
                example: "OPTIONS, PATCH, POST"
                type: string
              style: simple
            X-Kong-Admin-Latency:
              description: "The time taken to process the request on the server, in\
                \ milliseconds"
              explode: false
              schema:
                example: 5
                type: integer
              style: simple
            Server:
              description: The software used by the origin server to handle the request
              explode: false
              schema:
                example: kong/3.2.2.0-enterprise-edition
                type: string
              style: simple
        "400":
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List method by endpoint
      tags:
      - Information
  /schemas/{entity}:
    get:
      description: "Retrieve the schema of an entity. This is useful to understand\
        \ what fields an entity accepts, and can be used for building third-party\
        \ integrations with Kong."
      operationId: get-schemas-entity
      parameters:
      - explode: false
        in: path
        name: entity
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                A mock schema:
                  value:
                    fields:
                    - id:
                        auto: true
                        type: string
                        uuid: true
                    - created_at:
                        auto: true
                        timestamp: true
                        type: integer
              schema:
                $ref: '#/components/schemas/get_schemas_entity_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Retrieve entity schema
      tags:
      - Information
  /schemas/{entity}/validate:
    post:
      description: |-
        Check validity of a configuration against its entity schema. This allows you to test your input before submitting a request to the entity endpoints of the Admin API.

        A requests to the entity endpoint using the given configuration may still fail due to other reasons, such as invalid foreign key relationships or uniqueness check failures against the contents of the data store.
      operationId: post-schemas-entity-validate
      parameters:
      - explode: false
        in: path
        name: entity
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                schema validation successful:
                  value:
                    Message: schema validation successful
              schema:
                $ref: '#/components/schemas/post_schemas_entity_validate_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Validate a configuration against a schema
      tags:
      - Information
  /schemas/filters/{filter_name}:
    get:
      description: |
        Retrieve the JSON Schema of a Proxy-Wasm filter's configuration. This is useful to understand what fields a filter accepts, and can be used for building third-party integrations to the Kong's filter chain system.
      operationId: get-schemas-filters-filter_name
      parameters:
      - description: The name of a Proxy-Wasm filter
        explode: false
        in: path
        name: filter_name
        required: true
        schema:
          example: go-rate-limiting
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                filter returning a JSON Schema included in the filter metadata:
                  value:
                    $schema: http://json-schema.org/draft-04/schema#
                    type: object
                    properties:
                      add:
                        type: object
                        properties:
                          headers:
                            type: array
                            items:
                              type: string
                        required:
                        - headers
                    required:
                    - add
              schema:
                description: |
                  JSON Schema object describing the expected configuration for the filter. This endpoints always returns a JSON Schema object describing the filter configuration, even if the filter does not include JSON Schema metadata: if the configuration is expected as a raw string, the JSON Schema configuration returned by this endpoint will indicate so.
                type: object
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Retrieve Proxy-Wasm Filter JSON Schema
      tags:
      - Information
  /schemas/plugins/{plugin_name}:
    get:
      description: |
        Retrieve the schema of a plugin's configuration. This is useful to understand what fields a plugin accepts, and can be used for building third-party integrations to the Kong's plugin system.
      operationId: get-schemas-plugins-plugin_name
      parameters:
      - description: The name of a Kong plugin
        explode: false
        in: path
        name: plugin_name
        required: true
        schema:
          example: basic-auth
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Retrieve Plugin Schema
      tags:
      - Information
  /schemas/plugins/validate:
    post:
      description: |-
        Check validity of a plugin configuration against the plugins entity schema. This allows you to test your input before submitting a request to the entity endpoints of the Admin API.


        This only performs the schema validation checks, checking that the input configuration is well-formed. A requests to the entity endpoint using the given configuration may still fail due to other reasons, such as invalid foreign key relationships or uniqueness check failures against the contents of the data store.
      operationId: post-schemas-plugins-validate
      responses:
        "200":
          content:
            application/json:
              examples:
                schema validation successful:
                  value:
                    message: schema validation successful
              schema:
                $ref: '#/components/schemas/post_schemas_plugins_validate_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Validate plugin schema
      tags:
      - Information
  /timers:
    get:
      description: "Retrieve runtime stats data from [lua-resty-timer-ng](https://github.com/Kong/lua-resty-timer-ng)."
      operationId: get-timers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_timers_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Retrieve Runtime Debugging Info of Kong's Timers
      tags:
      - Information
  /status:
    get:
      description: |-
        Retrieve usage information about a node, with some basic information about the connections being processed by the underlying nginx process, the status of the database connection, and node's memory usage.

        If you want to monitor the Kong process, since Kong is built on top of nginx, every existing nginx monitoring tool or agent can be used.
      operationId: get-status
      responses:
        "200":
          content:
            application/json:
              examples:
                Status endpoint response:
                  value:
                    memory:
                      lua_shared_dicts:
                        kong_core_db_cache:
                          capacity: 128.00 MiB
                          allocated_slabs: 0.76 MiB
                        kong_core_db_cache_miss:
                          capacity: 12.00 MiB
                          allocated_slabs: 0.08 MiB
                        kong_db_cache:
                          capacity: 128.00 MiB
                          allocated_slabs: 0.78 MiB
                        kong_db_cache_miss:
                          capacity: 12.00 MiB
                          allocated_slabs: 0.08 MiB
                        kong_vitals_counters:
                          capacity: 50.00 MiB
                          allocated_slabs: 0.30 MiB
                        kong_vitals_lists:
                          capacity: 1.00 MiB
                          allocated_slabs: 0.02 MiB
                        kong_vitals:
                          capacity: 1.00 MiB
                          allocated_slabs: 0.02 MiB
                        kong_counters:
                          capacity: 1.00 MiB
                          allocated_slabs: 0.02 MiB
                        kong_reports_consumers:
                          capacity: 10.00 MiB
                          allocated_slabs: 0.07 MiB
                        kong_reports_routes:
                          capacity: 1.00 MiB
                          allocated_slabs: 0.02 MiB
                        kong_reports_services:
                          capacity: 1.00 MiB
                          allocated_slabs: 0.02 MiB
                        kong_profiling_state:
                          capacity: 1.50 MiB
                          allocated_slabs: 0.02 MiB
                        prometheus_metrics:
                          capacity: 5.00 MiB
                          allocated_slabs: 0.04 MiB
                        kong:
                          capacity: 5.00 MiB
                          allocated_slabs: 0.04 MiB
                        kong_locks:
                          capacity: 8.00 MiB
                          allocated_slabs: 0.06 MiB
                        kong_healthchecks:
                          capacity: 5.00 MiB
                          allocated_slabs: 0.04 MiB
                        kong_process_events:
                          capacity: 5.00 MiB
                          allocated_slabs: 0.04 MiB
                        kong_cluster_events:
                          capacity: 5.00 MiB
                          allocated_slabs: 0.04 MiB
                        kong_rate_limiting_counters:
                          capacity: 12.00 MiB
                          allocated_slabs: 0.08 MiB
                      workers_lua_vms:
                      - http_allocated_gc: 51.92 MiB
                        pid: 2323
                      - http_allocated_gc: 51.48 MiB
                        pid: 2324
                      - http_allocated_gc: 51.48 MiB
                        pid: 2325
                      - http_allocated_gc: 51.48 MiB
                        pid: 2326
                      - http_allocated_gc: 51.48 MiB
                        pid: 2327
                    database:
                      reachable: true
                    server:
                      connections_reading: 0
                      connections_writing: 6
                      total_requests: 28
                      connections_waiting: 0
                      connections_handled: 15
                      connections_active: 6
                      connections_accepted: 15
              schema:
                $ref: '#/components/schemas/get_status_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Health Routes
      tags:
      - Information
  /status/dns:
    get:
      description: |
        Retrieve DNS worker and stats information. If the legacy DNS client is in use, it returns a 501 status with a message.
      operationId: getDnsStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDnsStatus_200_response'
          description: DNS worker and stats information
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDnsStatus_501_response'
          description: Legacy DNS client in use
      summary: DNS Status
      tags:
      - Information
  /tags:
    get:
      description: |-
        Returns a paginated list of all the tags in the system.

        The list of entities will not be restricted to a single entity type: all the entities tagged with tags will be present on this list.

        If an entity is tagged with more than one tag, the entity_id for that entity will appear more than once in the resulting list. Similarly, if several entities have been tagged with the same tag, the tag will appear in several items of this list.
      operationId: get-tags
      responses:
        "200":
          content:
            application/json:
              examples:
                Tags response:
                  value:
                    data:
                    - entity_name: services
                      entity_id: c87440e1-0496-420b-b06f-dac59544bb6c
                      tag: example
                    offset: 1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
                    next: /tags/example?offset=1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
              schema:
                $ref: '#/components/schemas/get_tags_200_response'
          description: Tags response body
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List all tags
      tags:
      - Tags
  /tags/{tags}:
    get:
      description: |-
        Returns the entities that have been tagged with the specified tag.

        The list of entities will not be restricted to a single entity type: all the entities tagged with tags will be present on this list.
      operationId: get-tags-tags
      parameters:
      - description: Tags are strings associated to entities in Kong.
        explode: false
        in: path
        name: tags
        required: true
        schema:
          example: example
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Tags response:
                  value:
                    data:
                    - entity_name: services
                      entity_id: c87440e1-0496-420b-b06f-dac59544bb6c
                      tag: example
                    offset: 1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
                    next: /tags/example?offset=1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
              schema:
                $ref: '#/components/schemas/get_tags_200_response'
          description: Tags response body
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List entity by tag
      tags:
      - Tags
  /debug/cluster/control-planes-nodes/log-level/{log_level}:
    put:
      description: |
        Change the log level of all control plane nodes deployed in a hybrid (CP/DP) cluster.

        See the [NGINX docs](http://nginx.org/en/docs/ngx_core_module.html#error_log) for a list of accepted values.

        Care must be taken when changing the log level of a node to `debug` in a production environment because the disk could fill up quickly. As soon as the debug logging finishes, revert back to a higher level such as notice.

        It's currently not possible to change the log level of DP and DB-less nodes.
      operationId: put-debug-cluster-control-planes-nodes-log-level-log_level
      parameters:
      - description: Log levels are set in Kong's configuration. Log levels increase
          in order of their severity
        explode: false
        in: path
        name: log_level
        required: true
        schema:
          enum:
          - info
          - notice
          - warn
          - error
          - crit
          example: warn
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                log level changed:
                  value:
                    message: log level changed
              schema:
                $ref: '#/components/schemas/put_debug_cluster_control_planes_nodes_log_level_log_level_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Set Node Log Level of All Control Plane Nodes
      tags:
      - Debug
  /debug/cluster/log-level/{log_level}:
    put:
      description: |
        Change the log level of all nodes in a cluster.



        See the [NGINX docs](http://nginx.org/en/docs/ngx_core_module.html#error_log) for a list of accepted values.

        It's currently not possible to change the log level of DP and DB-less nodes.

        Currently, when a user dynamically changes the log level for the entire cluster, if a new node joins a cluster the new node will run at the previous log level, not at the log level that was previously set dynamically for the entire cluster.
      operationId: put-debug-cluster-log-level-log_level
      parameters:
      - description: Log levels are set in Kong's configuration. Log levels increase
          in order of their severity
        explode: false
        in: path
        name: log_level
        required: true
        schema:
          enum:
          - info
          - notice
          - warn
          - error
          - crit
          example: warn
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                log level changed:
                  value:
                    message: log level changed
              schema:
                $ref: '#/components/schemas/put_debug_cluster_log_level_log_level_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Set Node Log Level of All Nodes
      tags:
      - Debug
  /debug/node/log-level:
    get:
      description: |-
        Retrieve the current log level of a node.

        See the [NGINX documentation](http://nginx.org/en/docs/ngx_core_module.html#error_log) for the list of possible return values.
      operationId: get-debug-node-log-level
      responses:
        "200":
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    message: "log level: debug"
              schema:
                $ref: '#/components/schemas/get_debug_node_log_level_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Retrieve Node Log Level of A Node
      tags:
      - Debug
  /debug/node/log-level/{log_level}:
    put:
      description: |
        Change the log level of a node.

        See the [NGINX documentation](http://nginx.org/en/docs/ngx_core_module.html#error_log) for the list of possible return values.
      operationId: put-debug-node-log-level-log_level
      parameters:
      - description: Log levels are set in Kong's configuration. Log levels increase
          in order of their severity
        explode: false
        in: path
        name: log_level
        required: true
        schema:
          enum:
          - info
          - notice
          - warn
          - error
          - crit
          example: warn
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                log level changed:
                  value:
                    message: log level changed
              schema:
                $ref: '#/components/schemas/put_debug_node_log_level_log_level_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Set log level of a single node
      tags:
      - Debug
  /schemas/vaults/{vault_name}:
    get:
      description: Retrieve the schema of a vault.
      operationId: get-schemas-vaults-vault_name
      parameters:
      - description: The vault schema to be returned
        explode: false
        in: path
        name: vault_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "404":
          description: No vault named
      summary: Retrieve Vault Schema
      tags:
      - Information
    post:
      description: Validates the given vault schema data against predefined validation
        rules.
      operationId: post-schemas-vaults-validate
      parameters:
      - description: The vault schema to be returned
        explode: false
        in: path
        name: vault_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_schemas_vaults_validate_request'
        description: Payload containing the schema data to validate
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post_schemas_vaults_validate_200_response'
          description: Validation successful
        "400":
          description: Bad request due to invalid schema data
        "405":
          description: Method Not Allowed
      summary: Validate Vault Schema
      tags:
      - Validation
  /filter-chains:
    get:
      description: |
        List All Filter Chains
      operationId: get-filter-chains
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List Filter Chains
      tags:
      - filter-chains
    post:
      description: |
        Create Filter Chain
        Note: This API is not available in DB-less mode.
      operationId: post-filter-chains
      requestBody:
        $ref: '#/components/requestBodies/filter-chains-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: Created
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Add Filter Chain
      tags:
      - filter-chains
  /routes/{route_id_or_name}/filter-chains:
    get:
      description: |
        List Filter Chains Associated to a Specific Route
      operationId: get-routes-route_id_or_name-filter-chains
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: OK
      summary: List Filter Chains Associated to a Specific Route
      tags:
      - filter-chains
    patch:
      description: |
        Update Filter Chain Associated to a Specific Route
      operationId: patch-routes-route_id_or_name-filter-chains
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/filter-chains-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: Created
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update Filter Chain Associated to a Specific Route
      tags:
      - filter-chains
    post:
      description: |
        Create Filter Chain Associated to a Specific Route
      operationId: get-routes-route_name_or_id-filter-chains
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/filter-chains-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: Created
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Add Filter Chain
      tags:
      - filter-chains
  /services/{service_id_or_name}/filter-chains:
    get:
      description: |
        List Filter Chains Associated to a Specific Service
      operationId: get-service_id_or_name-filter-chains
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List Filter Chains Associated to a Specific Service
      tags:
      - filter-chains
    post:
      description: |
        Add filter chain Associated to a Specific Service
      operationId: get-services-service_id_or_name-filter-chains
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/filter-chains-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: Created
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create Filter Chain Associated to a Specific Service
      tags:
      - filter-chains
  /filter-chains/{filter_chain_id}:
    delete:
      description: |
        Delete filter chain.
      operationId: delete-filter-chains-filter_chain_id
      parameters:
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete Filter Chain
      tags:
      - filter-chains
    get:
      description: |
        Retrieve Filter Chain
        '401':
          $ref: '#/components/responses/HTTP401Error'
      operationId: get-filter-chains-filter_chain_id
      parameters:
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: OK
      summary: Retrieve Filter Chain
      tags:
      - filter-chains
    patch:
      description: |
        Update Filter Chain
        Note: This API is not available in DB-less mode.
      operationId: patch-filter-chains-filter_chain_id
      parameters:
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/filter-chains-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: Created
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update Filter Chain
      tags:
      - filter-chains
    put:
      description: |-
        Inserts (or replaces) the filter chain under the requested resource with the definition specified in the body. The filter chain is identified via the name or ID attribute.

        When the name or ID attribute has the structure of a UUID, the filter chain being inserted or replaced is identified by its ID. Otherwise, it is identified by its name.

        When creating a new filter chain without specifying an ID (neither in the URL nor in the body), the ID will be auto-generated.

        Notice that specifying a name in the URL and a different one in the request body is not allowed.
      operationId: put-filter-chains-filter_chain_id
      parameters:
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/filter-chains-request'
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Update Or Create Filter Chain
      tags:
      - filter-chains
  /routes/{route_id_or_name}/filter-chains/{filter_chain_id}:
    get:
      description: |
        Retrieve filter chain associated to a specific route.
      operationId: get-routes-route_id_or_name-filter-chains-filter_chain_id
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter-chains'
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: List Filter Chains Associated to a Specific Route
      tags:
      - filter-chains
    put:
      description: |
        Create or update filter chain associated to a specific route.
      operationId: put-routes-route_id_or_name-filter-chains-filter_chain_id
      parameters:
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/filter-chains-request'
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Create Or Update Filter Chain Associated to a Specific Route
      tags:
      - filter-chains
  /routes/{route_id_or_name}/{filter_chain_id}:
    delete:
      description: |
        Delete filter chain associated to a specific route.
      operationId: get-routes-route_id_or_name-filter_chain_id
      parameters:
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier or the name of the route to retrieve.
        explode: false
        in: path
        name: route_id_or_name
        required: true
        schema:
          example: my-route
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete Filter Chain Associated to a Specific Route
      tags:
      - filter-chains
  /services/{service_id_or_name}/filter-chains/{filter_chain_id}:
    delete:
      description: |
        Delete filter chain associated to a specific service.
      operationId: delete-services-service_id_or_name-filter-chains-filter_chain_id
      parameters:
      - description: ID **or** name of the service to lookup
        example: test-service
        explode: false
        in: path
        name: service_id_or_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the filter chain to retrieve.
        explode: false
        in: path
        name: filter_chain_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "401":
          content:
            application/json:
              examples:
                DuplicateApiKey:
                  summary: Duplicate API key found
                  value:
                    message: Duplicate API key found
                    status: 401
                InvalidAuthCred:
                  summary: Invalid authentication credentials
                  value:
                    message: Unauthorized
                    status: 401
                NoAPIKey:
                  summary: No API key found
                  value:
                    message: No API key found in request
                    status: 401
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
      summary: Delete Filter Chain Associated to a Specific Service
      tags:
      - filter-chains
  /clustering/data-planes:
    get:
      description: |
        Retrieve a list of all data planes connected to the control plane. This endpoint is only accessible when Kong Gateway is running in hybrid mode.
      operationId: getDataPlanes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDataPlanes_200_response'
          description: A list of connected data planes.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDataPlanes_400_response'
          description: Kong is not running as a control plane.
      summary: Retrieve connected data planes
      tags:
      - clustering
  /clustering/status:
    get:
      description: |
        Retrieve a status report for all data planes connected to the control plane. It includes information like the config hash, hostname, IP address, and last seen timestamp. This endpoint is only accessible when Kong Gateway is running in hybrid mode.
      operationId: getDataPlaneStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/getDataPlaneStatus_200_response_value'
                type: object
          description: The status of all connected data planes.
          headers:
            Deprecation:
              description: |
                Indicates that the endpoint may be deprecated in the future.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDataPlanes_400_response'
          description: Kong is not running as a control plane.
      summary: Retrieve the status of connected data planes
      tags:
      - clustering
  /cache/{key}:
    delete:
      description: |
        Invalidate the cache for a specific key in both `kong.cache` and `kong.core_cache`.
      operationId: deleteCacheByKey
      parameters:
      - description: The cache key to invalidate.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Cache invalidated successfully.
      summary: Invalidate cache by key
      tags:
      - cache
    get:
      description: |
        Retrieve the cached value for a specific key. This endpoint probes both `kong.cache` and `kong.core_cache`.  If the key exists, it returns the associated value and TTL. If not found, it returns a 404.
      operationId: getCacheByKey
      parameters:
      - description: The cache key to retrieve.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCacheByKey_200_response'
          description: Cached value found.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCacheByKey_404_response'
          description: Cache key not found.
      summary: Get cache value by key
      tags:
      - cache
  /cache:
    delete:
      description: |
        Purge all cache entries in both `kong.cache` and `kong.core_cache`.
      operationId: purgeAllCache
      responses:
        "204":
          description: All cache entries purged successfully.
      summary: Purge all cache entries
      tags:
      - cache
components:
  parameters:
    pagination-offset:
      description: Offset from which to return the next set of resources. Use the
        value of the 'offset' field from the response of a list operation as input
        here to paginate through all the resources
      explode: true
      in: query
      name: offset
      required: false
      schema:
        type: string
      style: form
    pagination-size:
      description: Number of resources to be returned.
      explode: true
      in: query
      name: size
      required: false
      schema:
        default: 100
        maximum: 1000
        minimum: 1
        type: integer
      style: form
    pagination-tags-filter:
      description: "A list of tags to filter the list of resources on. Multiple tags\
        \ can be concatenated using ','' to mean AND or using ''/'' to mean OR.'"
      example: "tag1,tag2"
      explode: true
      in: query
      name: tags
      required: false
      schema:
        type: string
      style: form
    service_id_or_name:
      description: ID **or** name of the service to lookup
      example: test-service
      explode: false
      in: path
      name: service_id_or_name
      required: true
      schema:
        type: string
      style: simple
    ca_certificate_id:
      description: ID of the related certificate
      explode: false
      in: path
      name: ca_certificate_id
      required: true
      schema:
        example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
        type: string
      style: simple
    certificate_id:
      description: The unique identifier of the Certificate to retrieve.
      explode: false
      in: path
      name: certificate_id
      required: true
      schema:
        example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
        type: string
      style: simple
    certificate_name_or_id:
      description: "The unique identifier or the `name` attribute of the Certificate\
        \ whose SNIs are to be retrieved. When using this endpoint, only SNIs associated\
        \ to the specified Certificate will be listed."
      explode: false
      in: path
      name: certificate_name_or_id
      required: true
      schema:
        enum:
        - a3ad71a8-6685-4b03-a101-980a953544f6
        - name
        example: name
        type: string
      style: simple
    sni_name_or_id:
      description: The unique identifier or the name of the SNI to retrieve.
      explode: false
      in: path
      name: sni_name_or_id
      required: true
      schema:
        example: my-sni
        type: string
      style: simple
    consumer_username_or_id:
      description: The unique identifier or the username of the Consumer to retrieve.
      explode: false
      in: path
      name: consumer_username_or_id
      required: true
      schema:
        example: my-username
        type: string
      style: simple
    filter_chain_name_or_id:
      description: The unique identifier or name of the Filter Chain to create or
        update.
      explode: false
      in: path
      name: filter_chain_name_or_id
      required: true
      schema:
        example: my-filter-chain
        type: string
      style: simple
    plugin_id:
      description: The unique identifier of the Plugin to create or update.
      explode: false
      in: path
      name: plugin_id
      required: true
      schema:
        example: response-ratelimiting
        type: string
      style: simple
    key-set_id_or_name:
      description: The unique identifier or the `name` attribute of the Key Set that
        should be associated to the newly-created Key.
      explode: false
      in: path
      name: key-set_id_or_name
      required: true
      schema:
        example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
        type: string
      style: simple
    key_id_or_name:
      description: The unique identifier or the name of the Key to retrieve.
      explode: false
      in: path
      name: key_id_or_name
      required: true
      schema:
        example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725
        type: string
      style: simple
    route_id_or_name:
      description: The unique identifier or the name of the route to retrieve.
      explode: false
      in: path
      name: route_id_or_name
      required: true
      schema:
        example: my-route
        type: string
      style: simple
    upstream_id_or_name:
      description: The unique identifier or the name of the Upstream associated to
        the Certificate to be retrieved.
      explode: false
      in: path
      name: upstream_id_or_name
      required: true
      schema:
        example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
        type: string
      style: simple
    target_id_or_target:
      description: "The host/port combination element of the target to set as unhealthy,\
        \ or the `id` of an existing target entry."
      explode: false
      in: path
      name: target_id_or_target
      required: true
      schema:
        example: example.com:8000
        type: string
      style: simple
    vault_id_or_prefix:
      description: The unique identifier or the prefix of the Vault to retrieve.
      explode: false
      in: path
      name: vault_id_or_prefix
      required: true
      schema:
        example: env
        type: string
      style: simple
    tag:
      description: Tags are strings associated to entities in Kong.
      explode: false
      in: path
      name: tags
      required: true
      schema:
        example: example
        type: string
      style: simple
    log_level:
      description: Log levels are set in Kong's configuration. Log levels increase
        in order of their severity
      explode: false
      in: path
      name: log_level
      required: true
      schema:
        enum:
        - info
        - notice
        - warn
        - error
        - crit
        example: warn
        type: string
      style: simple
    filter_chain_id:
      description: The unique identifier of the filter chain to retrieve.
      explode: false
      in: path
      name: filter_chain_id
      required: true
      schema:
        type: string
      style: simple
  requestBodies:
    CA-cert-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_ca_certificate_request'
      description: This request body represents a new Certificate Authority (CA) certificate
        and includes the properties required to create a new certificate.
    cert-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_certificate_request'
    create-sni:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_sni_for_certificate_request'
      description: "A JSON object containing the details of the new SNI, including\
        \ the name, certificate, and tags."
    consumer-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_consumer_request'
      description: Consumer request body
    filter-chains-request:
      content:
        application/json:
          examples:
            request example:
              value:
                id: ce44eef5-41ed-47f6-baab-f725cecf98c7
                name: my-filter-chain
                enabled: true
                route: null
                service: 20487393-41ed-47f6-93a8-3407cade2002
                filters:
                - name: go-rate-limiting
                  enabled: true
                  config: "{ \"minute\": 30 }"
                - name: rust-response-transformer
                  enabled: true
                  config: "{ \"remove_header\": \"X-Example\" }"
                tags:
                - my-tag
          schema:
            $ref: '#/components/schemas/post_filter_chains_request'
      description: Filter Chain request body
    plugin-request:
      content:
        application/json:
          examples:
            request example:
              value:
                name: rate-limiting
                route: string
                service: string
                consumer: string
                instance_name: rate-limiting-foo
                config:
                  hour: 500
                  minute: 500
                protocols:
                - http
                enabled: true
                tags:
                - string
          schema:
            $ref: '#/components/schemas/create_plugin_for_consumer_request'
      description: Plugin request body
    key-set-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_key_set_request'
    keys-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_key_request'
    route-request:
      content:
        application/json:
          examples:
            Create a route:
              value:
                name: my-route
                protocols:
                - http
                - https
                methods:
                - GET
                - POST
                hosts:
                - example.com
                - foo.test
                paths:
                - /foo
                - /bar
                headers:
                  x-my-header:
                  - foo
                  - bar
                  x-another-header:
                  - bla
                https_redirect_status_code: 426
                regex_priority: 0
                strip_path: true
                path_handling: v0
                preserve_host: false
                request_buffering: true
                response_buffering: true
                tags:
                - user-level
                - low-priority
                service:
                  id: af8330d3-dbdc-48bd-b1be-55b98608834b
          schema:
            $ref: '#/components/schemas/create_route_request'
      description: Route request body
    service-request:
      content:
        application/json:
          examples:
            Example:
              value:
                name: my-service
                retries: 5
                protocol: http
                host: example.com
                port: 80
                path: /some_api
                connect_timeout: 6000
                write_timeout: 6000
                read_timeout: 6000
                tags:
                - user-level
                client_certificate:
                  id: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
                tls_verify: true
                tls_verify_depth: null
                ca_certificates:
                - 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
                enabled: true
          schema:
            $ref: '#/components/schemas/create_service_request'
    upstream-request:
      content:
        application/json:
          examples:
            Upstream:
              value:
                name: my-upstream
                algorithm: round-robin
                hash_on: none
                hash_fallback: none
                hash_on_cookie_path: /
                slots: 10000
                healthchecks:
                  passive:
                    type: http
                    healthy:
                      http_statuses:
                      - 200
                      - 201
                      - 202
                      - 203
                      - 204
                      - 205
                      - 206
                      - 207
                      - 208
                      - 226
                      - 300
                      - 301
                      - 302
                      - 303
                      - 304
                      - 305
                      - 306
                      - 307
                      - 308
                      successes: 0
                    unhealthy:
                      http_statuses:
                      - 429
                      - 500
                      - 503
                      timeouts: 0
                      http_failures: 0
                      tcp_failures: 0
                  active:
                    https_verify_certificate: true
                    healthy:
                      http_statuses:
                      - 200
                      - 302
                      successes: 0
                      interval: 0
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                      - 429
                      - 404
                      - 500
                      - 501
                      - 502
                      - 503
                      - 504
                      - 505
                      timeouts: 0
                      tcp_failures: 0
                      interval: 0
                    type: http
                    concurrency: 10
                    headers:
                      type: object
                      properties:
                        x-my-header:
                          type: array
                          items:
                            type: string
                          description: The value(s) of the x-my-header header.
                        x-another-header:
                          type: array
                          items:
                            type: string
                          description: The value(s) of the x-another-header header.
                    timeout: 1
                    http_path: /
                    https_sni: example.com
                  threshold: 0
                tags:
                - user-level
                - low-priority
                host_header: example.com
                client_certificate:
                  id: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
                use_srv_name: false
            Example request:
              value:
                name: my-upstream
                tags:
                - user-level
                - low-priority
                algorithm: round-robin
          schema:
            $ref: '#/components/schemas/create_upstream_request'
    target-request:
      content:
        application/json:
          examples:
            Example:
              value:
                target: example.com:8000
                weight: 100
                tags:
                - string
          schema:
            $ref: '#/components/schemas/create_target_for_upstream_request'
    vault-request:
      content:
        application/json:
          examples:
            Example 1:
              value:
                prefix: env
                name: env
                description: This vault is used to retrieve redis database access
                  credentials
                config:
                  prefix: SSL_
                tags:
                - database-credentials
                - data-plane
          schema:
            $ref: '#/components/schemas/create_vault_request'
  responses:
    HTTP401Error:
      content:
        application/json:
          examples:
            DuplicateApiKey:
              summary: Duplicate API key found
              value:
                message: Duplicate API key found
                status: 401
            InvalidAuthCred:
              summary: Invalid authentication credentials
              value:
                message: Unauthorized
                status: 401
            NoAPIKey:
              summary: No API key found
              value:
                message: No API key found in request
                status: 401
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
      description: Unauthorized
    get-endpoints:
      content:
        application/json:
          examples:
            Get all endpoints:
              value:
                data:
                - /
                - /acls
                - "/acls/{acls}"
                - "/acls/{acls}/consumer"
                - /acme
                - /acme/certificates
                - "/acme/certificates/{certificates}"
                - /acme_storage
                - "/acme_storage/{acme_storage}"
                - /applications
                - "/applications/{applications}"
                - "/applications/{applications}/application_instances"
                - "/applications/{applications}/application_instances/{application_instances}"
                - "/applications/{applications}/consumer"
                - "/applications/{applications}/credentials/{plugin}"
                - "/applications/{applications}/credentials/{plugin}/{credential_id}"
                - "/applications/{applications}/developer"
                - /auth
                - /basic-auths
                - "/basic-auths/{basicauth_credentials}"
                - "/basic-auths/{basicauth_credentials}/consumer"
                - /ca_certificates
                - "/ca_certificates/{ca_certificates}"
                - "/ca_certificates/{ca_certificates}/mtls_auth_credentials"
                - "/ca_certificates/{ca_certificates}/mtls_auth_credentials/{mtls_auth_credentials}"
                - /cache
                - "/cache/{key}"
                - /certificates
                - "/certificates/{certificates}"
                - "/certificates/{certificates}/services"
                - "/certificates/{certificates}/services/{services}"
                - "/certificates/{certificates}/snis"
                - "/certificates/{certificates}/snis/{snis}"
                - "/certificates/{certificates}/upstreams"
                - "/certificates/{certificates}/upstreams/{upstreams}"
                - /clustering/data-planes
                - /clustering/status
                - /config
                - /consumers
                - "/consumers/{consumers}"
                - "/consumers/{consumers}/acls"
                - "/consumers/{consumers}/acls/{acls}"
                - "/consumers/{consumers}/admins"
                - "/consumers/{consumers}/admins/{admins}"
                - "/consumers/{consumers}/applications"
                - "/consumers/{consumers}/applications/{applications}"
                - "/consumers/{consumers}/basic-auth"
                - "/consumers/{consumers}/basic-auth/{basicauth_credentials}"
                - "/consumers/{consumers}/developers"
                - "/consumers/{consumers}/developers/{developers}"
                - "/consumers/{consumers}/hmac-auth"
                - "/consumers/{consumers}/hmac-auth/{hmacauth_credentials}"
                - "/consumers/{consumers}/jwt"
                - "/consumers/{consumers}/jwt/{jwt_secrets}"
                - "/consumers/{consumers}/key-auth"
                - "/consumers/{consumers}/key-auth/{keyauth_credentials}"
                - "/consumers/{consumers}/key-auth-enc"
                - "/consumers/{consumers}/key-auth-enc/{keyauth_enc_credentials}"
                - "/consumers/{consumers}/login_attempts"
                - "/consumers/{consumers}/login_attempts/{login_attempts}"
                - "/consumers/{consumers}/mtls-auth"
                - "/consumers/{consumers}/mtls-auth/{mtls_auth_credentials}"
                - "/consumers/{consumers}/mtls_auth_credentials"
                - "/consumers/{consumers}/mtls_auth_credentials/{mtls_auth_credentials}"
                - "/consumers/{consumers}/oauth2"
                - "/consumers/{consumers}/oauth2/{oauth2_credentials}"
                - "/consumers/{consumers}/plugins"
                - "/consumers/{consumers}/plugins/{plugins}"
                - "/debug/cluster/log-level/{log_level}"
                - /debug/node/log-level
                - "/debug/node/log-level/{log_level}"
                - /debug/profiling/cpu
                - /debug/profiling/gc-snapshot
                - /debug/profiling/memory
                - /degraphql_routes
                - "/degraphql_routes/{degraphql_routes}"
                - "/degraphql_routes/{degraphql_routes}/service"
                - /endpoints
                - /entities/migrate
                - /event-hooks
                - /event-hooks/sources
                - "/event-hooks/sources/{source}"
                - "/event-hooks/sources/{source}/{event}"
                - "/event-hooks/{event_hooks}"
                - "/event-hooks/{event_hooks}/ping"
                - "/event-hooks/{event_hooks}/test"
                - /files
                - /files/*
                - /files/partials/*
                - "/files/{files}"
                - /filter-chains
                - "/filter-chains/{filter_chains}"
                - "/filter-chains/{filter_chains}/route"
                - "/filter-chains/{filter_chains}/service"
                - /graphql-proxy-cache-advanced
                - "/graphql-proxy-cache-advanced/{cache_key}"
                - "/graphql-proxy-cache-advanced/{plugin_id}/caches/{cache_key}"
                - /graphql-rate-limiting-advanced/costs
                - "/graphql-rate-limiting-advanced/costs/{graphql_ratelimiting_advanced_cost_decoration}"
                - /graphql_ratelimiting_advanced_cost_decoration
                - "/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}"
                - "/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}/service"
                - /groups
                - "/groups/{groups}"
                - "/groups/{groups}/roles"
                - /hmac-auths
                - "/hmac-auths/{hmacauth_credentials}"
                - "/hmac-auths/{hmacauth_credentials}/consumer"
                - /jwt-signer/jwks
                - "/jwt-signer/jwks/{jwt_signer_jwks}"
                - "/jwt-signer/jwks/{jwt_signer_jwks}/rotate"
                - /jwts
                - "/jwts/{jwt_secrets}"
                - "/jwts/{jwt_secrets}/consumer"
                - /key-auths
                - "/key-auths/{keyauth_credentials}"
                - "/key-auths/{keyauth_credentials}/consumer"
                - /key-auths-enc
                - "/key-auths-enc/{keyauth_enc_credentials}"
                - "/key-auths-enc/{keyauth_enc_credentials}/consumer"
                - /key-sets
                - "/key-sets/{key_sets}"
                - "/key-sets/{key_sets}/keys"
                - "/key-sets/{key_sets}/keys/{keys}"
                - /keys
                - "/keys/{keys}"
                - "/keys/{keys}/set"
                - /konnect_applications
                - "/konnect_applications/{konnect_applications}"
                - /license/report
                - /licenses
                - "/licenses/{licenses}"
                - /login_attempts
                - "/login_attempts/{login_attempts}"
                - "/login_attempts/{login_attempts}/consumer"
                - /metrics
                - /mtls-auths
                - "/mtls-auths/{mtls_auth_credentials}/consumer"
                - /mtls_auth_credentials
                - "/mtls_auth_credentials/{mtls_auth_credentials}"
                - "/mtls_auth_credentials/{mtls_auth_credentials}/ca_certificate"
                - "/mtls_auth_credentials/{mtls_auth_credentials}/consumer"
                - /oauth2
                - "/oauth2/{oauth2_credentials}"
                - "/oauth2/{oauth2_credentials}/consumer"
                - "/oauth2/{oauth2_credentials}/oauth2_tokens"
                - "/oauth2/{oauth2_credentials}/oauth2_tokens/{oauth2_tokens}"
                - /oauth2_tokens
                - "/oauth2_tokens/{oauth2_tokens}"
                - "/oauth2_tokens/{oauth2_tokens}/credential"
                - "/oauth2_tokens/{oauth2_tokens}/service"
                - /openid-connect/issuers
                - "/openid-connect/issuers/{oic_issuers}"
                - /openid-connect/jwks
                - /plugins
                - /plugins/enabled
                - "/plugins/schema/{name}"
                - "/plugins/{plugins}"
                - "/plugins/{plugins}/consumer"
                - "/plugins/{plugins}/route"
                - "/plugins/{plugins}/service"
                - /proxy-cache
                - "/proxy-cache/{cache_key}"
                - "/proxy-cache/{plugin_id}/caches/{cache_key}"
                - /proxy-cache-advanced
                - "/proxy-cache-advanced/{cache_key}"
                - "/proxy-cache-advanced/{plugin_id}/caches/{cache_key}"
                - /routes
                - "/routes/{routes}"
                - "/routes/{routes}/filter-chains"
                - "/routes/{routes}/filter-chains/{filter_chains}"
                - "/routes/{routes}/filters/all"
                - "/routes/{routes}/filters/disabled"
                - "/routes/{routes}/filters/enabled"
                - "/routes/{routes}/plugins"
                - "/routes/{routes}/plugins/{plugins}"
                - "/routes/{routes}/service"
                - /schemas/plugins/validate
                - "/schemas/plugins/{name}"
                - "/schemas/{db_entity_name}/validate"
                - "/schemas/{name}"
                - /services
                - "/services/{services}"
                - "/services/{services}/application_instances"
                - "/services/{services}/application_instances/{application_instances}"
                - "/services/{services}/applications"
                - "/services/{services}/client_certificate"
                - "/services/{services}/degraphql/routes"
                - "/services/{services}/degraphql/routes/{degraphql_routes}"
                - "/services/{services}/degraphql_routes"
                - "/services/{services}/degraphql_routes/{degraphql_routes}"
                - "/services/{services}/filter-chains"
                - "/services/{services}/filter-chains/{filter_chains}"
                - "/services/{services}/graphql-rate-limiting-advanced/costs"
                - "/services/{services}/graphql_ratelimiting_advanced_cost_decoration"
                - "/services/{services}/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}"
                - "/services/{services}/oauth2_tokens"
                - "/services/{services}/oauth2_tokens/{oauth2_tokens}"
                - "/services/{services}/plugins"
                - "/services/{services}/plugins/{plugins}"
                - "/services/{services}/routes"
                - "/services/{services}/routes/{routes}"
                - /sessions
                - "/sessions/{sessions}"
                - /snis
                - "/snis/{snis}"
                - "/snis/{snis}/certificate"
                - /status
                - /tags
                - "/tags/{tags}"
                - /targets
                - "/targets/{targets}"
                - "/targets/{targets}/upstream"
                - /timers
                - /upstreams
                - "/upstreams/{upstreams}"
                - "/upstreams/{upstreams}/client_certificate"
                - "/upstreams/{upstreams}/health"
                - "/upstreams/{upstreams}/targets"
                - "/upstreams/{upstreams}/targets/all"
                - "/upstreams/{upstreams}/targets/{targets}"
                - "/upstreams/{upstreams}/targets/{targets}/healthy"
                - "/upstreams/{upstreams}/targets/{targets}/unhealthy"
                - "/upstreams/{upstreams}/targets/{targets}/{address}/healthy"
                - "/upstreams/{upstreams}/targets/{targets}/{address}/unhealthy"
                - /userinfo
                - /vault-auth
                - "/vault-auth/{vault_auth_vaults}"
                - "/vault-auth/{vault}/credentials"
                - "/vault-auth/{vault}/credentials/token/{access_token}"
                - "/vault-auth/{vault}/credentials/{consumer}"
                - /vaults
                - "/vaults/{vaults}"
                - /vitals/
                - /vitals/cluster
                - /vitals/cluster/status_codes
                - "/vitals/consumers/{consumer_id}/cluster"
                - /vitals/nodes/
                - "/vitals/nodes/{node_id}"
                - "/vitals/reports/{entity_type}"
                - /vitals/status_code_classes
                - /vitals/status_codes/by_consumer
                - /vitals/status_codes/by_consumer_and_route
                - /vitals/status_codes/by_route
                - /vitals/status_codes/by_service
          schema:
            $ref: '#/components/schemas/get_endpoints_200_response'
      description: Example response
    sni-response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_sni_with_certificate_200_response'
      description: SNI response object
    consumer-response-data:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/upsert_consumer_200_response'
      description: The consumer object response body
    consumer-create-response:
      content:
        application/json:
          schema:
            properties:
              id:
                description: The unique id of the consumer.
                example: c1a1f6f-2aa4-4e58-93ff-b56368f19b27
                type: string
              created_at:
                description: |
                  Unix epoch when the resource was created.
                type: integer
              username:
                description: The unique username of the consumer.
                type: string
              custom_id:
                description: Field for the unique consumer ID
                type: string
              tags:
                description: An optional set of strings associated with the Consumer
                  for grouping and filtering.
                items:
                  type: string
                type: array
            type: object
            x-examples:
              Example 1:
                id: ec1a1f6f-2aa4-4e58-93ff-b56368f19b27
                created_at: 1422386534
                username: my-username
                custom_id: my-custom-id
                tags:
                - user-level
                - low-priority
      description: New consumer created response
    plugin-response:
      content:
        application/json:
          examples:
            Plugin response:
              value:
                data:
                - id: 02621eee-8309-4bf6-b36b-a82017a5393e
                  name: rate-limiting
                  created_at: 1422386534
                  route: null
                  service: null
                  consumer: null
                  config:
                    hour: 500
                    minute: 20
                  protocols:
                  - http
                  - https
                  enabled: true
                  tags:
                  - user-level
                  - low-priority
                - id: 66c7b5c4-4aaf-4119-af1e-ee3ad75d0af4
                  name: rate-limiting
                  created_at: 1422386534
                  route: null
                  service: null
                  consumer: null
                  config:
                    hour: 500
                    minute: 20
                  protocols:
                  - tcp
                  - tls
                  enabled: true
                  tags:
                  - admin
                  - high-priority
                  - critical
                next: http://localhost:8001/plugins?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
          schema:
            $ref: '#/components/schemas/list_plugins_for_consumer_200_response'
          x-examples:
            Example 1:
              id: ce44eef5-41ed-47f6-baab-f725cecf98c7
              name: rate-limiting
              created_at: 1422386534
              instance_name: rate-limiting-foo
              config:
                hour: 500
                minute: 20
              protocols:
              - http
              - https
              enabled: true
              tags:
              - user-level
              - low-priority
      description: Example response
    key-set-response:
      content:
        application/json:
          examples:
            example:
              value:
                id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                name: my-key_set
                created_at: 1422386534
                updated_at: 1422386534
                tags:
                - string
                next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
          schema:
            $ref: '#/components/schemas/list_key_set_200_response'
      description: Key set object response body
    tags-response:
      content:
        application/json:
          examples:
            Tags response:
              value:
                data:
                - entity_name: services
                  entity_id: c87440e1-0496-420b-b06f-dac59544bb6c
                  tag: example
                offset: 1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
                next: /tags/example?offset=1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
          schema:
            $ref: '#/components/schemas/get_tags_200_response'
      description: Tags response body
  schemas:
    UnauthorizedError:
      example:
        message: message
        status: 6
      properties:
        status:
          type: integer
        message:
          type: string
      required:
      - message
      - status
      type: object
    CA-Certificate:
      description: A CA certificate object represents a trusted CA. These objects
        are used by Kong to verify the validity of a client or server certificate.
        CA Certificates can be both tagged and filtered by tags.
      example:
        cert: |-
          -----BEGIN CERTIFICATE-----
          certificate-content
          -----END CERTIFICATE-----
        id: b2f34145-0343-41a4-9602-4c69dec2f260
      properties:
        cert:
          description: PEM-encoded public certificate of the CA.
          example: '"-----BEGIN CERTIFICATE-----..."'
          type: string
        cert_digest:
          description: SHA256 hex digest of the public certificate.
          example: c641e28d77e93544f2fa87b2cf3f3d51...
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        id:
          example: 04fbeacf-a9f1-4a5d-ae4a-b0407445db3f
          format: uuid
          type: string
        tags:
          description: An optional set of strings associated with the Certificate
            for grouping and filtering.
          items:
            example: "[\"user-level\", \"low-priority\"]"
            type: string
          type: array
      title: CA-Certificate
      type: object
      x-examples:
        "200 - list of multiple certificates":
          data:
          - id: 43429efd-b3a5-4048-94cb-5cc4029909bb
            created_at: 1422386534
            cert: '-----BEGIN CERTIFICATE-----...'
            cert_digest: c641e28d77e93544f2fa87b2cf3f3d51...
            tags:
            - user-level
            - low-priority
          - id: d26761d5-83a4-4f24-ac6c-cff276f2b79c
            created_at: 1422386534
            cert: '-----BEGIN CERTIFICATE-----...'
            cert_digest: c641e28d77e93544f2fa87b2cf3f3d51...
            tags:
            - admin
            - high-priority
            - critical
          next: http://localhost:8001/ca_certificates?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    Certificate:
      description: "A certificate object represents a public certificate. These fields\
        \ are _referenceable_, and can be stored as [secrets](http://docs.konqhq.com/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)\
        \ in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format)."
      example:
        cert: |-
          -----BEGIN CERTIFICATE-----
          certificate-content
          -----END CERTIFICATE-----
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        key: |-
          -----BEGIN PRIVATE KEY-----
          private-key-content
          -----END PRIVATE KEY-----
      properties:
        cert:
          description: "PEM-encoded public certificate chain of the SSL key This field\
            \ is referenceable and can be stored in a vault. References must follow\
            \ a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format)."
          example: '"-----BEGIN CERTIFICATE-----\ncertificate-content\n-----END CERTIFICATE-----"'
          type: string
        cert_alt:
          description: PEM-encoded public certificate chain of the alternate SSL key
            pair. This should only be set if you have both RSA and ECDSA types of
            certificate available and would like Kong to prefer serving using ECDSA
            certs.
          example: '"-----BEGIN CERTIFICATE-----..."'
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        id:
          description: The UUID representation of the certificate object.
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          format: uuid
          type: string
        key:
          description: "PEM-encoded private key of the SSL key pair. This field is\
            \ _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)\
            \ in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format)."
          example: ' "-----BEGIN RSA PRIVATE KEY-----..."'
          type: string
        key_alt:
          description: "PEM-encoded private key of the alternate SSL key pair. This\
            \ should only be set if you have both RSA and ECDSA types of certificate\
            \ available and would like Kong to prefer serving using ECDSA certs when\
            \ client advertises support for it. This field is _referenceable_, which\
            \ means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)\
            \ in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format)."
          example: '"-----BEGIN EC PRIVATE KEY-----..."'
          type: string
        tags:
          description: An optional set of strings associated with the Certificate
            for grouping and filtering.
          items:
            example: "[\"user-level\", \"low-priority\"]"
            type: string
          type: array
        snis:
          description: |
            A list of SNIs associated with the certificate.
          items:
            format: host
            type: string
          type: array
      title: Certificate
      type: object
    Consumer:
      description: "The Consumer object represents a consumer - or a user - of a service.\
        \ You can either rely on Kong as the primary datastore, or you can map the\
        \ consumer list with your database to keep consistency between Kong and your\
        \ existing primary datastore."
      example:
        custom_id: "4200"
        id: 8a388226-80e8-4027-a486-25e4f7db5d21
        tags:
        - silver-tier
        username: bob-the-builder
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        custom_id:
          description: Field for storing an existing unique ID for the Consumer -
            useful for mapping Kong with users in your existing database. You must
            send either this field or `username` with the request.
          type: string
        id:
          type: string
        tags:
          description: An optional set of strings associated with the Consumer for
            grouping and filtering.
          items:
            type: string
          type: array
        username:
          description: The unique username of the Consumer. You must send either this
            field or `custom_id` with the request.
          type: string
      title: Consumer
      type: object
    Filter-chain:
      description: A Filter Chain entity represents a list of one or more WebAssembly
        filters that will be executed during the HTTP request/response lifecycle.
      example:
        id: ce44eef5-41ed-47f6-baab-f725cecf98c7
        name: my-filter-chain
        created_at: 1422386534
        updated_at: 1422386534
        enabled: true
        route: null
        service: 20487393-41ed-47f6-93a8-3407cade2002
        filters:
        - name: go-rate-limiting
          enabled: true
          config: "{ \"minute\": 30 }"
        - name: rust-response-transformer
          enabled: true
          config: "{ \"remove_header\": \"X-Example\" }"
        tags:
        - my-tag
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        enabled:
          description: Whether the filter chain is applied.
          type: boolean
        filters:
          description: An array of filter definitions that will be executed in order.
          items:
            $ref: '#/components/schemas/Filter_chain_filters_inner'
          type: array
        id:
          type: string
        name:
          description: The name of the filter chain.
          type: string
        route:
          $ref: '#/components/schemas/post_filter_chains_request_route'
        service:
          $ref: '#/components/schemas/post_filter_chains_request_service'
        tags:
          description: An optional set of strings associated with the Filter Chain
            for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
      title: Filter Chain
      type: object
    Key:
      description: "A Key object holds a representation of asymmetric keys in various\
        \ formats. When Kong or a Kong plugin requires a specific public or private\
        \ key to perform certain operations, it can use this entity."
      example:
        id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
        jwk: "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}"
        kid: "42"
        name: a-key
        pem:
          private_key: '-----BEGIN'
          public_key: '-----BEGIN'
        set:
          id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        id:
          description: The unique identifier or the prefix of the Vault to delete.
          example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
          type: string
        jwk:
          description: A JSON Web Key represented as a string.
          example: "{\\\"alg\\\":\\\"RSA\\\",  \\\"kid\\\": \\\"42\\\",  ...}"
          type: string
        kid:
          description: A unique identifier for a key.
          example: '"42"'
          type: string
        name:
          description: The name to associate with the given keys.
          example: a-key
          type: string
        pem:
          $ref: '#/components/schemas/Key_pem'
        set:
          $ref: '#/components/schemas/Key_set'
        tags:
          description: An optional set of strings associated with the Key for grouping
            and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          example: 1422386534
          type: integer
      title: Key
      type: object
    Key-set:
      description: A Key Set object holds a collection of asymmetric key objects.
        This entity allows to logically group keys by their purpose.
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        id:
          description: The unique identifier or the name of the Key to delete.
          example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
          type: string
        name:
          description: The name to associate with the given key-set.
          example: '"example-key-set"'
          type: string
        tags:
          description: An optional set of strings associated with the Key for grouping
            and filtering
          items:
            example: "[\"google-keys\", \"mozilla-keys\"]"
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
      title: Key-set
      type: object
      x-examples:
        Example 1:
          id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
          name: example-key-set
          tags:
          - idp-keys
    Plugin:
      description: A Plugin entity represents a plugin configuration that will be
        executed during the HTTP request/response lifecycle.
      example:
        config:
          anonymous: null
          hide_credentials: false
          key_in_body: false
          key_in_header: true
          key_in_query: true
          key_names:
          - apikey
          run_on_preflight: true
        enabled: true
        id: 3fd1eea1-885a-4011-b986-289943ff8177
        name: key-auth
        protocols:
        - grpc
        - grpcs
        - http
        - https
      properties:
        config:
          description: "The configuration properties for the Plugin which can be found\
            \ on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/)."
          type: object
        consumer:
          $ref: '#/components/schemas/Plugin_consumer'
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        enabled:
          default: true
          description: Whether the plugin is applied.
          type: boolean
        id:
          type: string
        instance_name:
          type: string
        name:
          description: "The name of the Plugin thats going to be added. Currently,\
            \ the Plugin must be installed in every Kong instance separately."
          type: string
        protocols:
          default:
          - grpc
          - grpcs
          - http
          - https
          description: "A list of the request protocols that will trigger this plugin.\
            \ The default value, as well as the possible values allowed on this field,\
            \ may change depending on the plugin type. For example, plugins that only\
            \ work in stream mode will only support `\"tcp\"` and `\"tls\"`."
          items:
            type: string
          type: array
        route:
          $ref: '#/components/schemas/Plugin_route'
        service:
          $ref: '#/components/schemas/Plugin_service'
        tags:
          description: An optional set of strings associated with the Plugin for grouping
            and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
      title: Plugin
      type: object
    Route:
      description: Route entities define rules to match client requests. Every request
        matching a given route will be proxied to its associated service.
      example:
        hosts:
        - foo.example.com
        - bar.example.com
        id: 56c4566c-14cc-4132-9011-4139fcbbe50a
        name: example-route
        paths:
        - /v1
        - /v2
        service:
          id: bd380f99-659d-415e-b0e7-72ea05df3218
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        destinations:
          description: A list of IP destinations of incoming connections that match
            this route when using stream routing. Each entry is an object with fields
            "ip" (optionally in CIDR range notation) and/or "port".
          items:
            type: object
          type: array
        headers:
          description: "One or more lists of values indexed by header name that will\
            \ cause this route to match if present in the request. The `Host` header\
            \ cannot be used with this hosts should be specified using the `hosts`\
            \ attribute. When `headers` contains only one value and that value starts\
            \ with the special prefix `~*`, the value is interpreted as a regular\
            \ expression."
          type: object
        hosts:
          description: A list of domain names that match this route. Note that the
            hosts value is case sensitive.
          items:
            example: '"foo.example.com"'
            type: string
          type: array
        https_redirect_status_code:
          default: 426
          description: "The status code Kong responds with when all properties of\
            \ a route match except the protocol i.e. if the protocol of the request\
            \ is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong\
            \ if the field is set to 301, 302, 307 or 308. This config applies only\
            \ if the route is configured to only accept the `https` protocol."
          type: integer
        id:
          example: 56c4566c-14cc-4132-9011-4139fcbbe50a
          type: string
        methods:
          description: A list of HTTP methods that match this route.
          items:
            type: string
          type: array
        name:
          description: "The name of the route. Route names must be unique, and they\
            \ are case sensitive. For example, there can be two different routes named\
            \ \"test\" and \"Test\"."
          type: string
        path_handling:
          default: v0
          description: "Controls how the service path, route path and requested path\
            \ are combined when sending a request to the upstream. See above for a\
            \ detailed description of each behavior."
          type: string
        paths:
          description: A list of paths that match this route.
          items:
            type: string
          type: array
        preserve_host:
          default: false
          description: "When matching a route via one of the `hosts` domain names,\
            \ use the request `Host` header in the upstream request headers. If set\
            \ to `false`, the upstream `Host` header will be that of the services\
            \ `host`."
          type: boolean
        protocols:
          default:
          - http
          - https
          description: "An array of the protocols this route should allow. See the\
            \ [route Object](#route-object) section for a list of accepted protocols.\
            \ When set to only `\"https\"`, HTTP requests are answered with an upgrade\
            \ error. When set to only `\"http\"`, HTTPS requests are answered with\
            \ an error."
          items:
            type: string
          type: array
        regex_priority:
          default: 0
          description: "A number used to choose which route resolves a given request\
            \ when several routes match it using regexes simultaneously. When two\
            \ routes match the path and have the same `regex_priority`, the older\
            \ one (lowest `created_at`) is used. Note that the priority for non-regex\
            \ routes is different (longer non-regex routes are matched before shorter\
            \ ones)."
          type: integer
        request_buffering:
          default: true
          description: "Whether to enable request body buffering or not. With HTTP\
            \ 1.1, it may make sense to turn this off on services that receive data\
            \ with chunked transfer encoding."
          type: boolean
        response_buffering:
          default: true
          description: "Whether to enable response body buffering or not. With HTTP\
            \ 1.1, it may make sense to turn this off on services that send data with\
            \ chunked transfer encoding."
          type: boolean
        service:
          $ref: '#/components/schemas/Route_service'
        expression:
          description: The route expression used for advanced routing scenarios. This
            field is used to evaluate route matches based on complex criteria beyond
            the standard routing fields.
          type: string
        priority:
          default: 0
          description: "A number used to specify the matching order for expression\
            \ routes. The higher the `priority`, the sooner a route will be evaluated.\
            \ This field is ignored unless `expression` field is set. The value must\
            \ be between 0 and 2^46 - 1."
          type: integer
        snis:
          description: A list of SNIs that match this route when using stream routing.
          items:
            type: string
          type: array
        sources:
          description: A list of IP sources of incoming connections that match this
            route when using stream routing. Each entry is an object with fields "ip"
            (optionally in CIDR range notation) and/or "port".
          items:
            type: object
          type: array
        strip_path:
          default: true
          description: "When matching a route via one of the `paths`, strip the matching\
            \ prefix from the upstream request URL."
          type: boolean
        tags:
          description: An optional set of strings associated with the route for grouping
            and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
      title: Route
      type: object
    SNI:
      description: "An SNI object represents a many-to-one mapping of hostnames to\
        \ a certificate. That is, a certificate object can have many hostnames associated\
        \ with it; when Kong receives an SSL request, it uses the SNI field in the\
        \ Client Hello to lookup the certificate object based on the SNI associated\
        \ with the certificate."
      example:
        certificate:
          id: bd380f99-659d-415e-b0e7-72ea05df3218
        id: 36c4566c-14cc-4132-9011-4139fcbbe50a
        name: some.example.org
      properties:
        certificate:
          $ref: '#/components/schemas/SNI_certificate'
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        id:
          example: b87eb55d-69a1-41d2-8653-8d706eecefc0
          type: string
        name:
          description: The SNI name to associate with the given certificate.
          example: my-sni
          type: string
        tags:
          description: An optional set of strings associated with the SNIs for grouping
            and filtering.
          items:
            example: "user-level, enterprise"
            type: string
          type: array
      type: object
    Service:
      description: "service entities are abstractions of upstream services. The main\
        \ attribute of a service is its URL which can be set as a single string or\
        \ by specifying the `protocol`, `host`, `port` and `path` individually."
      example:
        host: example.internal
        id: 49fd316e-c457-481c-9fc7-8079153e4f3c
        name: example-service
        path: /
        port: 80
        protocol: http
      properties:
        ca_certificates:
          description: "Array of `CA Certificate` object UUIDs that are used to build\
            \ the trust store while verifying upstream server's TLS certificate. If\
            \ set to `null` when Nginx default is respected. If default CA list in\
            \ Nginx are not specified and TLS verification is enabled, then handshake\
            \ with upstream server will always fail (because no CA are trusted)."
          items:
            type: string
          type: array
        client_certificate:
          $ref: '#/components/schemas/Service_client_certificate'
        connect_timeout:
          default: 60000
          description: The timeout in milliseconds for establishing a connection to
            the upstream server.
          type: integer
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        enabled:
          default: true
          description: "Whether the service is active. If set to `false`, the proxy\
            \ behavior will be as if any routes attached to it do not exist (404)."
          type: boolean
        host:
          description: The host of the upstream server. Note that the host value is
            case sensitive.
          type: string
        id:
          type: string
        name:
          description: The service name.
          type: string
        path:
          description: The path to be used in requests to the upstream server.
          type: string
        port:
          default: 80
          description: The upstream server port.
          type: integer
        protocol:
          default: http
          description: The protocol used to communicate with the upstream.
          type: string
        read_timeout:
          default: 60000
          description: The timeout in milliseconds between two successive read operations
            for transmitting a request to the upstream server.
          type: integer
        retries:
          default: 5
          description: The number of retries to execute upon failure to proxy.
          type: integer
        tags:
          description: An optional set of strings associated with the service for
            grouping and filtering.
          items:
            type: string
          type: array
        tls_verify:
          description: "Whether to enable verification of upstream server TLS certificate.\
            \ If set to `null`, then the Nginx default is respected."
          type: boolean
        tls_verify_depth:
          description: "Maximum depth of chain while verifying Upstream server's TLS\
            \ certificate. If set to `null`, then the Nginx default is respected.'"
          type: integer
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
        url:
          description: "Helper field to set `protocol`, `host`, `port` and `path`\
            \ using a URL. This field is write-only and is not returned in responses."
          type: string
        write_timeout:
          default: 60000
          description: The timeout in milliseconds between two successive write operations
            for transmitting a request to the upstream server.
          type: integer
      title: Service
      type: object
      x-examples:
        Example 1:
          id: 9748f662-7711-4a90-8186-dc02f10eb0f5
          created_at: 1422386534
          updated_at: 1422386534
          name: my-service
          retries: 5
          protocol: http
          host: example.com
          port: 80
          path: /some_api
          connect_timeout: 60000
          write_timeout: 60000
          read_timeout: 60000
          tags:
          - user-level
          - low-priority
          client_certificate:
            id: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
          tls_verify: true
          ca_certificates:
          - 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
          - 51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515
          enabled: true
    Target:
      description: "A target is an ip address/hostname with a port that identifies\
        \ an instance of a backend service. Every upstream can have many targets,\
        \ and the targets can be dynamically added, modified, or deleted. Changes\
        \ take effect on the fly. To disable a target, post a new one with `weight=0`;\
        \ alternatively, use the `DELETE` convenience method to accomplish the same.\
        \ The current target object definition is the one with the latest `created_at`."
      example:
        id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
        target: 203.0.113.42
        upstream:
          id: 5f1d7e76-2fed-4806-a6af-869984f025cb
        weight: 100
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: number
        id:
          description: The unique identifier or the name of the upstream for which
            to update the target.
          example: 173a6cee-90d1-40a7-89cf-0329eca780a6
          type: string
        tags:
          description: An optional set of strings associated with the Target for grouping
            and filtering.
          items:
            type: string
          type: array
        target:
          description: "The target address (ip or hostname) and port. If the hostname\
            \ resolves to an SRV record, the `port` value will be overridden by the\
            \ value from the DNS record."
          type: string
        upstream:
          $ref: '#/components/schemas/Target_upstream'
        weight:
          default: 100
          description: "The weight this target gets within the upstream loadbalancer\
            \ (`0`-`65535`). If the hostname resolves to an SRV record, the `weight`\
            \ value will be overridden by the value from the DNS record."
          example: 100
          type: integer
      type: object
      x-examples:
        Example 1:
          id: 173a6cee-90d1-40a7-89cf-0329eca780a6
          created_at: 1422386534
          upstream:
            id: bdab0e47-4e37-4f0b-8fd0-87d95cc4addc
          target: example.com:8000
          weight: 100
          tags:
          - user-level
          - low-priority
    Upstream:
      description: "The upstream object represents a virtual hostname and can be used\
        \ to loadbalance incoming requests over multiple services (targets). So for\
        \ example an upstream named `service.v1.xyz` for a service object whose `host`\
        \ is `service.v1.xyz`. Requests for this service would be proxied to the targets\
        \ defined within the upstream. An upstream also includes a health check, which\
        \ is able to enable and disable targets based on their ability or inability\
        \ to serve requests. The configuration for the health checker is stored in\
        \ the upstream object, and applies to all of its targets."
      example:
        algorithm: round-robin
        hash_fallback: none
        hash_on: none
        hash_on_cookie_path: /
        healthchecks:
          active:
            concurrency: 10
            healthy:
              http_statuses:
              - 200
              - 302
              interval: 0
              successes: 0
            http_path: /
            https_verify_certificate: true
            timeout: 1
            type: http
            unhealthy:
              http_failures: 0
              http_statuses:
              - 429
              - 404
              - 500
              - 501
              - 502
              - 503
              - 504
              - 505
              interval: 0
              tcp_failures: 0
              timeouts: 0
          passive:
            healthy:
              http_statuses:
              - 200
              - 201
              - 202
              - 203
              - 204
              - 205
              - 206
              - 207
              - 208
              - 226
              - 300
              - 301
              - 302
              - 303
              - 304
              - 305
              - 306
              - 307
              - 308
              successes: 0
            type: http
            unhealthy:
              http_failures: 0
              http_statuses:
              - 429
              - 500
              - 503
              tcp_failures: 0
              timeouts: 0
          threshold: 0
        id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
        name: api.example.internal
        slots: 10000
      properties:
        algorithm:
          default: round-robin
          description: Which load balancing algorithm to use.
          type: string
        client_certificate:
          $ref: '#/components/schemas/Upstream_client_certificate'
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        hash_fallback:
          default: none
          description: "What to use as hashing input if the primary `hash_on` does\
            \ not return a hash (eg. header is missing, or no Consumer identified).\
            \ Not available if `hash_on` is set to `cookie`."
          type: string
        hash_fallback_header:
          description: The header name to take the value from as hash input. Only
            required when `hash_fallback` is set to `header`.
          type: string
        hash_fallback_query_arg:
          description: The name of the query string argument to take the value from
            as hash input. Only required when `hash_fallback` is set to `query_arg`.
          type: string
        hash_fallback_uri_capture:
          description: The name of the route URI capture to take the value from as
            hash input. Only required when `hash_fallback` is set to `uri_capture`.
          type: string
        hash_on:
          default: none
          description: What to use as hashing input. Using `none` results in a weighted-round-robin
            scheme with no hashing.
          type: string
        hash_on_cookie:
          description: "The cookie name to take the value from as hash input. Only\
            \ required when `hash_on` or `hash_fallback` is set to `cookie`. If the\
            \ specified cookie is not in the request, Kong will generate a value and\
            \ set the cookie in the response."
          type: string
        hash_on_cookie_path:
          default: /
          description: The cookie path to set in the response headers. Only required
            when `hash_on` or `hash_fallback` is set to `cookie`.
          type: string
        hash_on_header:
          description: The header name to take the value from as hash input. Only
            required when `hash_on` is set to `header`.
          type: string
        hash_on_query_arg:
          description: The name of the query string argument to take the value from
            as hash input. Only required when `hash_on` is set to `query_arg`.
          type: string
        hash_on_uri_capture:
          description: The name of the route URI capture to take the value from as
            hash input. Only required when `hash_on` is set to `uri_capture`.
          type: string
        healthchecks:
          $ref: '#/components/schemas/Upstream_healthchecks'
        host_header:
          description: The hostname to be used as `Host` header when proxying requests
            through Kong.
          type: string
        id:
          type: string
        name:
          description: "This is a hostname, which must be equal to the `host` of a\
            \ service."
          type: string
        slots:
          default: 10000
          description: "The number of slots in the load balancer algorithm. If `algorithm`\
            \ is set to `round-robin`, this setting determines the maximum number\
            \ of slots. If `algorithm` is set to `consistent-hashing`, this setting\
            \ determines the actual number of slots in the algorithm. Accepts an integer\
            \ in the range `10`-`65536`."
          type: integer
        tags:
          description: An optional set of strings associated with the Upstream for
            grouping and filtering.
          items:
            type: string
          type: array
        use_srv_name:
          default: false
          description: "If set, the balancer will use SRV hostname(if DNS Answer has\
            \ SRV record) as the proxy upstream `Host`."
          type: boolean
      type: object
    Vault:
      description: "Vault entities are used to configure different Vault connectors.\
        \ Examples of Vaults are Environment Variables, HashiCorp Vault and AWS Secrets\
        \ Manager. Configuring a Vault allows referencing the secrets with other entities.\
        \ For example a certificate entity can store a reference to a certificate\
        \ and key, stored in a vault, instead of storing the certificate and key within\
        \ the entity. This allows a proper separation of secrets and configuration\
        \ and prevents secret sprawl."
      example:
        config:
          prefix: vaults.config.resurrect_ttl
        description: environment variable based vault
        id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
        name: env
        tags:
        - foo
        - bar
      properties:
        config:
          $ref: '#/components/schemas/Vault_config'
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        description:
          description: The description of the Vault entity.
          example: This vault is used to retrieve redis database access credentials
          type: string
        id:
          example: B2A30E8F-C542-49CF-8015-FB674987D1A5
          type: string
        name:
          description: "The name of the Vault thats going to be added. Currently,\
            \ the Vault implementation must be installed in every Kong instance."
          example: env
          type: string
        prefix:
          description: The unique prefix (or identifier) for this Vault configuration.
            The prefix is used to load the right Vault configuration and implementation
            when referencing secrets with the other entities.
          example: env
          type: string
        tags:
          description: An optional set of strings associated with the Vault for grouping
            and filtering.
          items:
            example: database-credentials
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          example: 1422386534
          type: integer
      x-examples:
        Example Vault:
          id: B2A30E8F-C542-49CF-8015-FB674987D1A5
          prefix: env
          name: env
          description: This vault is used to retrieve redis database access credentials
          config:
            prefix: SSL_
          created_at: 1422386534
          updated_at: 1422386534
          tags:
          - database-credentials
          - data-plane
    Filter-chains:
      description: "A filter chain is the database entity representing one or more\
        \ WebAssembly filters executed for each request to a particular service or\
        \ route, each one with its configuration."
      example:
        route: ""
        updated_at: 1422386534
        service: 20487393-41ed-47f6-93a8-3407cade2002
        name: my-chain
        created_at: 1422386534
        id: ce44eef5-41ed-47f6-baab-f725cecf98c7
        filters:
        - name: go-rate-limiting
          config: "{ \\\"minute\\\": 30 }"
          enabled: true
        - name: go-rate-limiting
          config: "{ \\\"minute\\\": 30 }"
          enabled: true
        enabled: true
        tags:
        - tags
        - tags
      properties:
        id:
          description: The unique identifier or the name attribute of the route that
            should be associated to the newly created filter chain.
          example: ce44eef5-41ed-47f6-baab-f725cecf98c7
          format: uuid
          type: string
        name:
          description: |
            The name of the filter chain.
          example: my-chain
          type: string
        created_at:
          example: 1422386534
          type: integer
        updated_at:
          example: 1422386534
          type: integer
        enabled:
          default: true
          description: |
            Whether the filter chain is applied. Default: true.
          type: boolean
        route:
          description: "The route to which this chain is applied. A filter chain must\
            \ be applied to either a single route or a single service. Default `null`.\
            \ In form-encoded format, the notation is `route.id=<route id>` or `route.name=<route\
            \ name>`. In JSON format, use `\"route\":{\"id\":\"<route id>\"}` or `\"\
            route\":{\"name\":\"<route name>\"}`."
          nullable: true
        service:
          description: "The service to which this chain is applied. A filter chain\
            \ must be applied to either a single route or a single service. Default\
            \ `null`. In form-encoded format, the notation is `service.id=<service\
            \ id>` or `service.name=<service name>`. In JSON format, use `\"service\"\
            :{\"id\":\"<service id>\"}` or `\"service\":{\"name\":\"<service name>\"\
            }`."
          example: 20487393-41ed-47f6-93a8-3407cade2002
          type: string
        filters:
          description: "An array of filter definitions. Each filter is an object containing\
            \ a mandatory name, an optional config, and a boolean enabled setting."
          items:
            $ref: '#/components/schemas/Filter_chains_filters_inner'
          type: array
        tags:
          items:
            type: string
          type: array
      title: Filter Chains
      type: object
      x-examples:
        Example 1:
          id: ce44eef5-41ed-47f6-baab-f725cecf98c7
          name: my-chain
          created_at: 1422386534
          updated_at: 1422386534
          enabled: true
          service: 20487393-41ed-47f6-93a8-3407cade2002
          filters:
          - name: go-rate-limiting
            enabled: true
            config: "{ \"minute\": 30 }"
          - name: rust-response-transformer
            enabled: true
            config: "{ \"remove_header\": \"X-Example\" }"
          tags:
          - my-tag
    pagination-offset-response:
      description: Offset is used to paginate through the API. Provide this value
        to the next list operation to fetch the next page
      type: string
    geInfo_200_response_timers:
      description: Information about running and pending timers.
      example:
        running: 5
        pending: 2
      properties:
        running:
          description: The number of running timers.
          example: 5
          type: integer
        pending:
          description: The number of pending timers.
          example: 2
          type: integer
      type: object
    geInfo_200_response_plugins_available_on_server_value:
      example:
        priority: 0
        version: version
      properties:
        version:
          description: The version of the plugin.
          type: string
        priority:
          description: The priority of the plugin.
          type: integer
      type: object
    geInfo_200_response_plugins:
      description: Information about plugins.
      example:
        available_on_server:
          key:
            priority: 0
            version: version
        enabled_in_cluster:
        - jwt
        - acl
      properties:
        available_on_server:
          additionalProperties:
            $ref: '#/components/schemas/geInfo_200_response_plugins_available_on_server_value'
          type: object
        enabled_in_cluster:
          description: A list of distinct plugin names enabled in the cluster.
          example:
          - jwt
          - acl
          items:
            type: string
          type: array
      type: object
    geInfo_200_response_pids:
      description: Process IDs for the master process and worker processes.
      example:
        workers:
        - 1234
        - 5678
        master: 4321
      properties:
        master:
          description: The PID of the master process.
          example: 4321
          type: integer
        workers:
          description: An array of worker process PIDs.
          example:
          - 1234
          - 5678
          items:
            type: integer
          type: array
      type: object
    geInfo_200_response:
      example:
        hostname: kong-node.example.com
        timers:
          running: 5
          pending: 2
        configuration:
          key: ""
        plugins:
          available_on_server:
            key:
              priority: 0
              version: version
          enabled_in_cluster:
          - jwt
          - acl
        edition: Community
        tagline: Welcome to Kong
        pids:
          workers:
          - 1234
          - 5678
          master: 4321
        version: 2.3.3
        node_id: a74d7c4f-ef83-4bbe-a5e7-3f5409f4a0b9
        lua_version: LuaJIT 2.1.0-beta3
      properties:
        version:
          description: The version number of the Kong instance.
          example: 2.3.3
          type: string
        edition:
          description: Indicates whether the Kong instance is the Community or Enterprise
            edition.
          example: Community
          type: string
        tagline:
          description: A tagline or slogan for the Kong instance.
          example: Welcome to Kong
          type: string
        node_id:
          description: "A unique identifier for the node, in UUID format."
          example: a74d7c4f-ef83-4bbe-a5e7-3f5409f4a0b9
          format: uuid
          type: string
        hostname:
          description: The hostname of the Kong node.
          example: kong-node.example.com
          type: string
        timers:
          $ref: '#/components/schemas/geInfo_200_response_timers'
        plugins:
          $ref: '#/components/schemas/geInfo_200_response_plugins'
        lua_version:
          description: The version of Lua used by the Kong instance.
          example: LuaJIT 2.1.0-beta3
          type: string
        configuration:
          additionalProperties: true
          description: "A sanitized version of the Kong configuration, excluding sensitive\
            \ values."
          type: object
        pids:
          $ref: '#/components/schemas/geInfo_200_response_pids'
      type: object
    create_ca_certificate_request:
      properties:
        cert:
          description: |
            PEM-encoded public certificate of the CA.
          example: '"-----BEGIN CERTIFICATE-----..."'
          type: string
        cert_digest:
          description: |
            SHA256 hex digest of the public certificate.
          example: c641e28d77e93544f2fa87b2cf3f3d51...
          type: string
        tags:
          description: An optional set of strings associated with the Certificate
            for grouping and filtering.
          items:
            type: string
          type: array
      required:
      - cert
      type: object
      x-examples:
        Example 1:
          cert: '-----BEGIN CERTIFICATE-----...'
          cert_digest: c641e28d77e93544f2fa87b2cf3f3d51...
          tags:
          - user-level
          - low-priority
    list_certificate_200_response:
      example:
        data:
        - cert: |-
            -----BEGIN CERTIFICATE-----
            certificate-content
            -----END CERTIFICATE-----
          id: b2f34145-0343-41a4-9602-4c69dec2f269
          key: |-
            -----BEGIN PRIVATE KEY-----
            private-key-content
            -----END PRIVATE KEY-----
        - cert: |-
            -----BEGIN CERTIFICATE-----
            certificate-content
            -----END CERTIFICATE-----
          id: b2f34145-0343-41a4-9602-4c69dec2f269
          key: |-
            -----BEGIN PRIVATE KEY-----
            private-key-content
            -----END PRIVATE KEY-----
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Certificate'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_certificate_request:
      properties:
        cert:
          description: PEM-encoded public certificate chain of the SSL key pair.
          example: "\"-----BEGIN CERTIFICATE-----...\","
          type: string
        key:
          description: PEM-encoded private key of the SSL key pair.
          example: '"-----BEGIN RSA PRIVATE KEY-----..."'
          type: string
        cert_alt:
          description: PEM-encoded public certificate chain of the alternate SSL key
            pair.
          type: string
        key_alt:
          description: PEM-encoded private key of the alternate SSL key pair.
          example: '"-----BEGIN EC PRIVATE KEY-----..."'
          type: string
        snis:
          description: An array of zero or more hostnames to associate with this certificate
            as SNIs.
          items:
            type: string
          type: array
        tags:
          description: |
            An optional set of strings associated with the Certificate for grouping and filtering.
          items:
            type: string
          type: array
        passphrase:
          description: "To load an encrypted private key into Kong, specify the passphrase\
            \ using this attributKong will decrypt the private key and store it in\
            \ its database. e. Enterprise Only"
          example: example
          type: string
      required:
      - cert
      - key
      type: object
      x-examples:
        Example:
          id: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          created_at: 1422386534
          cert: '-----BEGIN CERTIFICATE-----...'
          key: '-----BEGIN RSA PRIVATE KEY-----...'
          cert_alt: '-----BEGIN CERTIFICATE-----...'
          key_alt: '-----BEGIN EC PRIVATE KEY-----...'
          snis:
          - foo.test
          - example.com
          tags:
          - user-level
          - low-priority
    get_sni_with_certificate_200_response_data_inner_certificate:
      description: |
        The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
      example:
        id: 2e013e8-7623-4494-a347-6d29108ff68b
      properties:
        id:
          description: The unique identifier or the name attribute of the Certificate
            whose SNIs
          example: 2e013e8-7623-4494-a347-6d29108ff68b
          type: string
      type: object
    get_sni_with_certificate_200_response_data_inner:
      example:
        name: my-sni
        certificate:
          id: 2e013e8-7623-4494-a347-6d29108ff68b
        created_at: 1422386534
        id: 147f5ef0-1ed6-4711-b77f-489262f8bff7
        tags:
        - tags
        - tags
      properties:
        id:
          description: "The unique identifier or the name attribute of the Certificate\
            \ whose SNIs are to be retrieved. When using this endpoint, only SNIs\
            \ associated to the specified Certificate will be listed."
          example: 147f5ef0-1ed6-4711-b77f-489262f8bff7
          type: string
        name:
          description: |
            The SNI name to associate with the given certificate.
          example: my-sni
          type: string
        created_at:
          description: |
            Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        tags:
          description: |
            An optional set of strings associated with the SNIs for grouping and filtering.
          items:
            type: string
          type: array
        certificate:
          $ref: '#/components/schemas/get_sni_with_certificate_200_response_data_inner_certificate'
      type: object
    get_sni_with_certificate_200_response:
      example:
        next: http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
        data:
        - name: my-sni
          certificate:
            id: 2e013e8-7623-4494-a347-6d29108ff68b
          created_at: 1422386534
          id: 147f5ef0-1ed6-4711-b77f-489262f8bff7
          tags:
          - tags
          - tags
        - name: my-sni
          certificate:
            id: 2e013e8-7623-4494-a347-6d29108ff68b
          created_at: 1422386534
          id: 147f5ef0-1ed6-4711-b77f-489262f8bff7
          tags:
          - tags
          - tags
      properties:
        data:
          description: Array of SNIs
          items:
            $ref: '#/components/schemas/get_sni_with_certificate_200_response_data_inner'
          type: array
        next:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          example: http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
          type: string
      type: object
      x-examples:
        Example 1:
          data:
          - id: 147f5ef0-1ed6-4711-b77f-489262f8bff7
            name: my-sni
            created_at: 1422386534
            tags:
            - user-level
            - low-priority
            certificate:
              id: a3ad71a8-6685-4b03-a101-980a953544f6
          - id: b87eb55d-69a1-41d2-8653-8d706eecefc0
            name: my-sni
            created_at: 1422386534
            tags:
            - admin
            - high-priority
            - critical
            certificate:
              id: 4e8d95d4-40f2-4818-adcb-30e00c349618
          next: http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    create_sni_for_certificate_request_certificate:
      description: "The id (a UUID) of the certificate with which to associate the\
        \ SNI hostname. The Certificate must have a valid private key associated with\
        \ it to be used by the SNI object. With form-encoded, the notation is `certificate.id=<certificate\
        \ id>`. With JSON, use `\"certificate\":{\"id\":\"<certificate id>\"}`."
      properties:
        id:
          description: 91020192-062d-416f-a275-9addeeaffaf2
          example: 91020192-062d-416f-a275-9addeeaffaf2
          type: string
      type: object
    create_sni_for_certificate_request:
      properties:
        name:
          description: The SNI name to associate with the given certificate.
          example: my-sni
          type: string
        tags:
          description: |
            An optional set of strings associated with the SNIs for grouping and filtering.
          items:
            example: "[\"user-level\", \"low-priority\"]"
            type: string
          type: array
        certificate:
          $ref: '#/components/schemas/create_sni_for_certificate_request_certificate'
      required:
      - certificate
      - name
      type: object
      x-examples:
        Example 1:
          name: my-sni
          tags:
          - user-level
          - low-priority
          certificate:
            id: a2e013e8-7623-4494-a347-6d29108ff68b
    list_consumer_200_response:
      example:
        data:
        - custom_id: "4200"
          id: 8a388226-80e8-4027-a486-25e4f7db5d21
          tags:
          - silver-tier
          username: bob-the-builder
        - custom_id: "4200"
          id: 8a388226-80e8-4027-a486-25e4f7db5d21
          tags:
          - silver-tier
          username: bob-the-builder
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Consumer'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_consumer_request:
      properties:
        username:
          description: |
            The unique username of the Consumer. You must send either this field or custom_id with the request.
          type: string
        custom_id:
          description: |
            Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.
          type: string
        tags:
          description: |
            An optional set of strings associated with the Consumer for grouping and filtering.
          items:
            type: string
          type: array
      required:
      - custom_id
      - username
      type: object
      x-examples:
        Example 1:
          id: ec1a1f6f-2aa4-4e58-93ff-b56368f19b27
          created_at: 1422386534
          username: my-username
          custom_id: my-custom-id
          tags:
          - user-level
          - low-priority
    upsert_consumer_200_response_data_inner:
      example:
        custom_id: my-custom-id
        created_at: 1422386534
        id: a4407883-c166-43fd-80ca-3ca035b0cdb7
        username: my-username
        tags:
        - admin
        - admin
      properties:
        id:
          description: The unique identifier or the name attribute of the consumer.
          example: a4407883-c166-43fd-80ca-3ca035b0cdb7
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          example: 1422386534
          type: integer
        username:
          description: The unique username of the consumer. You must send either this
            field or` custom_i`d with the request.
          example: my-username
          type: string
        custom_id:
          description: Field for storing an existing unique ID for the Consumer -
            useful for mapping Kong with users in your existing database.
          example: my-custom-id
          type: string
        tags:
          description: |
            An optional set of strings associated with the Consumer for grouping and filtering.
          items:
            example: admin
            type: string
          type: array
      type: object
    upsert_consumer_200_response:
      example:
        next: http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
        data:
        - custom_id: my-custom-id
          created_at: 1422386534
          id: a4407883-c166-43fd-80ca-3ca035b0cdb7
          username: my-username
          tags:
          - admin
          - admin
        - custom_id: my-custom-id
          created_at: 1422386534
          id: a4407883-c166-43fd-80ca-3ca035b0cdb7
          username: my-username
          tags:
          - admin
          - admin
      properties:
        data:
          items:
            $ref: '#/components/schemas/upsert_consumer_200_response_data_inner'
          type: array
        next:
          description: Pagination information
          example: http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
          type: string
      type: object
      x-examples:
        Example 1:
          data:
          - id: a4407883-c166-43fd-80ca-3ca035b0cdb7
            created_at: 1422386534
            username: my-username
            custom_id: my-custom-id
            tags:
            - user-level
            - low-priority
          - id: 01c23299-839c-49a5-a6d5-8864c09184af
            created_at: 1422386534
            username: my-username
            custom_id: my-custom-id
            tags:
            - admin
            - high-priority
            - critical
          next: http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    list_plugins_for_consumer_200_response_config:
      description: The configuration properties for the Plugin
      example:
        hour: 500
        minute: 500
      properties:
        hour:
          example: 500
          type: integer
        minute:
          example: 500
          type: integer
      type: object
    list_plugins_for_consumer_200_response:
      example:
        route: route
        instance_name: rate-limiting-foo
        service: service
        name: rate-limiting
        created_at: 0
        id: id
        protocols:
        - http
        - http
        config:
          hour: 500
          minute: 500
        consumer: consumer
        enabled: true
        tags:
        - tags
        - tags
      properties:
        id:
          type: string
        name:
          description: |
            The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
          example: rate-limiting
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        route:
          description: "If set, the plugin will only activate when receiving requests\
            \ via the specified route. Leave unset for the plugin to activate regardless\
            \ of the route being used. With form-encoded, the notation is `route.id=<route\
            \ id> or route.name=<route name>`. With JSON, use `\"route\":{\"id\":\"\
            <route id>\"}` or `\"route\":{\"name\":\"<route name>\"}`."
          nullable: true
          type: string
        service:
          description: "If set, the plugin will only activate when receiving requests\
            \ via one of the routes belonging to the specified service."
          nullable: true
          type: string
        consumer:
          description: "If set, the plugin will activate only for requests where the\
            \ specified has been authenticated. (Note that some plugins can not be\
            \ restricted to consumers this way.)"
          nullable: true
          type: string
        instance_name:
          description: "An optional custom name to identify an instance of the plugin,\
            \ for example `basic-auth_example-service`.\n\nThe instance name shows\
            \ up in Kong Manager, so it's useful when running the same \nplugin in\
            \ multiple contexts, for example, on multiple services. You can also use\
            \ it to access a specific plugin instance\nvia the Kong Admin API.\n\n\
            An instance name must be unique globally for Kong Gateway OSS.\n"
          example: rate-limiting-foo
          type: string
        config:
          $ref: '#/components/schemas/list_plugins_for_consumer_200_response_config'
        protocols:
          description: A list of the request protocols that will trigger this plugin.
          items:
            default: http
            enum:
            - http
            - grpc
            - grpcs
            - tls
            - tcp
            type: string
          type: array
        enabled:
          default: true
          description: |
            Whether the plugin is applied. Default: `true`.
          type: boolean
        tags:
          description: |
            An optional set of strings associated with the Plugin for grouping and filtering.
          items:
            type: string
          type: array
      type: object
    create_plugin_for_consumer_request:
      properties:
        name:
          description: |
            The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
          example: rate-limiting
          type: string
        route:
          description: |
            If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`. With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `"route":{"id":"<route id>"}` or `"route":{"name":"<route name>"}`.
          nullable: true
          type: string
        service:
          description: |
            If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
          nullable: true
          type: string
        consumer:
          description: |
            If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.)
          nullable: true
          type: string
        instance_name:
          description: "An optional custom name to identify an instance of the plugin,\
            \ for example `basic-auth_example-service`.\n\nThe instance name shows\
            \ up in Kong Manager, so it's useful when running the same \nplugin in\
            \ multiple contexts, for example, on multiple services. You can also use\
            \ it to access a specific plugin instance\nvia the Kong Admin API.\n\n\
            An instance name must be unique globally for Kong Gateway OSS.\n"
          example: rate-limiting-foo
          type: string
        config:
          additionalProperties: true
          description: The configuration properties for the Plugin
          type: object
        protocols:
          description: A list of the request protocols that will trigger this plugin.
          items:
            default: http
            enum:
            - http
            - grpc
            - grpcs
            - tls
            - tcp
            type: string
          type: array
        enabled:
          default: true
          description: |
            Whether the plugin is applied. Default: `true`.
          type: boolean
        tags:
          description: |
            An optional set of strings associated with the Plugin for grouping and filtering.
          items:
            type: string
          type: array
      type: object
      x-examples:
        Example 1:
          name: rate-limiting
          instance_name: rate-limiting-foo
          config:
            hour: 500
            minute: 20
          protocols:
          - http
          - https
          enabled: true
          tags:
          - user-level
          - low-priority
    list_key_set_200_response:
      example:
        next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
        updated_at: 1422386534
        name: my-key_set
        created_at: 1422386534
        id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
        tags:
        - tags
        - tags
      properties:
        id:
          example: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
          type: string
        name:
          description: |
            The name to associate with the given key-set.
          example: my-key_set
          type: string
        created_at:
          description: Unix epoch when the resource was last created.
          example: 1422386534
          type: integer
        updated_at:
          description: |
            Unix epoch when the resource was last updated.
          example: 1422386534
          type: integer
        tags:
          description: |
            The name to associate with the given key-set.
          items:
            type: string
          type: array
        next:
          description: |
            Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page
          example: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
          type: string
      type: object
      x-examples:
        Example 1:
          id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
          name: example-key-set
          created_at: 1422386534
          updated_at: 1422386534
          tags:
          - idp-keys
          next: http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    create_key_set_request:
      properties:
        name:
          description: |
            The name to associate with the given key-set.
          example: my-key_set
          type: string
        tags:
          description: |
            An optional set of strings associated with the Key for grouping and filtering.
          items:
            type: string
          type: array
      type: object
      x-examples:
        Example 1:
          name: my-key_set
          tags:
          - google-keys
          - mozilla-keys
    list_key_200_response:
      example:
        data:
        - id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
          jwk: "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}"
          kid: "42"
          name: a-key
          pem:
            private_key: '-----BEGIN'
            public_key: '-----BEGIN'
          set:
            id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
        - id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
          jwk: "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}"
          kid: "42"
          name: a-key
          pem:
            private_key: '-----BEGIN'
            public_key: '-----BEGIN'
          set:
            id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Key'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_key_request_set:
      description: "The id (an UUID) of the key-set with which to associate the key\
        \ .With form-encoded, the notation is `set.id=<set id>` or `set.name=<set\
        \ name>`. With JSON, use `\"set\":{\"id\":\"<set id>\"}` or `\"set\":{\"name\"\
        :\"<set name>\"}.`"
      properties:
        id:
          description: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
          type: string
      type: object
    create_key_request_pem:
      description: |
        A keypair in PEM format.
      properties:
        private_key:
          example: "private_key\": \"-----BEGIN"
          type: string
        public_key:
          example: "public_key\": \"-----BEGIN"
          type: string
      type: object
    create_key_request:
      properties:
        set:
          $ref: '#/components/schemas/create_key_request_set'
        name:
          description: |
            The name to associate with the given keys.
          example: my-key
          type: string
        kid:
          description: |
            A unique identifier for a key.
          example: "42"
          type: string
        jwk:
          description: A JSON Web Key represented as a string.
          example: "{\\\"alg\\\":\\\"RSA\\\",  \\\"kid\\\": \\\"42\\\",  ...}"
          type: string
        pem:
          $ref: '#/components/schemas/create_key_request_pem'
        tags:
          description: |
            An optional set of strings associated with the Key for grouping and filtering.
          items:
            type: string
          type: array
      required:
      - kid
      type: object
      x-examples:
        Example 1:
          set:
            id: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
          name: my-key
          kid: "42"
          jwk: "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}"
          pem:
            private_key: '-----BEGIN'
            public_key: '-----BEGIN'
          tags:
          - application-a
          - public-key-xyz
    list_route_200_response:
      example:
        data:
        - hosts:
          - foo.example.com
          - bar.example.com
          id: 56c4566c-14cc-4132-9011-4139fcbbe50a
          name: example-route
          paths:
          - /v1
          - /v2
          service:
            id: bd380f99-659d-415e-b0e7-72ea05df3218
        - hosts:
          - foo.example.com
          - bar.example.com
          id: 56c4566c-14cc-4132-9011-4139fcbbe50a
          name: example-route
          paths:
          - /v1
          - /v2
          service:
            id: bd380f99-659d-415e-b0e7-72ea05df3218
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Route'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_route_request_headers:
      description: "One or more lists of values indexed by header name that will cause\
        \ this route to match if present in the request. The Host header cannot be\
        \ used with this hosts should be specified using the `hosts` attribute. When\
        \ headers contains only one value and that value starts with the special prefix`\
        \ ~*`, the value is interpreted as a regular expression."
      properties:
        x-my-header:
          items:
            type: string
          type: array
        x-another-header:
          items:
            type: string
          type: array
      type: object
    create_route_request_sources_inner:
      properties:
        ip:
          example: 10.1.0.0/16
          type: string
        port:
          example: 1234
          type: integer
      type: object
    create_route_request_destinations_inner:
      properties:
        ip:
          example: 0.1.0.0/16
          type: string
        port:
          type: integer
      type: object
    create_route_request_service:
      description: "The service this route is associated to. This is where the route\
        \ proxies traffic to. With form-encoded, the notation is service.id=<service\
        \ id> or service.name=<service name>. With JSON, use `\"service\":{\"id\"\
        :\"<service id>\"}` or `\"service\":{\"name\":\"<service name>\"}`."
      properties:
        id:
          example: af8330d3-dbdc-48bd-b1be-55b98608834b
          type: string
      type: object
    create_route_request:
      properties:
        name:
          description: |
            The name of the route. Route names must be unique, and they are case sensitive. For example, there can be two different routes named "test" and "Test".
          type: string
        protocols:
          description: An array of the protocols this route should allow
          items:
            default: https
            example: tcp
            type: string
          type: array
        methods:
          description: |
            A list of HTTP methods that match this route.
          items:
            example: GET
            type: string
          type: array
        hosts:
          description: "A list of domain names that match this route. Note that the\
            \ hosts value is case sensitive. With form-encoded, the notation is `hosts[]=example.com&hosts[]=foo.test`.\
            \ With JSON, use an Array."
          items:
            type: string
          type: array
        paths:
          description: "A list of paths that match this route. With form-encoded,\
            \ the notation is `paths[]=/foo&paths[]=/bar`. With JSON, use an array.\
            \ The path can be a regular expression, or a plain text pattern."
          items:
            type: string
          type: array
        headers:
          $ref: '#/components/schemas/create_route_request_headers'
        https_redirect_status_code:
          default: 426
          description: |-
            The status code Kong responds with when all properties of a route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`
            Location header is injected by Kong if the field is set to `301`, `302`, `307` or `308`. Note: This config applies only if the route is configured to only accept the https protocol. Accepted values are: `426`, `301`, `302`, `307`, `308`. Default: `426`.
          enum:
          - 426
          - 301
          - 302
          - 307
          - 308
          example: 426
          type: integer
        regex_priority:
          default: 0
          description: "A number used to choose which route resolves a given request\
            \ when several routes match it using regexes simultaneously. When two\
            \ routes match the path and have the same regex_priority, the older one\
            \ (lowest `created_at`) is used. Note that the priority for non-regex\
            \ routes is different (longer non-regex routes are matched before shorter\
            \ ones)."
          example: 0
          type: integer
        strip_path:
          default: true
          description: "When matching a route via one of the paths, strip the matching\
            \ prefix from the upstream request URL."
          type: boolean
        path_handling:
          description: "Controls how the service path, route path and requested path\
            \ are combined when sending a request to the upstream. Accepted values\
            \ are \"`v0`\", \"`v1`\"."
          enum:
          - v1
          - v0
          example: v0
          type: string
        preserve_host:
          default: true
          description: |
            When matching a route via one of the `hosts` domain names, use the request `host` header in the upstream request headers. If set to `false`, the upstream Host header will be that of the service's host.
          type: boolean
        request_buffering:
          default: true
          description: |
            Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding. Default: true.
          type: boolean
        response_buffering:
          default: true
          description: |
            Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding. Default: `true`.
          type: boolean
        snis:
          description: |
            A list of SNIs that match this route when using stream routing.
          items:
            type: string
          type: array
        sources:
          description: |
            A list of IP sources of incoming connections that match this route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            $ref: '#/components/schemas/create_route_request_sources_inner'
          type: array
        destinations:
          description: |
            A list of IP destinations of incoming connections that match this route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            $ref: '#/components/schemas/create_route_request_destinations_inner'
          type: array
        tags:
          description: |
            An optional set of strings associated with the route for grouping and filtering.
          items:
            type: string
          type: array
        service:
          $ref: '#/components/schemas/create_route_request_service'
      required:
      - https_redirect_status_code
      - preserve_host
      - protocols
      - request_buffering
      - response_buffering
      type: object
      x-examples:
        Example 1:
          name: my-route
          protocols:
          - http
          - https
          methods:
          - GET
          - POST
          hosts:
          - example.com
          - foo.test
          paths:
          - /foo
          - /bar
          headers:
            x-my-header:
            - foo
            - bar
            x-another-header:
            - bla
          https_redirect_status_code: 426
          regex_priority: 0
          strip_path: true
          path_handling: v0
          preserve_host: false
          request_buffering: true
          response_buffering: true
          snis:
          - foo.test
          - example.com
          sources:
          - ip: 10.1.0.0/16
            port: 1234
          - ip: 10.2.2.2
          - port: 9123
          destinations:
          - ip: 10.1.0.0/16
            port: 1234
          - ip: 10.2.2.2
          - port: 9123
          tags:
          - user-level
          - low-priority
          service:
            id: af8330d3-dbdc-48bd-b1be-55b98608834b
    list_plugins_for_route_200_response:
      example:
        data:
        - config:
            anonymous: null
            hide_credentials: false
            key_in_body: false
            key_in_header: true
            key_in_query: true
            key_names:
            - apikey
            run_on_preflight: true
          enabled: true
          id: 3fd1eea1-885a-4011-b986-289943ff8177
          name: key-auth
          protocols:
          - grpc
          - grpcs
          - http
          - https
        - config:
            anonymous: null
            hide_credentials: false
            key_in_body: false
            key_in_header: true
            key_in_query: true
            key_names:
            - apikey
            run_on_preflight: true
          enabled: true
          id: 3fd1eea1-885a-4011-b986-289943ff8177
          name: key-auth
          protocols:
          - grpc
          - grpcs
          - http
          - https
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Plugin'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_service_request_client_certificate:
      description: "Certificate to be used as client certificate while TLS handshaking\
        \ to the upstream server. With form-encoded, the notation is `client_certificate.id=<client_certificate\
        \ id>`. With JSON, use `\"client_certificate\":{\"id\":\"<client_certificate\
        \ id>\"}`."
      properties:
        id:
          example: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
          type: string
      type: object
    create_service_request:
      properties:
        name:
          description: |
            The service name.
          example: my-service
          type: string
        retries:
          default: 5
          description: |
            The number of retries to execute upon failure to proxy. Default:`5`.
          example: 5
          type: integer
        protocol:
          default: http
          description: |-
            The protocol used to communicate with the upstream. Accepted values are: "`grpc`", "`grpcs`", "`http`", "`https`", "`tcp`", "`tls`", "`tls_passthrough`", "`udp`", "`ws`"
            , "`wss`"
            . Default: "`http`".
          enum:
          - grpc
          - grpcs
          - http
          - https
          - tcp
          - 'tls '
          - tls_passthrough
          - udp
          - ws
          - wss
          example: http
          type: string
        host:
          description: |
            The host of the upstream server. Note that the host value is case sensitive.
          example: example.com
          type: string
        port:
          default: 80
          description: |
            The upstream server port. Default: `80`.
          example: 80
          type: integer
        path:
          description: |
            The path to be used in requests to the upstream server.
          example: /some_api
          type: string
        connect_timeout:
          default: 6000
          description: The timeout in milliseconds for establishing a connection to
            the upstream server.
          example: 6000
          type: integer
        write_timeout:
          default: 6000
          description: |
            The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Default: `60000`.
          example: 6000
          type: integer
        read_timeout:
          default: 6000
          description: |
            The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Default: `60000`.
          example: 6000
          type: integer
        tags:
          description: |
            An optional set of strings associated with the service for grouping and filtering.
          items:
            example: user-level
            type: string
          type: array
        client_certificate:
          $ref: '#/components/schemas/create_service_request_client_certificate'
        tls_verify:
          default: true
          description: |
            Whether to enable verification of upstream server TLS certificate. If set to null, then the Nginx default is respected.
          type: boolean
        tls_verify_depth:
          description: |
            Maximum depth of chain while verifying Upstream server's TLS certificate. If set to null, then the Nginx default is respected. Default: null.
          example: respected
          nullable: true
          type: string
        ca_certificates:
          description: "Array of CA Certificate object UUIDs that are used to build\
            \ the trust store while verifying upstream server's TLS certificate. If\
            \ set to null when Nginx default is respected. \nWith form-encoded, the\
            \ notation is `ca_certificates[]=4e3ad2e4-0bc4-4638-8e34-c84a417ba39b&ca_certificates[]=51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515`.\
            \ With JSON, use an Array.\n"
          items:
            example: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
            type: string
          type: array
        enabled:
          default: true
          description: |
            Whether the service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
          type: boolean
      required:
      - enabled
      - host
      - port
      - protocol
      type: object
      x-examples:
        Example 1:
          id: 9748f662-7711-4a90-8186-dc02f10eb0f5
          created_at: 1422386534
          updated_at: 1422386534
          name: my-service
          retries: 5
          protocol: http
          host: example.com
          port: 80
          path: /some_api
          connect_timeout: 60000
          write_timeout: 60000
          read_timeout: 60000
          tags:
          - user-level
          - low-priority
          client_certificate:
            id: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
          tls_verify: true
          ca_certificates:
          - 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
          - 51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515
          enabled: true
    list_upstream_200_response:
      example:
        data:
        - algorithm: round-robin
          hash_fallback: none
          hash_on: none
          hash_on_cookie_path: /
          healthchecks:
            active:
              concurrency: 10
              healthy:
                http_statuses:
                - 200
                - 302
                interval: 0
                successes: 0
              http_path: /
              https_verify_certificate: true
              timeout: 1
              type: http
              unhealthy:
                http_failures: 0
                http_statuses:
                - 429
                - 404
                - 500
                - 501
                - 502
                - 503
                - 504
                - 505
                interval: 0
                tcp_failures: 0
                timeouts: 0
            passive:
              healthy:
                http_statuses:
                - 200
                - 201
                - 202
                - 203
                - 204
                - 205
                - 206
                - 207
                - 208
                - 226
                - 300
                - 301
                - 302
                - 303
                - 304
                - 305
                - 306
                - 307
                - 308
                successes: 0
              type: http
              unhealthy:
                http_failures: 0
                http_statuses:
                - 429
                - 500
                - 503
                tcp_failures: 0
                timeouts: 0
            threshold: 0
          id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
          name: api.example.internal
          slots: 10000
        - algorithm: round-robin
          hash_fallback: none
          hash_on: none
          hash_on_cookie_path: /
          healthchecks:
            active:
              concurrency: 10
              healthy:
                http_statuses:
                - 200
                - 302
                interval: 0
                successes: 0
              http_path: /
              https_verify_certificate: true
              timeout: 1
              type: http
              unhealthy:
                http_failures: 0
                http_statuses:
                - 429
                - 404
                - 500
                - 501
                - 502
                - 503
                - 504
                - 505
                interval: 0
                tcp_failures: 0
                timeouts: 0
            passive:
              healthy:
                http_statuses:
                - 200
                - 201
                - 202
                - 203
                - 204
                - 205
                - 206
                - 207
                - 208
                - 226
                - 300
                - 301
                - 302
                - 303
                - 304
                - 305
                - 306
                - 307
                - 308
                successes: 0
              type: http
              unhealthy:
                http_failures: 0
                http_statuses:
                - 429
                - 500
                - 503
                tcp_failures: 0
                timeouts: 0
            threshold: 0
          id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
          name: api.example.internal
          slots: 10000
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Upstream'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_upstream_request_healthchecks_passive_healthy:
      properties:
        http_statuses:
          default:
          - 200
          - 201
          - 202
          - 203
          - 204
          - 205
          - 206
          - 207
          - 208
          - 226
          - 300
          - 301
          - 302
          - 303
          - 304
          - 305
          - 306
          - 307
          - 308
          description: "An array of HTTP statuses which represent healthiness when\
            \ produced by proxied traffic, as observed by passive health checks. \
            \ With form-encoded, the notation is `http_statuses[]=200&http_statuses[]=201`.\
            \ With JSON, use an array."
          example:
          - 200
          - 201
          - 202
          items:
            enum:
            - 200
            - 201
            - 202
            - 203
            - 204
            - 205
            - 206
            - 207
            - 208
            - 226
            - 300
            - 301
            - 302
            - 303
            - 304
            - 305
            - 306
            - 307
            - 308
            type: integer
          type: array
        successes:
          default: 0
          description: "Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`)\
            \ to consider a target healthy, as observed by passive health checks."
          example: 2
          type: integer
      type: object
    create_upstream_request_healthchecks_passive_unhealthy:
      properties:
        http_statuses:
          default:
          - 429
          - 500
          - 503
          description: "An array of HTTP statuses which represent unhealthiness when\
            \ produced by proxied traffic, as observed by passive health checks. With\
            \ form-encoded, the notation is `http_statuses[]=429&http_statuses[]=500`.\
            \ With JSON, use an array."
          example:
          - 500
          - 503
          items:
            enum:
            - 429
            - 500
            - 503
            type: integer
          type: array
        timeouts:
          default: 0
          description: "Number of timeouts in proxied traffic to consider a target\
            \ unhealthy, as observed by passive health checks."
          example: 1
          type: integer
        http_failures:
          default: 0
          description: "Number of HTTP failures in proxied traffic (as defined by\
            \ `healthchecks.passive.unhealthy.http_statuses`) to consider a target\
            \ unhealthy, as observed by passive health checks."
          example: 3
          type: integer
        tcp_failures:
          default: 0
          description: "Number of TCP connection failures to consider a target unhealthy,\
            \ as observed by passive health checks."
          example: 1
          type: integer
      type: object
    create_upstream_request_healthchecks_passive:
      properties:
        type:
          default: http
          description: "Whether to perform passive health checks interpreting HTTP/HTTPS\
            \ statuses, or just check for TCP connection success. In passive checks,\
            \ http and https options are equivalent. Accepted values are `tcp`, `http`,\
            \ `https`, `grpc`, `grpcs`."
          enum:
          - tcp
          - http
          - https
          - grpc
          - grpcs
          example: tcp
          type: string
        healthy:
          $ref: '#/components/schemas/create_upstream_request_healthchecks_passive_healthy'
        unhealthy:
          $ref: '#/components/schemas/create_upstream_request_healthchecks_passive_unhealthy'
      type: object
    create_upstream_request_healthchecks_active_healthy:
      properties:
        http_statuses:
          default:
          - 200
          - 302
          description: "An array of HTTP statuses to consider a success, indicating\
            \ healthiness, when returned by a probe in active health checks. With\
            \ form-encoded, the notation is `http_statuses[]=200&http_statuses[]=302`.\
            \ With JSON, use an array."
          example:
          - 200
          - 201
          items:
            type: integer
          type: array
        successes:
          default: 0
          description: Number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`)
            to consider a target healthy.
          example: 3
          type: integer
        interval:
          default: 0
          description: Interval between active health checks for healthy targets (in
            seconds). A value of zero indicates that active probes for healthy targets
            should not be performed.
          example: 30
          type: integer
      type: object
    create_upstream_request_healthchecks_active_unhealthy:
      properties:
        http_failures:
          default: 0
          description: Number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`)
            to consider a target unhealthy.
          example: 2
          type: integer
        http_statuses:
          default:
          - 429
          - 404
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          description: "An array of HTTP statuses to consider a failure, indicating\
            \ unhealthiness, when returned by a probe in active health checks. With\
            \ form-encoded, the notation is `http_statuses[]=429&http_statuses[]=404`.\
            \ With JSON, use an array."
          example:
          - 400
          - 404
          items:
            type: integer
          type: array
        timeouts:
          default: 0
          description: Number of timeouts in active probes to consider a target unhealthy.
          example: 2
          type: integer
        tcp_failures:
          default: 0
          description: Number of TCP failures in active probes to consider a target
            unhealthy.
          example: 1
          type: integer
        interval:
          default: 0
          description: Interval between active health checks for unhealthy targets
            (in seconds). A value of zero indicates that active probes for unhealthy
            targets should not be performed.
          example: 10
          type: integer
      type: object
    create_upstream_request_healthchecks_active:
      properties:
        https_verify_certificate:
          type: boolean
        healthy:
          $ref: '#/components/schemas/create_upstream_request_healthchecks_active_healthy'
        unhealthy:
          $ref: '#/components/schemas/create_upstream_request_healthchecks_active_unhealthy'
        type:
          default: http
          description: "Whether to perform active health checks using HTTP or HTTPS,\
            \ or just attempt a TCP connection."
          enum:
          - tcp
          - http
          - https
          - grpc
          - grpcs
          example: https
          type: string
        concurrency:
          default: 10
          description: Number of targets to check concurrently in active health checks.
          example: 5
          type: integer
        headers:
          description: One or more lists of values indexed by header name to use in
            GET HTTP request to run as a probe on active health checks. Values must
            be pre-formatted.
          example:
            x-my-header:
            - foo
            - bar
            x-another-header:
            - bla
          type: object
        timeout:
          default: 1
          description: Socket timeout for active health checks (in seconds).
          example: 5
          type: integer
        http_path:
          default: /
          description: Path to use in GET HTTP request to run as a probe on active
            health checks.
          type: string
        https_sni:
          description: "The hostname to use as an SNI (Server Name Identification)\
            \ when performing active health checks using HTTPS. This is particularly\
            \ useful when Targets are configured using IPs, so that the target host's\
            \ certificate can be verified with the proper SNI."
          type: string
      type: object
    create_upstream_request_healthchecks:
      properties:
        passive:
          $ref: '#/components/schemas/create_upstream_request_healthchecks_passive'
        active:
          $ref: '#/components/schemas/create_upstream_request_healthchecks_active'
        threshold:
          default: 0
          description: The minimum percentage of the upstream's targets' weight that
            must be available for the whole upstream to be considered healthy.
          maximum: 100
          minimum: 0
          type: integer
      type: object
    create_upstream_request_client_certificate:
      description: "If set, the certificate to be used as client certificate while\
        \ TLS handshaking to the upstream server."
      properties:
        id:
          example: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
          type: string
      type: object
    create_upstream_request:
      properties:
        name:
          description: "This is a hostname, which must be equal to the `host` of a\
            \ service."
          example: my-upstream
          type: string
        algorithm:
          default: round-robin
          description: |
            Which load balancing algorithm to use. Accepted values are: `"consistent-hashing"`, `"least-connections"`,` "round-robin"`. Default: `"round-robin"`.
          enum:
          - consistent-hashing
          - least-connections
          - round-robin
          - latency
          example: round-robin
          type: string
        hash_on:
          default: none
          description: What to use as hashing input. Using none results in a weighted-round-robin
            scheme with no hashing
          enum:
          - none
          - consumer
          - ip
          - cookie
          - uri_capture
          - path
          - query_arg
          type: string
        hash_fallback:
          default: none
          description: "What to use as hashing input if the primary hash_on does not\
            \ return a hash (eg. header is missing, or no Consumer identified). Not\
            \ available if hash_on is set to cookie."
          enum:
          - none
          - consumer
          - ip
          - cookie
          - uri_capture
          - path
          - query_arg
          example: none
          type: string
        hash_on_header:
          description: The header name to take the value from as hash input. Only
            required when `hash_on` is set to header.
          example: none
          type: string
        hash_fallback_header:
          default: none
          description: The header name to take the value from as hash input. Only
            required when hash_fallback is set to header.
          example: none
          type: string
        hash_on_cookie:
          description: "The cookie name to take the value from as hash input. Only\
            \ required when `hash_on` or `hash_fallback` is set to `cookie`. If the\
            \ specified cookie is not in the request, Kong will generate a value and\
            \ set the cookie in the response."
          example: none
          type: string
        hash_on_cookie_path:
          default: /
          description: The cookie path to set in the response headers. Only required
            when `hash_on` or `hash_fallback` is set to `cookie`.
          example: /
          type: string
        hash_on_query_arg:
          description: The name of the query string argument to take the value from
            as hash input. Only required when `hash_on` is set to `query_arg`.
          example: hash_value
          type: string
        hash_fallback_query_arg:
          description: The name of the query string argument to take the value from
            as hash input. Only required when `hash_fallback` is set to `query_arg`.
          example: hash_value
          type: string
        hash_on_uri_capture:
          description: The name of the route URI capture to take the value from as
            hash input. Only required when `hash_on` is set to `uri_capture`.
          example: hash_value
          type: string
        hash_fallback_uri_capture:
          description: The name of the route URI capture to take the value from as
            hash input. Only required when `hash_fallback` is set to `uri_capture`.
          example: hash_value
          type: string
        slots:
          default: 10000
          description: "The number of slots in the load balancer algorithm. If the\
            \ algorithm is set to `round-robin`, this setting determines the maximum\
            \ number of slots. If the algorithm is set to `consistent-hashing`, this\
            \ setting determines the actual number of slots in the algorithm. Accepts\
            \ an integer in the range 10-65536."
          example: 5000
          maximum: 65536
          minimum: 10
          type: integer
        healthchecks:
          $ref: '#/components/schemas/create_upstream_request_healthchecks'
        tags:
          description: An optional set of strings associated with the Upstream for
            grouping and filtering.
          example:
          - user-level
          - low-priority
          items:
            type: string
          type: array
        host_header:
          description: The hostname to be used as Host header when proxying requests
            through Kong.
          type: string
        client_certificate:
          $ref: '#/components/schemas/create_upstream_request_client_certificate'
        use_srv_name:
          description: "If set, the balancer will use SRV hostname(if DNS Answer has\
            \ SRV record) as the proxy upstream Host."
          example: false
          type: boolean
      required:
      - name
      type: object
      x-examples:
        Example 1:
          id: 58c8ccbb-eafb-4566-991f-2ed4f678fa70
          created_at: 1422386534
          name: my-upstream
          algorithm: round-robin
          hash_on: none
          hash_fallback: none
          hash_on_cookie_path: /
          slots: 10000
          healthchecks:
            passive:
              type: http
              healthy:
                http_statuses:
                - 200
                - 201
                - 202
                - 203
                - 204
                - 205
                - 206
                - 207
                - 208
                - 226
                - 300
                - 301
                - 302
                - 303
                - 304
                - 305
                - 306
                - 307
                - 308
                successes: 0
              unhealthy:
                http_statuses:
                - 429
                - 500
                - 503
                timeouts: 0
                http_failures: 0
                tcp_failures: 0
            active:
              https_verify_certificate: true
              healthy:
                http_statuses:
                - 200
                - 302
                successes: 0
                interval: 0
              unhealthy:
                http_failures: 0
                http_statuses:
                - 429
                - 404
                - 500
                - 501
                - 502
                - 503
                - 504
                - 505
                timeouts: 0
                tcp_failures: 0
                interval: 0
              type: http
              concurrency: 10
              headers:
              - x-my-header:
                - foo
                - bar
                x-another-header:
                - bla
              timeout: 1
              http_path: /
              https_sni: example.com
            threshold: 0
          tags:
          - user-level
          - low-priority
          host_header: example.com
          client_certificate:
            id: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
          use_srv_name: false
    list_targets_for_upstream_200_response:
      example:
        data:
        - id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
          target: 203.0.113.42
          upstream:
            id: 5f1d7e76-2fed-4806-a6af-869984f025cb
          weight: 100
        - id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
          target: 203.0.113.42
          upstream:
            id: 5f1d7e76-2fed-4806-a6af-869984f025cb
          weight: 100
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Target'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_target_for_upstream_request:
      properties:
        target:
          default: example.com:8000
          description: The target for the upstream
          type: string
        weight:
          default: 100
          description: "The weight this target gets within the upstream loadbalancer\
            \ (`0`-`65535`). If the hostname resolves to an SRV record, the `weight`\
            \ value will be overridden by the value from the DNS record."
          maximum: 65535
          minimum: 0
          type: integer
        tags:
          description: An optional set of strings associated with the Target for grouping
            and filtering.
          items:
            type: string
          type: array
      type: object
      x-examples:
        Example 1:
          upstream:
            id: bdab0e47-4e37-4f0b-8fd0-87d95cc4addc
          target: example.com:8000
          weight: 100
          tags:
          - user-level
          - low-priority
    list_vault_200_response:
      example:
        data:
        - config:
            prefix: vaults.config.resurrect_ttl
          description: environment variable based vault
          id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
          name: env
          tags:
          - foo
          - bar
        - config:
            prefix: vaults.config.resurrect_ttl
          description: environment variable based vault
          id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
          name: env
          tags:
          - foo
          - bar
        offset: offset
      properties:
        data:
          items:
            $ref: '#/components/schemas/Vault'
          type: array
        offset:
          description: Offset is used to paginate through the API. Provide this value
            to the next list operation to fetch the next page
          type: string
    create_vault_request_config:
      description: |
        The configuration properties for the Vault which can be found on the vaults' documentation page.
      properties:
        prefix:
          example: SSL_
          type: string
      type: object
    create_vault_request:
      properties:
        prefix:
          description: |
            The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.
          example: env
          type: string
        name:
          description: |
            The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.
          example: env
          type: string
        description:
          description: |
            The description of the Vault object.
          example: This vault is used to retrieve redis database access credentials
          type: string
        config:
          $ref: '#/components/schemas/create_vault_request_config'
        tags:
          description: |
            An optional set of strings associated with the Vault for grouping and filtering.
          items:
            type: string
          type: array
      type: object
      x-examples:
        Example 1:
          prefix: env
          name: env
          description: This vault is used to retrieve redis database access credentials
          config:
            prefix: SSL_
          tags:
          - database-credentials
          - data-plane
    get_endpoints_200_response:
      example:
        data:
        - data
        - data
      properties:
        data:
          items:
            type: string
          type: array
      type: object
      x-examples:
        Example 1:
          data:
          - /
          - /acls
          - "/acls/{acls}"
          - "/acls/{acls}/consumer"
          - /acme
          - /acme/certificates
          - "/acme/certificates/{certificates}"
          - /acme_storage
          - "/acme_storage/{acme_storage}"
          - /auth
          - /basic-auths
          - "/basic-auths/{basicauth_credentials}"
          - "/basic-auths/{basicauth_credentials}/consumer"
          - /ca_certificates
          - "/ca_certificates/{ca_certificates}"
          - "/ca_certificates/{ca_certificates}/mtls_auth_credentials"
          - "/ca_certificates/{ca_certificates}/mtls_auth_credentials/{mtls_auth_credentials}"
          - /cache
          - "/cache/{key}"
          - /certificates
          - "/certificates/{certificates}"
          - "/certificates/{certificates}/services"
          - "/certificates/{certificates}/services/{services}"
          - "/certificates/{certificates}/snis"
          - "/certificates/{certificates}/snis/{snis}"
          - "/certificates/{certificates}/upstreams"
          - "/certificates/{certificates}/upstreams/{upstreams}"
          - /clustering/data-planes
          - /clustering/status
          - /config
          - /consumers
          - "/consumers/{consumers}"
          - "/consumers/{consumers}/acls"
          - "/consumers/{consumers}/acls/{acls}"
          - "/consumers/{consumers}/admins"
          - "/consumers/{consumers}/admins/{admins}"
          - "/consumers/{consumers}/applications"
          - "/consumers/{consumers}/applications/{applications}"
          - "/consumers/{consumers}/basic-auth"
          - "/consumers/{consumers}/basic-auth/{basicauth_credentials}"
          - "/consumers/{consumers}/developers"
          - "/consumers/{consumers}/developers/{developers}"
          - "/consumers/{consumers}/hmac-auth"
          - "/consumers/{consumers}/hmac-auth/{hmacauth_credentials}"
          - "/consumers/{consumers}/jwt"
          - "/consumers/{consumers}/jwt/{jwt_secrets}"
          - "/consumers/{consumers}/key-auth"
          - "/consumers/{consumers}/key-auth/{keyauth_credentials}"
          - "/consumers/{consumers}/key-auth-enc"
          - "/consumers/{consumers}/key-auth-enc/{keyauth_enc_credentials}"
          - "/consumers/{consumers}/login_attempts"
          - "/consumers/{consumers}/login_attempts/{login_attempts}"
          - "/consumers/{consumers}/mtls-auth"
          - "/consumers/{consumers}/mtls-auth/{mtls_auth_credentials}"
          - "/consumers/{consumers}/mtls_auth_credentials"
          - "/consumers/{consumers}/mtls_auth_credentials/{mtls_auth_credentials}"
          - "/consumers/{consumers}/oauth2"
          - "/consumers/{consumers}/oauth2/{oauth2_credentials}"
          - "/consumers/{consumers}/plugins"
          - "/consumers/{consumers}/plugins/{plugins}"
          - "/debug/cluster/log-level/{log_level}"
          - /debug/node/log-level
          - "/debug/node/log-level/{log_level}"
          - /debug/profiling/cpu
          - /debug/profiling/gc-snapshot
          - /debug/profiling/memory
          - /degraphql_routes
          - "/degraphql_routes/{degraphql_routes}"
          - "/degraphql_routes/{degraphql_routes}/service"
          - /endpoints
          - /entities/migrate
          - /event-hooks
          - /event-hooks/sources
          - "/event-hooks/sources/{source}"
          - "/event-hooks/sources/{source}/{event}"
          - "/event-hooks/{event_hooks}"
          - "/event-hooks/{event_hooks}/ping"
          - "/event-hooks/{event_hooks}/test"
          - /files
          - /files/*
          - /files/partials/*
          - "/files/{files}"
          - /filter-chains
          - "/filter-chains/{filter_chains}"
          - "/filter-chains/{filter_chains}/route"
          - "/filter-chains/{filter_chains}/service"
          - /graphql-proxy-cache-advanced
          - "/graphql-proxy-cache-advanced/{cache_key}"
          - "/graphql-proxy-cache-advanced/{plugin_id}/caches/{cache_key}"
          - /graphql-rate-limiting-advanced/costs
          - "/graphql-rate-limiting-advanced/costs/{graphql_ratelimiting_advanced_cost_decoration}"
          - /graphql_ratelimiting_advanced_cost_decoration
          - "/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}"
          - "/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}/service"
          - /groups
          - "/groups/{groups}"
          - "/groups/{groups}/roles"
          - /hmac-auths
          - "/hmac-auths/{hmacauth_credentials}"
          - "/hmac-auths/{hmacauth_credentials}/consumer"
          - /jwt-signer/jwks
          - "/jwt-signer/jwks/{jwt_signer_jwks}"
          - "/jwt-signer/jwks/{jwt_signer_jwks}/rotate"
          - /jwts
          - "/jwts/{jwt_secrets}"
          - "/jwts/{jwt_secrets}/consumer"
          - /key-auths
          - "/key-auths/{keyauth_credentials}"
          - "/key-auths/{keyauth_credentials}/consumer"
          - /key-auths-enc
          - "/key-auths-enc/{keyauth_enc_credentials}"
          - "/key-auths-enc/{keyauth_enc_credentials}/consumer"
          - /key-sets
          - "/key-sets/{key_sets}"
          - "/key-sets/{key_sets}/keys"
          - "/key-sets/{key_sets}/keys/{keys}"
          - /keys
          - "/keys/{keys}"
          - "/keys/{keys}/set"
          - /konnect_applications
          - "/konnect_applications/{konnect_applications}"
          - /license/report
          - /licenses
          - "/licenses/{licenses}"
          - /login_attempts
          - "/login_attempts/{login_attempts}"
          - "/login_attempts/{login_attempts}/consumer"
          - /metrics
          - /mtls-auths
          - "/mtls-auths/{mtls_auth_credentials}/consumer"
          - /mtls_auth_credentials
          - "/mtls_auth_credentials/{mtls_auth_credentials}"
          - "/mtls_auth_credentials/{mtls_auth_credentials}/ca_certificate"
          - "/mtls_auth_credentials/{mtls_auth_credentials}/consumer"
          - /oauth2
          - "/oauth2/{oauth2_credentials}"
          - "/oauth2/{oauth2_credentials}/consumer"
          - "/oauth2/{oauth2_credentials}/oauth2_tokens"
          - "/oauth2/{oauth2_credentials}/oauth2_tokens/{oauth2_tokens}"
          - /oauth2_tokens
          - "/oauth2_tokens/{oauth2_tokens}"
          - "/oauth2_tokens/{oauth2_tokens}/credential"
          - "/oauth2_tokens/{oauth2_tokens}/service"
          - /openid-connect/issuers
          - "/openid-connect/issuers/{oic_issuers}"
          - /openid-connect/jwks
          - /plugins
          - /plugins/enabled
          - "/plugins/schema/{name}"
          - "/plugins/{plugins}"
          - "/plugins/{plugins}/consumer"
          - "/plugins/{plugins}/route"
          - "/plugins/{plugins}/service"
          - /proxy-cache
          - "/proxy-cache/{cache_key}"
          - "/proxy-cache/{plugin_id}/caches/{cache_key}"
          - /proxy-cache-advanced
          - "/proxy-cache-advanced/{cache_key}"
          - "/proxy-cache-advanced/{plugin_id}/caches/{cache_key}"
          - /routes
          - "/routes/{routes}"
          - "/routes/{routes}/filter-chains"
          - "/routes/{routes}/filter-chains/{filter_chains}"
          - "/routes/{routes}/filters/all"
          - "/routes/{routes}/filters/disabled"
          - "/routes/{routes}/filters/enabled"
          - "/routes/{routes}/plugins"
          - "/routes/{routes}/plugins/{plugins}"
          - "/routes/{routes}/service"
          - "/schemas/filters/{name}"
          - /schemas/plugins/validate
          - "/schemas/plugins/{name}"
          - "/schemas/{db_entity_name}/validate"
          - "/schemas/{name}"
          - /services
          - "/services/{services}"
          - "/services/{services}/application_instances"
          - "/services/{services}/application_instances/{application_instances}"
          - "/services/{services}/applications"
          - "/services/{services}/client_certificate"
          - "/services/{services}/degraphql/routes"
          - "/services/{services}/degraphql/routes/{degraphql_routes}"
          - "/services/{services}/degraphql_routes"
          - "/services/{services}/degraphql_routes/{degraphql_routes}"
          - "/services/{services}/filter-chains"
          - "/services/{services}/filter-chains/{filter_chains}"
          - "/services/{services}/graphql-rate-limiting-advanced/costs"
          - "/services/{services}/graphql_ratelimiting_advanced_cost_decoration"
          - "/services/{services}/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}"
          - "/services/{services}/oauth2_tokens"
          - "/services/{services}/oauth2_tokens/{oauth2_tokens}"
          - "/services/{services}/plugins"
          - "/services/{services}/plugins/{plugins}"
          - "/services/{services}/routes"
          - "/services/{services}/routes/{routes}"
          - /sessions
          - "/sessions/{sessions}"
          - /snis
          - "/snis/{snis}"
          - "/snis/{snis}/certificate"
          - /status
          - /tags
          - "/tags/{tags}"
          - /targets
          - "/targets/{targets}"
          - "/targets/{targets}/upstream"
          - /timers
          - /upstreams
          - "/upstreams/{upstreams}"
          - "/upstreams/{upstreams}/client_certificate"
          - "/upstreams/{upstreams}/health"
          - "/upstreams/{upstreams}/targets"
          - "/upstreams/{upstreams}/targets/all"
          - "/upstreams/{upstreams}/targets/{targets}"
          - "/upstreams/{upstreams}/targets/{targets}/healthy"
          - "/upstreams/{upstreams}/targets/{targets}/unhealthy"
          - "/upstreams/{upstreams}/targets/{targets}/{address}/healthy"
          - "/upstreams/{upstreams}/targets/{targets}/{address}/unhealthy"
          - /userinfo
          - /vault-auth
          - "/vault-auth/{vault_auth_vaults}"
          - "/vault-auth/{vault}/credentials"
          - "/vault-auth/{vault}/credentials/token/{access_token}"
          - "/vault-auth/{vault}/credentials/{consumer}"
          - /vaults
          - "/vaults/{vaults}"
          - /vitals/
          - /vitals/cluster
          - /vitals/cluster/status_codes
          - "/vitals/consumers/{consumer_id}/cluster"
          - /vitals/nodes/
          - "/vitals/nodes/{node_id}"
          - "/vitals/reports/{entity_type}"
          - /vitals/status_code_classes
          - /vitals/status_codes/by_consumer
          - /vitals/status_codes/by_consumer_and_route
          - /vitals/status_codes/by_route
          - /vitals/status_codes/by_service
    get_schemas_entity_200_response_fields_inner_id:
      description: A value of a schema
      example:
        auto: true
        type: type
        uuid: true
      properties:
        auto:
          description: A value of a schema
          type: boolean
        type:
          description: A value of a schema
          type: string
        uuid:
          description: A value of a schema
          type: boolean
      type: object
    get_schemas_entity_200_response_fields_inner:
      example:
        id:
          auto: true
          type: type
          uuid: true
      properties:
        id:
          $ref: '#/components/schemas/get_schemas_entity_200_response_fields_inner_id'
      type: object
    get_schemas_entity_200_response:
      example:
        fields:
        - id:
            auto: true
            type: type
            uuid: true
        - id:
            auto: true
            type: type
            uuid: true
      properties:
        fields:
          description: A value of a schema
          items:
            $ref: '#/components/schemas/get_schemas_entity_200_response_fields_inner'
          type: array
      type: object
      x-examples:
        Example 1:
          fields:
          - id:
              auto: true
              type: string
              uuid: true
    post_schemas_entity_validate_200_response:
      example:
        Message: schema validation successful
      properties:
        Message:
          description: A success message
          example: schema validation successful
          type: string
      type: object
    post_schemas_plugins_validate_200_response:
      example:
        message: schema validation successful
      properties:
        message:
          description: A successful message
          example: schema validation successful
          type: string
      type: object
      x-examples:
        Example 1:
          message: schema validation successful
    get_timers_200_response_stats_sys:
      description: List of the number of different type of timers
      example:
        running: 0
        total: 7
        waiting: 7
        pending: 0
        runs: 7
      properties:
        total:
          default: 7
          description: The total number of timers (running + pending + waiting)
          example: 7
          type: integer
        waiting:
          default: 7
          description: The number of unexpired timers
          example: 7
          type: integer
        runs:
          default: 7
          description: The total number of runs for the timers
          example: 7
          type: integer
        pending:
          default: 0
          description: The number of pending timers
          example: 0
          type: integer
        running:
          default: 0
          description: The number of running timers
          example: 0
          type: integer
      type: object
    get_timers_200_response_stats_flamegraph:
      description: String-encoded timer-related flamegraph data
      example:
        running: |
          @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
        pending: |
          @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
        elapsed_time: |
          @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 17
      properties:
        pending:
          description: The number of pending timers for the flamegraph
          example: |
            @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
          type: string
        running:
          description: The number of running timers for the flamegraph
          example: |
            @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
          type: string
        elapsed_time:
          description: The elapsed time for the flamegraph
          example: |
            @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 17
          type: string
      type: object
    get_timers_200_response_stats_timers_meta:
      description: Program callstack of created timers
      example:
        name: '@/build/luarocks/share/lua/5.1/resty/counter.lua:71:new()'
      properties:
        name:
          description: The name of the timer's metadata
          example: '@/build/luarocks/share/lua/5.1/resty/counter.lua:71:new()'
          type: string
      type: object
    get_timers_200_response_stats_timers:
      description: Timer statistics for the worker
      example:
        meta:
          name: '@/build/luarocks/share/lua/5.1/resty/counter.lua:71:new()'
      properties:
        meta:
          $ref: '#/components/schemas/get_timers_200_response_stats_timers_meta'
      type: object
    get_timers_200_response_stats:
      description: Statistics about the worker
      example:
        timers:
          meta:
            name: '@/build/luarocks/share/lua/5.1/resty/counter.lua:71:new()'
        sys:
          running: 0
          total: 7
          waiting: 7
          pending: 0
          runs: 7
        flamegraph:
          running: |
            @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
          pending: |
            @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
          elapsed_time: |
            @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 17
      properties:
        sys:
          $ref: '#/components/schemas/get_timers_200_response_stats_sys'
        flamegraph:
          $ref: '#/components/schemas/get_timers_200_response_stats_flamegraph'
        timers:
          $ref: '#/components/schemas/get_timers_200_response_stats_timers'
      type: object
    get_timers_200_response_worker:
      example:
        count: 6
        id: 0
      properties:
        id:
          description: The ordinal number of the current Nginx worker processes (starting
            from number 0).
          type: integer
        count:
          description: The total number of the Nginx worker processes.
          type: integer
      type: object
    get_timers_200_response:
      example:
        stats:
          timers:
            meta:
              name: '@/build/luarocks/share/lua/5.1/resty/counter.lua:71:new()'
          sys:
            running: 0
            total: 7
            waiting: 7
            pending: 0
            runs: 7
          flamegraph:
            running: |
              @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
            pending: |
              @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
            elapsed_time: |
              @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 17
        worker:
          count: 6
          id: 0
      properties:
        stats:
          $ref: '#/components/schemas/get_timers_200_response_stats'
        worker:
          $ref: '#/components/schemas/get_timers_200_response_worker'
      type: object
      x-examples:
        Example 1:
          stats:
            sys:
              total: 13
              waiting: 12
              runs: 6771
              pending: 0
              running: 1
            flamegraph:
              pending: ""
              running: ""
              elapsed_time: ""
            timers:
              router-rebuild:
                is_running: false
                name: router-rebuild
                stats:
                  runs: 464
                  elapsed_time:
                    avg: 0
                    min: 9999999
                    max: -1
                    variance: 0
                  finish: 464
                  last_err_msg: ""
                meta:
                  callstack: debug off
                  name: debug off
              unix_timestamp=1681492692484.000000;counter=7:meta=debug off:
                is_running: false
                name: unix_timestamp=1681492692484.000000;counter=7:meta=debug off
                stats:
                  runs: 3
                  elapsed_time:
                    avg: 0
                    min: 9999999
                    max: -1
                    variance: 0
                  finish: 3
                  last_err_msg: ""
                meta:
                  callstack: debug off
                  name: debug off
          worker:
            id: 0
            count: 5
    get_status_200_response_memory_lua_shared_dicts_kong_core_db_cache:
      example:
        allocated_slabs: 128.00 MiB
        capacity: 128.00 MiB
      properties:
        capacity:
          description: Memory capacity
          example: 128.00 MiB
          type: string
        allocated_slabs:
          description: Total allocated memory
          example: 128.00 MiB
          type: string
      type: object
    get_status_200_response_memory_lua_shared_dicts:
      description: "An array of information about dictionaries that are shared with\
        \ all workers in a Kong node, where each array node contains how much memory\
        \ is dedicated for the specific shared dictionary (capacity) and how much\
        \ of said memory is in use (allocated_slabs)."
      example:
        kong_core_db_cache:
          allocated_slabs: 128.00 MiB
          capacity: 128.00 MiB
      properties:
        kong_core_db_cache:
          $ref: '#/components/schemas/get_status_200_response_memory_lua_shared_dicts_kong_core_db_cache'
      type: object
    get_status_200_response_memory_workers_lua_vms_inner:
      example:
        http_allocated_gc: http_allocated_gc
        pid: 18478
      properties:
        http_allocated_gc:
          description: |
            HTTP submodule's Lua virtual machine's memory usage information, as reported by
          type: string
        pid:
          description: worker's process identification number.
          example: 18478
          type: integer
      type: object
    get_status_200_response_memory:
      description: Metrics about the memory usage.
      example:
        workers_lua_vms:
        - http_allocated_gc: http_allocated_gc
          pid: 18478
        - http_allocated_gc: http_allocated_gc
          pid: 18478
        lua_shared_dicts:
          kong_core_db_cache:
            allocated_slabs: 128.00 MiB
            capacity: 128.00 MiB
      properties:
        lua_shared_dicts:
          $ref: '#/components/schemas/get_status_200_response_memory_lua_shared_dicts'
        workers_lua_vms:
          description: "An array with all workers of the Kong node, each entry contains\
            \ a `http_allocated_gc` string and a `pid`."
          items:
            $ref: '#/components/schemas/get_status_200_response_memory_workers_lua_vms_inner'
          type: array
      type: object
    get_status_200_response_database:
      description: Metrics about the database
      example:
        reachable: true
      properties:
        reachable:
          description: A boolean value reflecting the state of the database connection.
            Please note that this flag does not reflect the health of the database
            itself.
          type: boolean
      type: object
    get_status_200_response_server:
      description: Metrics about the nginx HTTP/S server
      example:
        connections_writing: 1
        connections_handled: 1
        connections_accepted: 1
        connections_waiting: 1
        connections_active: 1
        total_requests: 1
        connections_reading: 3
      properties:
        connections_reading:
          description: The current number of connections where Kong is reading the
            request header.
          example: 3
          type: integer
        connections_writing:
          description: The current number of connections where nginx is writing the
            response back to the client.
          example: 1
          type: integer
        total_requests:
          description: The total number of client requests.
          example: 1
          type: integer
        connections_waiting:
          description: The current number of idle client connections waiting for a
            request.
          example: 1
          type: integer
        connections_handled:
          description: "The total number of handled connections. Generally, the parameter\
            \ value is the same as accepts unless some resource limits have been reached."
          example: 1
          type: integer
        connections_active:
          description: The current number of active client connections including Waiting
            connections.
          example: 1
          type: integer
        connections_accepted:
          description: The total number of accepted client connections.
          example: 1
          type: integer
      type: object
    get_status_200_response:
      example:
        server:
          connections_writing: 1
          connections_handled: 1
          connections_accepted: 1
          connections_waiting: 1
          connections_active: 1
          total_requests: 1
          connections_reading: 3
        database:
          reachable: true
        memory:
          workers_lua_vms:
          - http_allocated_gc: http_allocated_gc
            pid: 18478
          - http_allocated_gc: http_allocated_gc
            pid: 18478
          lua_shared_dicts:
            kong_core_db_cache:
              allocated_slabs: 128.00 MiB
              capacity: 128.00 MiB
      properties:
        memory:
          $ref: '#/components/schemas/get_status_200_response_memory'
        database:
          $ref: '#/components/schemas/get_status_200_response_database'
        server:
          $ref: '#/components/schemas/get_status_200_response_server'
      type: object
      x-examples:
        Example 1:
          memory:
            lua_shared_dicts:
              kong_core_db_cache:
                capacity: 128.00 MiB
                allocated_slabs: 0.76 MiB
              kong_core_db_cache_miss:
                capacity: 12.00 MiB
                allocated_slabs: 0.08 MiB
              kong_db_cache:
                capacity: 128.00 MiB
                allocated_slabs: 0.78 MiB
              kong_db_cache_miss:
                capacity: 12.00 MiB
                allocated_slabs: 0.08 MiB
              kong_vitals_counters:
                capacity: 50.00 MiB
                allocated_slabs: 0.30 MiB
              kong_vitals_lists:
                capacity: 1.00 MiB
                allocated_slabs: 0.02 MiB
              kong_vitals:
                capacity: 1.00 MiB
                allocated_slabs: 0.02 MiB
              kong_counters:
                capacity: 1.00 MiB
                allocated_slabs: 0.02 MiB
              kong_reports_consumers:
                capacity: 10.00 MiB
                allocated_slabs: 0.07 MiB
              kong_reports_routes:
                capacity: 1.00 MiB
                allocated_slabs: 0.02 MiB
              kong_reports_services:
                capacity: 1.00 MiB
                allocated_slabs: 0.02 MiB
              kong_profiling_state:
                capacity: 1.50 MiB
                allocated_slabs: 0.02 MiB
              prometheus_metrics:
                capacity: 5.00 MiB
                allocated_slabs: 0.04 MiB
              kong:
                capacity: 5.00 MiB
                allocated_slabs: 0.04 MiB
              kong_locks:
                capacity: 8.00 MiB
                allocated_slabs: 0.06 MiB
              kong_healthchecks:
                capacity: 5.00 MiB
                allocated_slabs: 0.04 MiB
              kong_process_events:
                capacity: 5.00 MiB
                allocated_slabs: 0.04 MiB
              kong_cluster_events:
                capacity: 5.00 MiB
                allocated_slabs: 0.04 MiB
              kong_rate_limiting_counters:
                capacity: 12.00 MiB
                allocated_slabs: 0.08 MiB
            workers_lua_vms:
            - http_allocated_gc: 51.92 MiB
              pid: 2323
            - http_allocated_gc: 51.48 MiB
              pid: 2324
            - http_allocated_gc: 51.48 MiB
              pid: 2325
            - http_allocated_gc: 51.48 MiB
              pid: 2326
            - http_allocated_gc: 51.48 MiB
              pid: 2327
          database:
            reachable: true
          server:
            connections_reading: 0
            connections_writing: 6
            total_requests: 28
            connections_waiting: 0
            connections_handled: 15
            connections_active: 6
            connections_accepted: 15
    getDnsStatus_200_response_worker:
      description: Worker information.
      example:
        count: 4
        id: 1
      properties:
        id:
          description: The worker ID.
          example: 1
          type: integer
        count:
          description: The total number of workers.
          example: 4
          type: integer
      type: object
    getDnsStatus_200_response:
      example:
        stats: "{}"
        worker:
          count: 4
          id: 1
      properties:
        worker:
          $ref: '#/components/schemas/getDnsStatus_200_response_worker'
        stats:
          description: DNS stats information (specific details depend on the Kong
            instance).
          type: object
      type: object
    getDnsStatus_501_response:
      example:
        message: not implemented with the legacy DNS client
      properties:
        message:
          description: Message indicating that the endpoint is not implemented with
            the legacy DNS client.
          example: not implemented with the legacy DNS client
          type: string
      type: object
    get_tags_200_response_data_inner:
      example:
        entity_name: services
        tag: example
        entity_id: c87440e1-0496-420b-b06f-dac59544bb6c
      properties:
        entity_name:
          description: The name of the entity that corresponds to a tag
          example: services
          type: string
        entity_id:
          description: The unique ID for the entity that is attached to the tag
          example: c87440e1-0496-420b-b06f-dac59544bb6c
          type: string
        tag:
          description: The tag
          example: example
          type: string
      type: object
    get_tags_200_response:
      example:
        next: /tags/example?offset=1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
        data:
        - entity_name: services
          tag: example
          entity_id: c87440e1-0496-420b-b06f-dac59544bb6c
        - entity_name: services
          tag: example
          entity_id: c87440e1-0496-420b-b06f-dac59544bb6c
        offset: 1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
      properties:
        data:
          items:
            $ref: '#/components/schemas/get_tags_200_response_data_inner'
          type: array
        offset:
          description: Pagination information
          example: 1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
          type: string
        next:
          description: Pagination information
          example: /tags/example?offset=1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9
          type: string
      type: object
      x-examples:
        Example 1:
          data:
          - entity_name: services
            entity_id: acf60b10-125c-4c1a-bffe-6ed55daefba4
            tag: s1
          offset: c47139f3-d780-483d-8a97-17e9adc5a7ab
          next: /tags?offset=c47139f3-d780-483d-8a97-17e9adc5a7ab
    put_debug_cluster_control_planes_nodes_log_level_log_level_200_response:
      example:
        message: log level changed
      properties:
        message:
          description: Response message
          example: log level changed
          type: string
      type: object
      x-examples:
        Example 1:
          message: log level changed
    put_debug_cluster_log_level_log_level_200_response:
      example:
        message: log level changed
      properties:
        message:
          description: A message containing information about the log level
          example: log level changed
          type: string
      type: object
      x-examples:
        Example 1:
          message: log level changed
    get_debug_node_log_level_200_response:
      example:
        message: "log level: debug"
      properties:
        message:
          description: A message containing the current log level of the node.
          example: "log level: debug"
          type: string
      type: object
      x-examples:
        Example 1:
          message: "log level: debug"
    put_debug_node_log_level_log_level_200_response:
      example:
        message: log level changed
      properties:
        message:
          description: A message confirming the log level change
          example: log level changed
          type: string
      type: object
      x-examples:
        Example 1:
          message: log level changed
    post_schemas_vaults_validate_request:
      properties:
        schemaData:
          description: JSON string containing the vault schema data
          type: string
      type: object
    post_schemas_vaults_validate_200_response:
      example:
        validation: true
      properties:
        validation:
          description: Indicates if the schema is valid
          type: boolean
      type: object
    post_filter_chains_request_filters_inner:
      properties:
        name:
          description: "The name of the filter. This name matches the basename of\
            \ the WebAssembly module file: for a filter file called `my-filter.wasm`,\
            \ then filter name will be `my-filter`."
          type: string
        config:
          description: "The configuration for the filter. Proxy-Wasm does not define\
            \ a configuration format, so this field is a raw string, intended to contain\
            \ the configuration in the format expected by the particular filter in\
            \ use."
          type: string
        enabled:
          description: Whether the filter is to be applied.
          type: boolean
      type: object
    post_filter_chains_request_route:
      additionalProperties: false
      description: The route to which this chain is applied. A filter chain must be
        applied to either a single route or a single service.
      properties:
        id:
          type: string
      type: object
    post_filter_chains_request_service:
      additionalProperties: false
      description: The service to which this chain is applied. A filter chain must
        be applied to either a single route or a single service.
      properties:
        id:
          type: string
      type: object
    post_filter_chains_request:
      properties:
        enabled:
          description: Whether the filter chain is applied.
          example: true
          type: boolean
        filters:
          description: An array of filter definitions that will be executed in order.
          items:
            $ref: '#/components/schemas/post_filter_chains_request_filters_inner'
          type: array
        id:
          type: string
        name:
          description: The name of the filter chain.
          example: my-filter-chain
          type: string
        route:
          $ref: '#/components/schemas/post_filter_chains_request_route'
        service:
          $ref: '#/components/schemas/post_filter_chains_request_service'
        tags:
          description: An optional set of strings associated with the Filter Chain
            for grouping and filtering.
          items:
            type: string
          type: array
      type: object
      x-examples:
        Example 1:
          id: ce44eef5-41ed-47f6-baab-f725cecf98c7
          name: my-filter-chain
          enabled: true
          service: 20487393-41ed-47f6-93a8-3407cade2002
          filters:
          - name: go-rate-limiting
            enabled: true
            config: "{ \"minute\": 30 }"
          - name: rust-response-transformer
            enabled: true
            config: "{ \"remove_header\": \"X-Example\" }"
          tags:
          - my-tag
    getDataPlanes_200_response_data_inner_labels:
      description: Metadata labels attached to the data plane.
      example:
        region: region
        deployment: deployment
      properties:
        deployment:
          description: The deployment name.
          type: string
        region:
          description: The region of the data plane.
          type: string
      type: object
    getDataPlanes_200_response_data_inner_cert_details:
      example:
        expiry_timestamp: 5
      properties:
        expiry_timestamp:
          description: Timestamp for when the certificate expires.
          type: integer
      type: object
    getDataPlanes_200_response_data_inner:
      example:
        hostname: hostname
        updated_at: 0
        last_seen: 1
        ip: ip
        sync_status: sync_status
        id: id
        cert_details:
          expiry_timestamp: 5
        version: version
        ttl: 6
        config_hash: config_hash
        labels:
          region: region
          deployment: deployment
      properties:
        ip:
          description: The IP address of the data plane.
          type: string
        updated_at:
          description: Unix timestamp of the last update.
          type: integer
        config_hash:
          description: The hash of the current configuration on the data plane.
          type: string
        sync_status:
          description: The sync status of the data plane.
          type: string
        version:
          description: The version of Kong running on the data plane.
          type: string
        id:
          description: Unique identifier of the data plane.
          type: string
        hostname:
          description: The hostname of the data plane.
          type: string
        ttl:
          description: Time-to-live for the connection.
          type: integer
        last_seen:
          description: Unix timestamp when the data plane was last seen by the control
            plane.
          type: integer
        labels:
          $ref: '#/components/schemas/getDataPlanes_200_response_data_inner_labels'
        cert_details:
          $ref: '#/components/schemas/getDataPlanes_200_response_data_inner_cert_details'
      type: object
    getDataPlanes_200_response:
      example:
        data:
        - hostname: hostname
          updated_at: 0
          last_seen: 1
          ip: ip
          sync_status: sync_status
          id: id
          cert_details:
            expiry_timestamp: 5
          version: version
          ttl: 6
          config_hash: config_hash
          labels:
            region: region
            deployment: deployment
        - hostname: hostname
          updated_at: 0
          last_seen: 1
          ip: ip
          sync_status: sync_status
          id: id
          cert_details:
            expiry_timestamp: 5
          version: version
          ttl: 6
          config_hash: config_hash
          labels:
            region: region
            deployment: deployment
      properties:
        data:
          items:
            $ref: '#/components/schemas/getDataPlanes_200_response_data_inner'
          type: array
      type: object
    getDataPlanes_400_response:
      example:
        message: This endpoint is only available when Kong is running as a control
          plane for the cluster.
      properties:
        message:
          example: This endpoint is only available when Kong is running as a control
            plane for the cluster.
          type: string
      type: object
    getDataPlaneStatus_200_response_value:
      properties:
        config_hash:
          description: Hash of the configuration running on the data plane.
          type: string
        hostname:
          description: Hostname of the data plane.
          type: string
        ip:
          description: The IP address of the data plane.
          type: string
        last_seen:
          description: Unix timestamp of the last interaction between the data plane
            and control plane.
          type: integer
      type: object
    getCacheByKey_200_response:
      example:
        message: message
        ttl: 0
      properties:
        ttl:
          description: Time-to-live (TTL) of the cached entry.
          type: integer
        message:
          description: Cached value or a message.
          type: string
      type: object
    getCacheByKey_404_response:
      example:
        message: Not found
      properties:
        message:
          example: Not found
          type: string
      type: object
    Filter_chain_filters_inner_config:
      description: "The configuration for the filter. Proxy-Wasm does not define a\
        \ configuration format, so this field accepts either a raw string, or a JSON\
        \ object. A raw string is passed uninterpreted to the filter, to be validated\
        \ at request time. If a JSON object is used, there must be a metadata file\
        \ called `my-filter.meta.json` in the same folder as your `my-filter.wasm`\
        \ file. The metadata file must contain an object with a field `\"config_schema\"\
        `, and its value must the JSON Schema for the filter configuration. This schema\
        \ will be used for validating the configuration upon insertion in the filter\
        \ chain, ahead of execution."
      oneOf:
      - type: string
      - type: object
    Filter_chain_filters_inner:
      properties:
        name:
          description: "The name of the filter. This name matches the basename of\
            \ the WebAssembly module file: for a filter file called `my-filter.wasm`,\
            \ then filter name will be `my-filter`."
          type: string
        config:
          $ref: '#/components/schemas/Filter_chain_filters_inner_config'
        enabled:
          description: Whether the filter is to be applied.
          type: boolean
      type: object
    Key_pem:
      description: A keypair in PEM format.
      properties:
        private_key:
          example: '"-----BEGIN"'
          type: string
        public_key:
          example: '"-----BEGIN"'
          type: string
      type: object
    Key_set:
      additionalProperties: false
      description: The id (an UUID) of the key-set with which to associate the key.
      properties:
        id:
          example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
          type: string
      type: object
    Plugin_consumer:
      additionalProperties: false
      description: "If set, the plugin will activate only for requests where the specified\
        \ has been authenticated. (Note that some plugins can not be restricted to\
        \ consumers this way.). Leave unset for the plugin to activate regardless\
        \ of the authenticated Consumer."
      properties:
        id:
          type: string
      type: object
    Plugin_route:
      additionalProperties: false
      description: "If set, the plugin will only activate when receiving requests\
        \ via the specified route. Leave unset for the plugin to activate regardless\
        \ of the route being used."
      properties:
        id:
          type: string
      type: object
    Plugin_service:
      additionalProperties: false
      description: "If set, the plugin will only activate when receiving requests\
        \ via one of the routes belonging to the specified service. Leave unset for\
        \ the plugin to activate regardless of the service being matched."
      properties:
        id:
          type: string
      type: object
    Route_service:
      additionalProperties: false
      description: The service this route is associated to. This is where the route
        proxies traffic to.
      properties:
        id:
          type: string
      type: object
    SNI_certificate:
      additionalProperties: false
      description: The id (a UUID) of the certificate with which to associate the
        SNI hostname. The Certificate must have a valid private key associated with
        it to be used by the SNI object.
      properties:
        id:
          example: 147f5ef0-1ed6-4711-b77f-489262f8bff7
          type: string
      type: object
    Service_client_certificate:
      additionalProperties: false
      description: Certificate to be used as client certificate while TLS handshaking
        to the upstream server.
      properties:
        id:
          type: string
      type: object
    Target_upstream:
      additionalProperties: false
      description: The unique identifier or the name of the upstream for which to
        update the target.
      properties:
        id:
          example: bdab0e47-4e37-4f0b-8fd0-87d95cc4addc
          type: string
      type: object
    Upstream_client_certificate:
      additionalProperties: false
      description: "If set, the certificate to be used as client certificate while\
        \ TLS handshaking to the upstream server."
      properties:
        id:
          type: string
      type: object
    Upstream_healthchecks_active_healthy:
      properties:
        http_statuses:
          default:
          - 200
          - 302
          items:
            type: integer
          type: array
        interval:
          default: 0
          type: number
        successes:
          default: 0
          type: integer
      type: object
    Upstream_healthchecks_active_unhealthy:
      properties:
        http_failures:
          default: 0
          type: integer
        http_statuses:
          default:
          - 429
          - 404
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          items:
            type: integer
          type: array
        interval:
          default: 0
          type: number
        tcp_failures:
          default: 0
          type: integer
        timeouts:
          default: 0
          type: integer
      type: object
    Upstream_healthchecks_active:
      properties:
        concurrency:
          default: 10
          type: integer
        headers:
          type: object
        healthy:
          $ref: '#/components/schemas/Upstream_healthchecks_active_healthy'
        http_path:
          default: /
          type: string
        https_sni:
          type: string
        https_verify_certificate:
          default: true
          type: boolean
        timeout:
          default: 1
          type: number
        type:
          default: http
          type: string
        unhealthy:
          $ref: '#/components/schemas/Upstream_healthchecks_active_unhealthy'
      type: object
    Upstream_healthchecks_passive_healthy:
      properties:
        http_statuses:
          default:
          - 200
          - 201
          - 202
          - 203
          - 204
          - 205
          - 206
          - 207
          - 208
          - 226
          - 300
          - 301
          - 302
          - 303
          - 304
          - 305
          - 306
          - 307
          - 308
          items:
            type: integer
          type: array
        successes:
          default: 0
          type: integer
      type: object
    Upstream_healthchecks_passive_unhealthy:
      properties:
        http_failures:
          default: 0
          type: integer
        http_statuses:
          default:
          - 429
          - 500
          - 503
          items:
            type: integer
          type: array
        tcp_failures:
          default: 0
          type: integer
        timeouts:
          default: 0
          type: integer
      type: object
    Upstream_healthchecks_passive:
      properties:
        healthy:
          $ref: '#/components/schemas/Upstream_healthchecks_passive_healthy'
        type:
          default: http
          type: string
        unhealthy:
          $ref: '#/components/schemas/Upstream_healthchecks_passive_unhealthy'
      type: object
    Upstream_healthchecks:
      properties:
        active:
          $ref: '#/components/schemas/Upstream_healthchecks_active'
        passive:
          $ref: '#/components/schemas/Upstream_healthchecks_passive'
        threshold:
          default: 0
          type: number
      type: object
    Vault_config:
      description: "The configuration properties for the Vault which can be found\
        \ on the [vaults' documentation page](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/advanced-usage/)."
      properties:
        prefix:
          description: The unique prefix (or identifier) for this Vault configuration.
            The prefix is used to load the right Vault configuration and implementation
            when referencing secrets with the other entities.
          enum:
          - vaults.config.resurrect_ttl
          - vaults.config.neg_ttl
          - vaults.config.ttl
          required:
          - prefix
          type: string
      type: object
    Filter_chains_filters_inner:
      example:
        name: go-rate-limiting
        config: "{ \\\"minute\\\": 30 }"
        enabled: true
      properties:
        name:
          description: |
            The name of the filter
          example: go-rate-limiting
          type: string
        enabled:
          description: Enable the filter
          type: boolean
        config:
          description: configuration filter headers
          example: "{ \\\"minute\\\": 30 }"
          type: string
      type: object
# START OF CUSTOM SECTION
    ConsumerGroupResponse:
      title: ConsumerGroup Response
      type: object
      description: Paginated list of ConsumerGroup entities
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConsumerGroup'
        offset:
          type: string
        next:
          type: string
    ConsumerGroup:
      title: ConsumerGroup Entity
      type: object
      description: The ConsumerGroup object represents a consumerGroup.
      properties:
        id:
          type: string
        created_at:
          type: integer
        group:
          type: string
        consumer:
          $ref: '#/components/schemas/Consumer'
        tags:
          $ref: '#/components/schemas/Tags'
    Tags:
      title: Tags
      type: array
      items:
        x-examples: {}
        description: Individual tag value
        pattern: "^[A-Za-z-_\\.~]+$"
        title: Tag
        type: string
      description: List of tag values
      x-examples: {}
    ConsumerGroupRequest:
      title: Consumer Group Request
      type: object
      description: Create / Update Request Entity
      properties:
        group:
          type: string
      x-examples:
        Request:
          group: my-group
# END OF CUSTOM SECTION
