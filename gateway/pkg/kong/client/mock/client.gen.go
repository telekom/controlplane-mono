// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mock/client.gen.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kong "github.com/telekom/controlplane-mono/gateway/pkg/kong/api"
	client "github.com/telekom/controlplane-mono/gateway/pkg/kong/client"
	gomock "go.uber.org/mock/gomock"
)

// MockKongClient is a mock of KongClient interface.
type MockKongClient struct {
	ctrl     *gomock.Controller
	recorder *MockKongClientMockRecorder
	isgomock struct{}
}

// MockKongClientMockRecorder is the mock recorder for MockKongClient.
type MockKongClientMockRecorder struct {
	mock *MockKongClient
}

// NewMockKongClient creates a new mock instance.
func NewMockKongClient(ctrl *gomock.Controller) *MockKongClient {
	mock := &MockKongClient{ctrl: ctrl}
	mock.recorder = &MockKongClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKongClient) EXPECT() *MockKongClientMockRecorder {
	return m.recorder
}

// CleanupPlugins mocks base method.
func (m *MockKongClient) CleanupPlugins(ctx context.Context, route client.CustomRoute, plugins []client.CustomPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupPlugins", ctx, route, plugins)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupPlugins indicates an expected call of CleanupPlugins.
func (mr *MockKongClientMockRecorder) CleanupPlugins(ctx, route, plugins any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupPlugins", reflect.TypeOf((*MockKongClient)(nil).CleanupPlugins), ctx, route, plugins)
}

// CreateOrReplaceConsumer mocks base method.
func (m *MockKongClient) CreateOrReplaceConsumer(ctx context.Context, consumerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrReplaceConsumer", ctx, consumerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrReplaceConsumer indicates an expected call of CreateOrReplaceConsumer.
func (mr *MockKongClientMockRecorder) CreateOrReplaceConsumer(ctx, consumerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrReplaceConsumer", reflect.TypeOf((*MockKongClient)(nil).CreateOrReplaceConsumer), ctx, consumerName)
}

// CreateOrReplacePlugin mocks base method.
func (m *MockKongClient) CreateOrReplacePlugin(ctx context.Context, plugin client.CustomPlugin) (*kong.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrReplacePlugin", ctx, plugin)
	ret0, _ := ret[0].(*kong.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrReplacePlugin indicates an expected call of CreateOrReplacePlugin.
func (mr *MockKongClientMockRecorder) CreateOrReplacePlugin(ctx, plugin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrReplacePlugin", reflect.TypeOf((*MockKongClient)(nil).CreateOrReplacePlugin), ctx, plugin)
}

// CreateOrReplaceRoute mocks base method.
func (m *MockKongClient) CreateOrReplaceRoute(ctx context.Context, route client.CustomRoute, upstream client.Upstream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrReplaceRoute", ctx, route, upstream)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrReplaceRoute indicates an expected call of CreateOrReplaceRoute.
func (mr *MockKongClientMockRecorder) CreateOrReplaceRoute(ctx, route, upstream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrReplaceRoute", reflect.TypeOf((*MockKongClient)(nil).CreateOrReplaceRoute), ctx, route, upstream)
}

// DeleteConsumer mocks base method.
func (m *MockKongClient) DeleteConsumer(ctx context.Context, consumerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, consumerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockKongClientMockRecorder) DeleteConsumer(ctx, consumerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockKongClient)(nil).DeleteConsumer), ctx, consumerName)
}

// DeletePlugin mocks base method.
func (m *MockKongClient) DeletePlugin(ctx context.Context, plugin client.CustomPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlugin", ctx, plugin)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlugin indicates an expected call of DeletePlugin.
func (mr *MockKongClientMockRecorder) DeletePlugin(ctx, plugin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlugin", reflect.TypeOf((*MockKongClient)(nil).DeletePlugin), ctx, plugin)
}

// DeleteRoute mocks base method.
func (m *MockKongClient) DeleteRoute(ctx context.Context, route client.CustomRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", ctx, route)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockKongClientMockRecorder) DeleteRoute(ctx, route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockKongClient)(nil).DeleteRoute), ctx, route)
}

// LoadPlugin mocks base method.
func (m *MockKongClient) LoadPlugin(ctx context.Context, plugin client.CustomPlugin, copyConfig bool) (*kong.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPlugin", ctx, plugin, copyConfig)
	ret0, _ := ret[0].(*kong.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPlugin indicates an expected call of LoadPlugin.
func (mr *MockKongClientMockRecorder) LoadPlugin(ctx, plugin, copyConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPlugin", reflect.TypeOf((*MockKongClient)(nil).LoadPlugin), ctx, plugin, copyConfig)
}

// LoadPlugins mocks base method.
func (m *MockKongClient) LoadPlugins(ctx context.Context, plugin []client.CustomPlugin, copyConfig, rmSuperfluousPlugins bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPlugins", ctx, plugin, copyConfig, rmSuperfluousPlugins)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPlugins indicates an expected call of LoadPlugins.
func (mr *MockKongClientMockRecorder) LoadPlugins(ctx, plugin, copyConfig, rmSuperfluousPlugins any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPlugins", reflect.TypeOf((*MockKongClient)(nil).LoadPlugins), ctx, plugin, copyConfig, rmSuperfluousPlugins)
}
