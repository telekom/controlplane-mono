// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	schema "k8s.io/apimachinery/pkg/runtime/schema"

	store "github.com/telekom/controlplane-mono/common-server/pkg/store"
)

// MockObjectStore is an autogenerated mock type for the ObjectStore type
type MockObjectStore[T store.Object] struct {
	mock.Mock
}

type MockObjectStore_Expecter[T store.Object] struct {
	mock *mock.Mock
}

func (_m *MockObjectStore[T]) EXPECT() *MockObjectStore_Expecter[T] {
	return &MockObjectStore_Expecter[T]{mock: &_m.Mock}
}

// CreateOrReplace provides a mock function with given fields: ctx, obj
func (_m *MockObjectStore[T]) CreateOrReplace(ctx context.Context, obj T) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrReplace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_CreateOrReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrReplace'
type MockObjectStore_CreateOrReplace_Call[T store.Object] struct {
	*mock.Call
}

// CreateOrReplace is a helper method to define mock.On call
//   - ctx context.Context
//   - obj T
func (_e *MockObjectStore_Expecter[T]) CreateOrReplace(ctx interface{}, obj interface{}) *MockObjectStore_CreateOrReplace_Call[T] {
	return &MockObjectStore_CreateOrReplace_Call[T]{Call: _e.mock.On("CreateOrReplace", ctx, obj)}
}

func (_c *MockObjectStore_CreateOrReplace_Call[T]) Run(run func(ctx context.Context, obj T)) *MockObjectStore_CreateOrReplace_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MockObjectStore_CreateOrReplace_Call[T]) Return(_a0 error) *MockObjectStore_CreateOrReplace_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_CreateOrReplace_Call[T]) RunAndReturn(run func(context.Context, T) error) *MockObjectStore_CreateOrReplace_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, namespace, name
func (_m *MockObjectStore[T]) Delete(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockObjectStore_Delete_Call[T store.Object] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockObjectStore_Expecter[T]) Delete(ctx interface{}, namespace interface{}, name interface{}) *MockObjectStore_Delete_Call[T] {
	return &MockObjectStore_Delete_Call[T]{Call: _e.mock.On("Delete", ctx, namespace, name)}
}

func (_c *MockObjectStore_Delete_Call[T]) Run(run func(ctx context.Context, namespace string, name string)) *MockObjectStore_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockObjectStore_Delete_Call[T]) Return(_a0 error) *MockObjectStore_Delete_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_Delete_Call[T]) RunAndReturn(run func(context.Context, string, string) error) *MockObjectStore_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, namespace, name
func (_m *MockObjectStore[T]) Get(ctx context.Context, namespace string, name string) (T, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (T, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) T); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockObjectStore_Get_Call[T store.Object] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockObjectStore_Expecter[T]) Get(ctx interface{}, namespace interface{}, name interface{}) *MockObjectStore_Get_Call[T] {
	return &MockObjectStore_Get_Call[T]{Call: _e.mock.On("Get", ctx, namespace, name)}
}

func (_c *MockObjectStore_Get_Call[T]) Run(run func(ctx context.Context, namespace string, name string)) *MockObjectStore_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockObjectStore_Get_Call[T]) Return(_a0 T, _a1 error) *MockObjectStore_Get_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_Get_Call[T]) RunAndReturn(run func(context.Context, string, string) (T, error)) *MockObjectStore_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with no fields
func (_m *MockObjectStore[T]) Info() (schema.GroupVersionResource, schema.GroupVersionKind) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 schema.GroupVersionResource
	var r1 schema.GroupVersionKind
	if rf, ok := ret.Get(0).(func() (schema.GroupVersionResource, schema.GroupVersionKind)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() schema.GroupVersionResource); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(schema.GroupVersionResource)
	}

	if rf, ok := ret.Get(1).(func() schema.GroupVersionKind); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(schema.GroupVersionKind)
	}

	return r0, r1
}

// MockObjectStore_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockObjectStore_Info_Call[T store.Object] struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter[T]) Info() *MockObjectStore_Info_Call[T] {
	return &MockObjectStore_Info_Call[T]{Call: _e.mock.On("Info")}
}

func (_c *MockObjectStore_Info_Call[T]) Run(run func()) *MockObjectStore_Info_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_Info_Call[T]) Return(_a0 schema.GroupVersionResource, _a1 schema.GroupVersionKind) *MockObjectStore_Info_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_Info_Call[T]) RunAndReturn(run func() (schema.GroupVersionResource, schema.GroupVersionKind)) *MockObjectStore_Info_Call[T] {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockObjectStore[T]) List(ctx context.Context, opts store.ListOpts) (*store.ListResponse[T], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *store.ListResponse[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.ListOpts) (*store.ListResponse[T], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.ListOpts) *store.ListResponse[T]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.ListResponse[T])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.ListOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockObjectStore_List_Call[T store.Object] struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts store.ListOpts
func (_e *MockObjectStore_Expecter[T]) List(ctx interface{}, opts interface{}) *MockObjectStore_List_Call[T] {
	return &MockObjectStore_List_Call[T]{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockObjectStore_List_Call[T]) Run(run func(ctx context.Context, opts store.ListOpts)) *MockObjectStore_List_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(store.ListOpts))
	})
	return _c
}

func (_c *MockObjectStore_List_Call[T]) Return(_a0 *store.ListResponse[T], _a1 error) *MockObjectStore_List_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_List_Call[T]) RunAndReturn(run func(context.Context, store.ListOpts) (*store.ListResponse[T], error)) *MockObjectStore_List_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, namespace, name, ops
func (_m *MockObjectStore[T]) Patch(ctx context.Context, namespace string, name string, ops ...store.Patch) (T, error) {
	_va := make([]interface{}, len(ops))
	for _i := range ops {
		_va[_i] = ops[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, namespace, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...store.Patch) (T, error)); ok {
		return rf(ctx, namespace, name, ops...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...store.Patch) T); ok {
		r0 = rf(ctx, namespace, name, ops...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...store.Patch) error); ok {
		r1 = rf(ctx, namespace, name, ops...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockObjectStore_Patch_Call[T store.Object] struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - ops ...store.Patch
func (_e *MockObjectStore_Expecter[T]) Patch(ctx interface{}, namespace interface{}, name interface{}, ops ...interface{}) *MockObjectStore_Patch_Call[T] {
	return &MockObjectStore_Patch_Call[T]{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, namespace, name}, ops...)...)}
}

func (_c *MockObjectStore_Patch_Call[T]) Run(run func(ctx context.Context, namespace string, name string, ops ...store.Patch)) *MockObjectStore_Patch_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]store.Patch, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(store.Patch)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockObjectStore_Patch_Call[T]) Return(_a0 T, _a1 error) *MockObjectStore_Patch_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_Patch_Call[T]) RunAndReturn(run func(context.Context, string, string, ...store.Patch) (T, error)) *MockObjectStore_Patch_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockObjectStore[T]) Ready() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockObjectStore_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockObjectStore_Ready_Call[T store.Object] struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter[T]) Ready() *MockObjectStore_Ready_Call[T] {
	return &MockObjectStore_Ready_Call[T]{Call: _e.mock.On("Ready")}
}

func (_c *MockObjectStore_Ready_Call[T]) Run(run func()) *MockObjectStore_Ready_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_Ready_Call[T]) Return(_a0 bool) *MockObjectStore_Ready_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_Ready_Call[T]) RunAndReturn(run func() bool) *MockObjectStore_Ready_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectStore creates a new instance of MockObjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectStore[T store.Object](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectStore[T] {
	mock := &MockObjectStore[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
