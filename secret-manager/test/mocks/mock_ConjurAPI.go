// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	conjurapi "github.com/cyberark/conjur-api-go/conjurapi"

	mock "github.com/stretchr/testify/mock"
)

// MockConjurAPI is an autogenerated mock type for the ConjurAPI type
type MockConjurAPI struct {
	mock.Mock
}

type MockConjurAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConjurAPI) EXPECT() *MockConjurAPI_Expecter {
	return &MockConjurAPI_Expecter{mock: &_m.Mock}
}

// AddSecret provides a mock function with given fields: variableID, value
func (_m *MockConjurAPI) AddSecret(variableID string, value string) error {
	ret := _m.Called(variableID, value)

	if len(ret) == 0 {
		panic("no return value specified for AddSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(variableID, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConjurAPI_AddSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSecret'
type MockConjurAPI_AddSecret_Call struct {
	*mock.Call
}

// AddSecret is a helper method to define mock.On call
//   - variableID string
//   - value string
func (_e *MockConjurAPI_Expecter) AddSecret(variableID interface{}, value interface{}) *MockConjurAPI_AddSecret_Call {
	return &MockConjurAPI_AddSecret_Call{Call: _e.mock.On("AddSecret", variableID, value)}
}

func (_c *MockConjurAPI_AddSecret_Call) Run(run func(variableID string, value string)) *MockConjurAPI_AddSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockConjurAPI_AddSecret_Call) Return(_a0 error) *MockConjurAPI_AddSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConjurAPI_AddSecret_Call) RunAndReturn(run func(string, string) error) *MockConjurAPI_AddSecret_Call {
	_c.Call.Return(run)
	return _c
}

// LoadPolicy provides a mock function with given fields: mode, path, reader
func (_m *MockConjurAPI) LoadPolicy(mode conjurapi.PolicyMode, path string, reader io.Reader) (*conjurapi.PolicyResponse, error) {
	ret := _m.Called(mode, path, reader)

	if len(ret) == 0 {
		panic("no return value specified for LoadPolicy")
	}

	var r0 *conjurapi.PolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(conjurapi.PolicyMode, string, io.Reader) (*conjurapi.PolicyResponse, error)); ok {
		return rf(mode, path, reader)
	}
	if rf, ok := ret.Get(0).(func(conjurapi.PolicyMode, string, io.Reader) *conjurapi.PolicyResponse); ok {
		r0 = rf(mode, path, reader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*conjurapi.PolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(conjurapi.PolicyMode, string, io.Reader) error); ok {
		r1 = rf(mode, path, reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConjurAPI_LoadPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPolicy'
type MockConjurAPI_LoadPolicy_Call struct {
	*mock.Call
}

// LoadPolicy is a helper method to define mock.On call
//   - mode conjurapi.PolicyMode
//   - path string
//   - reader io.Reader
func (_e *MockConjurAPI_Expecter) LoadPolicy(mode interface{}, path interface{}, reader interface{}) *MockConjurAPI_LoadPolicy_Call {
	return &MockConjurAPI_LoadPolicy_Call{Call: _e.mock.On("LoadPolicy", mode, path, reader)}
}

func (_c *MockConjurAPI_LoadPolicy_Call) Run(run func(mode conjurapi.PolicyMode, path string, reader io.Reader)) *MockConjurAPI_LoadPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(conjurapi.PolicyMode), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *MockConjurAPI_LoadPolicy_Call) Return(_a0 *conjurapi.PolicyResponse, _a1 error) *MockConjurAPI_LoadPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConjurAPI_LoadPolicy_Call) RunAndReturn(run func(conjurapi.PolicyMode, string, io.Reader) (*conjurapi.PolicyResponse, error)) *MockConjurAPI_LoadPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveBatchSecrets provides a mock function with given fields: variableIDs
func (_m *MockConjurAPI) RetrieveBatchSecrets(variableIDs []string) (map[string][]byte, error) {
	ret := _m.Called(variableIDs)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveBatchSecrets")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (map[string][]byte, error)); ok {
		return rf(variableIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) map[string][]byte); ok {
		r0 = rf(variableIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(variableIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConjurAPI_RetrieveBatchSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveBatchSecrets'
type MockConjurAPI_RetrieveBatchSecrets_Call struct {
	*mock.Call
}

// RetrieveBatchSecrets is a helper method to define mock.On call
//   - variableIDs []string
func (_e *MockConjurAPI_Expecter) RetrieveBatchSecrets(variableIDs interface{}) *MockConjurAPI_RetrieveBatchSecrets_Call {
	return &MockConjurAPI_RetrieveBatchSecrets_Call{Call: _e.mock.On("RetrieveBatchSecrets", variableIDs)}
}

func (_c *MockConjurAPI_RetrieveBatchSecrets_Call) Run(run func(variableIDs []string)) *MockConjurAPI_RetrieveBatchSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockConjurAPI_RetrieveBatchSecrets_Call) Return(_a0 map[string][]byte, _a1 error) *MockConjurAPI_RetrieveBatchSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConjurAPI_RetrieveBatchSecrets_Call) RunAndReturn(run func([]string) (map[string][]byte, error)) *MockConjurAPI_RetrieveBatchSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveSecret provides a mock function with given fields: variableID
func (_m *MockConjurAPI) RetrieveSecret(variableID string) ([]byte, error) {
	ret := _m.Called(variableID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveSecret")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(variableID)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(variableID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(variableID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConjurAPI_RetrieveSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveSecret'
type MockConjurAPI_RetrieveSecret_Call struct {
	*mock.Call
}

// RetrieveSecret is a helper method to define mock.On call
//   - variableID string
func (_e *MockConjurAPI_Expecter) RetrieveSecret(variableID interface{}) *MockConjurAPI_RetrieveSecret_Call {
	return &MockConjurAPI_RetrieveSecret_Call{Call: _e.mock.On("RetrieveSecret", variableID)}
}

func (_c *MockConjurAPI_RetrieveSecret_Call) Run(run func(variableID string)) *MockConjurAPI_RetrieveSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConjurAPI_RetrieveSecret_Call) Return(_a0 []byte, _a1 error) *MockConjurAPI_RetrieveSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConjurAPI_RetrieveSecret_Call) RunAndReturn(run func(string) ([]byte, error)) *MockConjurAPI_RetrieveSecret_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveSecretWithVersion provides a mock function with given fields: variableID, version
func (_m *MockConjurAPI) RetrieveSecretWithVersion(variableID string, version int) ([]byte, error) {
	ret := _m.Called(variableID, version)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveSecretWithVersion")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]byte, error)); ok {
		return rf(variableID, version)
	}
	if rf, ok := ret.Get(0).(func(string, int) []byte); ok {
		r0 = rf(variableID, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(variableID, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConjurAPI_RetrieveSecretWithVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveSecretWithVersion'
type MockConjurAPI_RetrieveSecretWithVersion_Call struct {
	*mock.Call
}

// RetrieveSecretWithVersion is a helper method to define mock.On call
//   - variableID string
//   - version int
func (_e *MockConjurAPI_Expecter) RetrieveSecretWithVersion(variableID interface{}, version interface{}) *MockConjurAPI_RetrieveSecretWithVersion_Call {
	return &MockConjurAPI_RetrieveSecretWithVersion_Call{Call: _e.mock.On("RetrieveSecretWithVersion", variableID, version)}
}

func (_c *MockConjurAPI_RetrieveSecretWithVersion_Call) Run(run func(variableID string, version int)) *MockConjurAPI_RetrieveSecretWithVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockConjurAPI_RetrieveSecretWithVersion_Call) Return(_a0 []byte, _a1 error) *MockConjurAPI_RetrieveSecretWithVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConjurAPI_RetrieveSecretWithVersion_Call) RunAndReturn(run func(string, int) ([]byte, error)) *MockConjurAPI_RetrieveSecretWithVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConjurAPI creates a new instance of MockConjurAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConjurAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConjurAPI {
	mock := &MockConjurAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
