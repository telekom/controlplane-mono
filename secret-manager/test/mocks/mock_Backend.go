// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	backend "github.com/telekom/controlplane-mono/secret-manager/pkg/backend"

	mock "github.com/stretchr/testify/mock"
)

// MockBackend is an autogenerated mock type for the Backend type
type MockBackend[T backend.SecretId, S backend.Secret[T]] struct {
	mock.Mock
}

type MockBackend_Expecter[T backend.SecretId, S backend.Secret[T]] struct {
	mock *mock.Mock
}

func (_m *MockBackend[T, S]) EXPECT() *MockBackend_Expecter[T, S] {
	return &MockBackend_Expecter[T, S]{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockBackend[T, S]) Delete(_a0 context.Context, _a1 T) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackend_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBackend_Delete_Call[T backend.SecretId, S backend.Secret[T]] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
func (_e *MockBackend_Expecter[T, S]) Delete(_a0 interface{}, _a1 interface{}) *MockBackend_Delete_Call[T, S] {
	return &MockBackend_Delete_Call[T, S]{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockBackend_Delete_Call[T, S]) Run(run func(_a0 context.Context, _a1 T)) *MockBackend_Delete_Call[T, S] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MockBackend_Delete_Call[T, S]) Return(_a0 error) *MockBackend_Delete_Call[T, S] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackend_Delete_Call[T, S]) RunAndReturn(run func(context.Context, T) error) *MockBackend_Delete_Call[T, S] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockBackend[T, S]) Get(_a0 context.Context, _a1 T) (S, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 S
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (S, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) S); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(S)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBackend_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBackend_Get_Call[T backend.SecretId, S backend.Secret[T]] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
func (_e *MockBackend_Expecter[T, S]) Get(_a0 interface{}, _a1 interface{}) *MockBackend_Get_Call[T, S] {
	return &MockBackend_Get_Call[T, S]{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockBackend_Get_Call[T, S]) Run(run func(_a0 context.Context, _a1 T)) *MockBackend_Get_Call[T, S] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MockBackend_Get_Call[T, S]) Return(_a0 S, _a1 error) *MockBackend_Get_Call[T, S] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackend_Get_Call[T, S]) RunAndReturn(run func(context.Context, T) (S, error)) *MockBackend_Get_Call[T, S] {
	_c.Call.Return(run)
	return _c
}

// ParseSecretId provides a mock function with given fields: _a0
func (_m *MockBackend[T, S]) ParseSecretId(_a0 string) (T, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ParseSecretId")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (T, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) T); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBackend_ParseSecretId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseSecretId'
type MockBackend_ParseSecretId_Call[T backend.SecretId, S backend.Secret[T]] struct {
	*mock.Call
}

// ParseSecretId is a helper method to define mock.On call
//   - _a0 string
func (_e *MockBackend_Expecter[T, S]) ParseSecretId(_a0 interface{}) *MockBackend_ParseSecretId_Call[T, S] {
	return &MockBackend_ParseSecretId_Call[T, S]{Call: _e.mock.On("ParseSecretId", _a0)}
}

func (_c *MockBackend_ParseSecretId_Call[T, S]) Run(run func(_a0 string)) *MockBackend_ParseSecretId_Call[T, S] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBackend_ParseSecretId_Call[T, S]) Return(_a0 T, _a1 error) *MockBackend_ParseSecretId_Call[T, S] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackend_ParseSecretId_Call[T, S]) RunAndReturn(run func(string) (T, error)) *MockBackend_ParseSecretId_Call[T, S] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockBackend[T, S]) Set(_a0 context.Context, _a1 T, _a2 backend.SecretValue) (S, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 S
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T, backend.SecretValue) (S, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, backend.SecretValue) S); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(S)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, backend.SecretValue) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBackend_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockBackend_Set_Call[T backend.SecretId, S backend.Secret[T]] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
//   - _a2 backend.SecretValue
func (_e *MockBackend_Expecter[T, S]) Set(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockBackend_Set_Call[T, S] {
	return &MockBackend_Set_Call[T, S]{Call: _e.mock.On("Set", _a0, _a1, _a2)}
}

func (_c *MockBackend_Set_Call[T, S]) Run(run func(_a0 context.Context, _a1 T, _a2 backend.SecretValue)) *MockBackend_Set_Call[T, S] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T), args[2].(backend.SecretValue))
	})
	return _c
}

func (_c *MockBackend_Set_Call[T, S]) Return(_a0 S, _a1 error) *MockBackend_Set_Call[T, S] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackend_Set_Call[T, S]) RunAndReturn(run func(context.Context, T, backend.SecretValue) (S, error)) *MockBackend_Set_Call[T, S] {
	_c.Call.Return(run)
	return _c
}

// NewMockBackend creates a new instance of MockBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackend[T backend.SecretId, S backend.Secret[T]](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackend[T, S] {
	mock := &MockBackend[T, S]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
