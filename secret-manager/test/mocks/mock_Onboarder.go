// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	backend "github.com/telekom/controlplane-mono/secret-manager/pkg/backend"

	mock "github.com/stretchr/testify/mock"
)

// MockOnboarder is an autogenerated mock type for the Onboarder type
type MockOnboarder struct {
	mock.Mock
}

type MockOnboarder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnboarder) EXPECT() *MockOnboarder_Expecter {
	return &MockOnboarder_Expecter{mock: &_m.Mock}
}

// DeleteApplication provides a mock function with given fields: ctx, env, teamId, appId
func (_m *MockOnboarder) DeleteApplication(ctx context.Context, env string, teamId string, appId string) error {
	ret := _m.Called(ctx, env, teamId, appId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, env, teamId, appId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOnboarder_DeleteApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApplication'
type MockOnboarder_DeleteApplication_Call struct {
	*mock.Call
}

// DeleteApplication is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
//   - teamId string
//   - appId string
func (_e *MockOnboarder_Expecter) DeleteApplication(ctx interface{}, env interface{}, teamId interface{}, appId interface{}) *MockOnboarder_DeleteApplication_Call {
	return &MockOnboarder_DeleteApplication_Call{Call: _e.mock.On("DeleteApplication", ctx, env, teamId, appId)}
}

func (_c *MockOnboarder_DeleteApplication_Call) Run(run func(ctx context.Context, env string, teamId string, appId string)) *MockOnboarder_DeleteApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockOnboarder_DeleteApplication_Call) Return(_a0 error) *MockOnboarder_DeleteApplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnboarder_DeleteApplication_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockOnboarder_DeleteApplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEnvironment provides a mock function with given fields: ctx, env
func (_m *MockOnboarder) DeleteEnvironment(ctx context.Context, env string) error {
	ret := _m.Called(ctx, env)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, env)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOnboarder_DeleteEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEnvironment'
type MockOnboarder_DeleteEnvironment_Call struct {
	*mock.Call
}

// DeleteEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
func (_e *MockOnboarder_Expecter) DeleteEnvironment(ctx interface{}, env interface{}) *MockOnboarder_DeleteEnvironment_Call {
	return &MockOnboarder_DeleteEnvironment_Call{Call: _e.mock.On("DeleteEnvironment", ctx, env)}
}

func (_c *MockOnboarder_DeleteEnvironment_Call) Run(run func(ctx context.Context, env string)) *MockOnboarder_DeleteEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOnboarder_DeleteEnvironment_Call) Return(_a0 error) *MockOnboarder_DeleteEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnboarder_DeleteEnvironment_Call) RunAndReturn(run func(context.Context, string) error) *MockOnboarder_DeleteEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, env, id
func (_m *MockOnboarder) DeleteTeam(ctx context.Context, env string, id string) error {
	ret := _m.Called(ctx, env, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, env, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOnboarder_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockOnboarder_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
//   - id string
func (_e *MockOnboarder_Expecter) DeleteTeam(ctx interface{}, env interface{}, id interface{}) *MockOnboarder_DeleteTeam_Call {
	return &MockOnboarder_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, env, id)}
}

func (_c *MockOnboarder_DeleteTeam_Call) Run(run func(ctx context.Context, env string, id string)) *MockOnboarder_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOnboarder_DeleteTeam_Call) Return(_a0 error) *MockOnboarder_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnboarder_DeleteTeam_Call) RunAndReturn(run func(context.Context, string, string) error) *MockOnboarder_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// OnboardApplication provides a mock function with given fields: ctx, env, teamId, appId
func (_m *MockOnboarder) OnboardApplication(ctx context.Context, env string, teamId string, appId string) (backend.OnboardResponse, error) {
	ret := _m.Called(ctx, env, teamId, appId)

	if len(ret) == 0 {
		panic("no return value specified for OnboardApplication")
	}

	var r0 backend.OnboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (backend.OnboardResponse, error)); ok {
		return rf(ctx, env, teamId, appId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) backend.OnboardResponse); ok {
		r0 = rf(ctx, env, teamId, appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backend.OnboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, env, teamId, appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOnboarder_OnboardApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnboardApplication'
type MockOnboarder_OnboardApplication_Call struct {
	*mock.Call
}

// OnboardApplication is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
//   - teamId string
//   - appId string
func (_e *MockOnboarder_Expecter) OnboardApplication(ctx interface{}, env interface{}, teamId interface{}, appId interface{}) *MockOnboarder_OnboardApplication_Call {
	return &MockOnboarder_OnboardApplication_Call{Call: _e.mock.On("OnboardApplication", ctx, env, teamId, appId)}
}

func (_c *MockOnboarder_OnboardApplication_Call) Run(run func(ctx context.Context, env string, teamId string, appId string)) *MockOnboarder_OnboardApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockOnboarder_OnboardApplication_Call) Return(_a0 backend.OnboardResponse, _a1 error) *MockOnboarder_OnboardApplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOnboarder_OnboardApplication_Call) RunAndReturn(run func(context.Context, string, string, string) (backend.OnboardResponse, error)) *MockOnboarder_OnboardApplication_Call {
	_c.Call.Return(run)
	return _c
}

// OnboardEnvironment provides a mock function with given fields: ctx, env
func (_m *MockOnboarder) OnboardEnvironment(ctx context.Context, env string) (backend.OnboardResponse, error) {
	ret := _m.Called(ctx, env)

	if len(ret) == 0 {
		panic("no return value specified for OnboardEnvironment")
	}

	var r0 backend.OnboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (backend.OnboardResponse, error)); ok {
		return rf(ctx, env)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) backend.OnboardResponse); ok {
		r0 = rf(ctx, env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backend.OnboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, env)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOnboarder_OnboardEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnboardEnvironment'
type MockOnboarder_OnboardEnvironment_Call struct {
	*mock.Call
}

// OnboardEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
func (_e *MockOnboarder_Expecter) OnboardEnvironment(ctx interface{}, env interface{}) *MockOnboarder_OnboardEnvironment_Call {
	return &MockOnboarder_OnboardEnvironment_Call{Call: _e.mock.On("OnboardEnvironment", ctx, env)}
}

func (_c *MockOnboarder_OnboardEnvironment_Call) Run(run func(ctx context.Context, env string)) *MockOnboarder_OnboardEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOnboarder_OnboardEnvironment_Call) Return(_a0 backend.OnboardResponse, _a1 error) *MockOnboarder_OnboardEnvironment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOnboarder_OnboardEnvironment_Call) RunAndReturn(run func(context.Context, string) (backend.OnboardResponse, error)) *MockOnboarder_OnboardEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// OnboardTeam provides a mock function with given fields: ctx, env, id
func (_m *MockOnboarder) OnboardTeam(ctx context.Context, env string, id string) (backend.OnboardResponse, error) {
	ret := _m.Called(ctx, env, id)

	if len(ret) == 0 {
		panic("no return value specified for OnboardTeam")
	}

	var r0 backend.OnboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (backend.OnboardResponse, error)); ok {
		return rf(ctx, env, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) backend.OnboardResponse); ok {
		r0 = rf(ctx, env, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backend.OnboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, env, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOnboarder_OnboardTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnboardTeam'
type MockOnboarder_OnboardTeam_Call struct {
	*mock.Call
}

// OnboardTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
//   - id string
func (_e *MockOnboarder_Expecter) OnboardTeam(ctx interface{}, env interface{}, id interface{}) *MockOnboarder_OnboardTeam_Call {
	return &MockOnboarder_OnboardTeam_Call{Call: _e.mock.On("OnboardTeam", ctx, env, id)}
}

func (_c *MockOnboarder_OnboardTeam_Call) Run(run func(ctx context.Context, env string, id string)) *MockOnboarder_OnboardTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOnboarder_OnboardTeam_Call) Return(_a0 backend.OnboardResponse, _a1 error) *MockOnboarder_OnboardTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOnboarder_OnboardTeam_Call) RunAndReturn(run func(context.Context, string, string) (backend.OnboardResponse, error)) *MockOnboarder_OnboardTeam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOnboarder creates a new instance of MockOnboarder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnboarder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnboarder {
	mock := &MockOnboarder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
