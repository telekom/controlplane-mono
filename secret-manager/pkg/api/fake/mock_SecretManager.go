// Code generated by mockery v2.53.3. DO NOT EDIT.

package fake

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gen "github.com/telekom/controlplane-mono/secret-manager/pkg/api/gen"
)

// MockSecretManager is an autogenerated mock type for the SecretManager type
type MockSecretManager struct {
	mock.Mock
}

type MockSecretManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretManager) EXPECT() *MockSecretManager_Expecter {
	return &MockSecretManager_Expecter{mock: &_m.Mock}
}

// DeleteApplication provides a mock function with given fields: ctx, envID, teamID, appID
func (_m *MockSecretManager) DeleteApplication(ctx context.Context, envID string, teamID string, appID string) error {
	ret := _m.Called(ctx, envID, teamID, appID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, envID, teamID, appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecretManager_DeleteApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApplication'
type MockSecretManager_DeleteApplication_Call struct {
	*mock.Call
}

// DeleteApplication is a helper method to define mock.On call
//   - ctx context.Context
//   - envID string
//   - teamID string
//   - appID string
func (_e *MockSecretManager_Expecter) DeleteApplication(ctx interface{}, envID interface{}, teamID interface{}, appID interface{}) *MockSecretManager_DeleteApplication_Call {
	return &MockSecretManager_DeleteApplication_Call{Call: _e.mock.On("DeleteApplication", ctx, envID, teamID, appID)}
}

func (_c *MockSecretManager_DeleteApplication_Call) Run(run func(ctx context.Context, envID string, teamID string, appID string)) *MockSecretManager_DeleteApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSecretManager_DeleteApplication_Call) Return(err error) *MockSecretManager_DeleteApplication_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretManager_DeleteApplication_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockSecretManager_DeleteApplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEnvironment provides a mock function with given fields: ctx, envID
func (_m *MockSecretManager) DeleteEnvironment(ctx context.Context, envID string) error {
	ret := _m.Called(ctx, envID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, envID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecretManager_DeleteEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEnvironment'
type MockSecretManager_DeleteEnvironment_Call struct {
	*mock.Call
}

// DeleteEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - envID string
func (_e *MockSecretManager_Expecter) DeleteEnvironment(ctx interface{}, envID interface{}) *MockSecretManager_DeleteEnvironment_Call {
	return &MockSecretManager_DeleteEnvironment_Call{Call: _e.mock.On("DeleteEnvironment", ctx, envID)}
}

func (_c *MockSecretManager_DeleteEnvironment_Call) Run(run func(ctx context.Context, envID string)) *MockSecretManager_DeleteEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecretManager_DeleteEnvironment_Call) Return(err error) *MockSecretManager_DeleteEnvironment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretManager_DeleteEnvironment_Call) RunAndReturn(run func(context.Context, string) error) *MockSecretManager_DeleteEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, envID, teamID
func (_m *MockSecretManager) DeleteTeam(ctx context.Context, envID string, teamID string) error {
	ret := _m.Called(ctx, envID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, envID, teamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecretManager_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockSecretManager_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - envID string
//   - teamID string
func (_e *MockSecretManager_Expecter) DeleteTeam(ctx interface{}, envID interface{}, teamID interface{}) *MockSecretManager_DeleteTeam_Call {
	return &MockSecretManager_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, envID, teamID)}
}

func (_c *MockSecretManager_DeleteTeam_Call) Run(run func(ctx context.Context, envID string, teamID string)) *MockSecretManager_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSecretManager_DeleteTeam_Call) Return(err error) *MockSecretManager_DeleteTeam_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretManager_DeleteTeam_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSecretManager_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, secretID
func (_m *MockSecretManager) Get(ctx context.Context, secretID string) (string, error) {
	ret := _m.Called(ctx, secretID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, secretID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, secretID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSecretManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - secretID string
func (_e *MockSecretManager_Expecter) Get(ctx interface{}, secretID interface{}) *MockSecretManager_Get_Call {
	return &MockSecretManager_Get_Call{Call: _e.mock.On("Get", ctx, secretID)}
}

func (_c *MockSecretManager_Get_Call) Run(run func(ctx context.Context, secretID string)) *MockSecretManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecretManager_Get_Call) Return(value string, err error) *MockSecretManager_Get_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockSecretManager_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockSecretManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Rotate provides a mock function with given fields: ctx, secretID
func (_m *MockSecretManager) Rotate(ctx context.Context, secretID string) (string, error) {
	ret := _m.Called(ctx, secretID)

	if len(ret) == 0 {
		panic("no return value specified for Rotate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, secretID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, secretID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretManager_Rotate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rotate'
type MockSecretManager_Rotate_Call struct {
	*mock.Call
}

// Rotate is a helper method to define mock.On call
//   - ctx context.Context
//   - secretID string
func (_e *MockSecretManager_Expecter) Rotate(ctx interface{}, secretID interface{}) *MockSecretManager_Rotate_Call {
	return &MockSecretManager_Rotate_Call{Call: _e.mock.On("Rotate", ctx, secretID)}
}

func (_c *MockSecretManager_Rotate_Call) Run(run func(ctx context.Context, secretID string)) *MockSecretManager_Rotate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecretManager_Rotate_Call) Return(newID string, err error) *MockSecretManager_Rotate_Call {
	_c.Call.Return(newID, err)
	return _c
}

func (_c *MockSecretManager_Rotate_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockSecretManager_Rotate_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, secretID, secretValue
func (_m *MockSecretManager) Set(ctx context.Context, secretID string, secretValue string) (string, error) {
	ret := _m.Called(ctx, secretID, secretValue)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, secretID, secretValue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, secretID, secretValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, secretID, secretValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretManager_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockSecretManager_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - secretID string
//   - secretValue string
func (_e *MockSecretManager_Expecter) Set(ctx interface{}, secretID interface{}, secretValue interface{}) *MockSecretManager_Set_Call {
	return &MockSecretManager_Set_Call{Call: _e.mock.On("Set", ctx, secretID, secretValue)}
}

func (_c *MockSecretManager_Set_Call) Run(run func(ctx context.Context, secretID string, secretValue string)) *MockSecretManager_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSecretManager_Set_Call) Return(newID string, err error) *MockSecretManager_Set_Call {
	_c.Call.Return(newID, err)
	return _c
}

func (_c *MockSecretManager_Set_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockSecretManager_Set_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertApplication provides a mock function with given fields: ctx, envID, teamID, appID
func (_m *MockSecretManager) UpsertApplication(ctx context.Context, envID string, teamID string, appID string) ([]gen.ListSecretItem, error) {
	ret := _m.Called(ctx, envID, teamID, appID)

	if len(ret) == 0 {
		panic("no return value specified for UpsertApplication")
	}

	var r0 []gen.ListSecretItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]gen.ListSecretItem, error)); ok {
		return rf(ctx, envID, teamID, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []gen.ListSecretItem); ok {
		r0 = rf(ctx, envID, teamID, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.ListSecretItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, envID, teamID, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretManager_UpsertApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertApplication'
type MockSecretManager_UpsertApplication_Call struct {
	*mock.Call
}

// UpsertApplication is a helper method to define mock.On call
//   - ctx context.Context
//   - envID string
//   - teamID string
//   - appID string
func (_e *MockSecretManager_Expecter) UpsertApplication(ctx interface{}, envID interface{}, teamID interface{}, appID interface{}) *MockSecretManager_UpsertApplication_Call {
	return &MockSecretManager_UpsertApplication_Call{Call: _e.mock.On("UpsertApplication", ctx, envID, teamID, appID)}
}

func (_c *MockSecretManager_UpsertApplication_Call) Run(run func(ctx context.Context, envID string, teamID string, appID string)) *MockSecretManager_UpsertApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSecretManager_UpsertApplication_Call) Return(availableSecrets []gen.ListSecretItem, err error) *MockSecretManager_UpsertApplication_Call {
	_c.Call.Return(availableSecrets, err)
	return _c
}

func (_c *MockSecretManager_UpsertApplication_Call) RunAndReturn(run func(context.Context, string, string, string) ([]gen.ListSecretItem, error)) *MockSecretManager_UpsertApplication_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertEnvironment provides a mock function with given fields: ctx, envID
func (_m *MockSecretManager) UpsertEnvironment(ctx context.Context, envID string) ([]gen.ListSecretItem, error) {
	ret := _m.Called(ctx, envID)

	if len(ret) == 0 {
		panic("no return value specified for UpsertEnvironment")
	}

	var r0 []gen.ListSecretItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]gen.ListSecretItem, error)); ok {
		return rf(ctx, envID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []gen.ListSecretItem); ok {
		r0 = rf(ctx, envID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.ListSecretItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, envID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretManager_UpsertEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertEnvironment'
type MockSecretManager_UpsertEnvironment_Call struct {
	*mock.Call
}

// UpsertEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - envID string
func (_e *MockSecretManager_Expecter) UpsertEnvironment(ctx interface{}, envID interface{}) *MockSecretManager_UpsertEnvironment_Call {
	return &MockSecretManager_UpsertEnvironment_Call{Call: _e.mock.On("UpsertEnvironment", ctx, envID)}
}

func (_c *MockSecretManager_UpsertEnvironment_Call) Run(run func(ctx context.Context, envID string)) *MockSecretManager_UpsertEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecretManager_UpsertEnvironment_Call) Return(availableSecrets []gen.ListSecretItem, err error) *MockSecretManager_UpsertEnvironment_Call {
	_c.Call.Return(availableSecrets, err)
	return _c
}

func (_c *MockSecretManager_UpsertEnvironment_Call) RunAndReturn(run func(context.Context, string) ([]gen.ListSecretItem, error)) *MockSecretManager_UpsertEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertTeam provides a mock function with given fields: ctx, envID, teamID
func (_m *MockSecretManager) UpsertTeam(ctx context.Context, envID string, teamID string) ([]gen.ListSecretItem, error) {
	ret := _m.Called(ctx, envID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTeam")
	}

	var r0 []gen.ListSecretItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]gen.ListSecretItem, error)); ok {
		return rf(ctx, envID, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []gen.ListSecretItem); ok {
		r0 = rf(ctx, envID, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.ListSecretItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, envID, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretManager_UpsertTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTeam'
type MockSecretManager_UpsertTeam_Call struct {
	*mock.Call
}

// UpsertTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - envID string
//   - teamID string
func (_e *MockSecretManager_Expecter) UpsertTeam(ctx interface{}, envID interface{}, teamID interface{}) *MockSecretManager_UpsertTeam_Call {
	return &MockSecretManager_UpsertTeam_Call{Call: _e.mock.On("UpsertTeam", ctx, envID, teamID)}
}

func (_c *MockSecretManager_UpsertTeam_Call) Run(run func(ctx context.Context, envID string, teamID string)) *MockSecretManager_UpsertTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSecretManager_UpsertTeam_Call) Return(availableSecrets []gen.ListSecretItem, err error) *MockSecretManager_UpsertTeam_Call {
	_c.Call.Return(availableSecrets, err)
	return _c
}

func (_c *MockSecretManager_UpsertTeam_Call) RunAndReturn(run func(context.Context, string, string) ([]gen.ListSecretItem, error)) *MockSecretManager_UpsertTeam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretManager creates a new instance of MockSecretManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretManager {
	mock := &MockSecretManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
