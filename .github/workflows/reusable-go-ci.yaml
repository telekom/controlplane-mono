name: "Reusable Go Module CI Workflow"

on:
  workflow_call:
    inputs:
      module:
        description: "The Go module to process"
        required: true
        type: string
      run_check_generated_files:
        description: "Set to true to run checks for generated files"
        required: false
        type: boolean
        default: false
      run_tests:
        description: "Set to true to run unit tests and code coverage"
        required: false
        type: boolean
        default: true
      run_build_image:
        description: "Set to true to build the container image using Ko"
        required: false
        type: boolean
        default: true
      ko_build_path:
        description: "Path to the main package for ko build (e.g., cmd/main.go or ./cmd/server)"
        required: false
        type: string
        default: "cmd/main.go"
      run_vulnerability_check:
        description: "Set to true to run govulncheck"
        required: false
        type: boolean
        default: ${{ github.event_name == 'pull_request' }}
      run_code_analysis:
        description: "Set to true to run CodeQL analysis"
        required: false
        type: boolean
        default: ${{ github.event_name == 'pull_request' }}
      run_lint:
        description: "Set to true to run golangci-lint"
        required: false
        type: boolean
        default: ${{ github.event_name == 'pull_request' }}
      github_repository:
        description: "GitHub repository (owner/repo), e.g., github.repository. Required if run_build_image is true."
        required: false
        type: string
        default: ${{ github.repository }}
      github_ref:
        description: "Full GitHub ref (e.g., github.ref). Required if run_build_image is true."
        required: false
        type: string
        default: ${{ github.ref }}
      container_registry:
        description: "Container registry for Ko, e.g., ghcr.io or docker.io"
        required: false
        type: string
        default: "ghcr.io"
      golangci_lint_binary_version:
        description: "Version of the golangci-lint binary to use"
        required: false
        type: string
        default: "v1.59.1"

    outputs:
      image_digest:
        description: "Image digest from the build image step"
        value: ${{ jobs.composite_ci_job.outputs.image_digest }}
      image_tag:
        description: "Image tag from the build image step"
        value: ${{ jobs.composite_ci_job.outputs.image_tag }}

jobs:
  composite_ci_job:
    name: "CI for ${{ inputs.module }}"
    runs-on: ubuntu-latest
    outputs:
      image_digest: ${{ steps.build_image_ko_step.outputs.digest }}
      image_tag: ${{ steps.build_image_ko_step.outputs.tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4.2.2
        with:
          fetch-depth: ${{ inputs.run_code_analysis && 0 || 1 }} # Fetch all history for CodeQL, otherwise shallow clone

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # pin@5.5.0
        with:
          go-version-file: "${{ inputs.module }}/go.mod"
          cache: false # Using a separate cache step

      - name: Restore Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.module }}-${{ hashFiles(format('{0}/go.sum', inputs.module)) }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.module }}-

      - name: Check Generated Files
        if: ${{ inputs.run_check_generated_files }}
        shell: bash
        working-directory: ${{ inputs.module }}
        run: |
          make manifests
          make generate
          git diff --exit-code -- . ':!go.sum' ':!go.mod'

      - name: Set up gotestfmt
        if: ${{ inputs.run_tests }}
        uses: gotesttools/gotestfmt-action@v2

      - name: Build and test module
        if: ${{ inputs.run_tests }}
        shell: bash
        working-directory: ${{ inputs.module }}
        env:
          ENVTEST_K8S_VERSION: "1.31.0"
        run: make test

      - name: Generate HTML coverage report
        if: ${{ inputs.run_tests }}
        shell: bash
        working-directory: ${{ inputs.module }}
        run: go tool cover -html=cover.out -o coverage.html

      - name: Generate Cobertura coverage report
        if: ${{ inputs.run_tests }}
        shell: bash
        working-directory: ${{ inputs.module }}
        run: |
          go install github.com/boumenot/gocover-cobertura@latest
          gocover-cobertura < cover.out > cobertura.xml

      - name: Upload go test log
        if: ${{ inputs.run_tests && always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # pin@v4.6.2
        with:
          name: ${{ inputs.module }}-gotest.log
          path: ${{ inputs.module }}/gotest.log
          if-no-files-found: error

      - name: Upload test reports artifact
        id: upload_test_reports_artifact_step
        if: ${{ inputs.run_tests && always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # pin@v4.6.2
        with:
          name: ${{ inputs.module }}-test-report
          path: |
            ${{ inputs.module }}/cover.out
            ${{ inputs.module }}/coverage.html
            ${{ inputs.module }}/cobertura.xml
            ${{ inputs.module }}/junit.xml

      - name: Publish test report as Check
        if: ${{ inputs.run_tests && always() && (github.event_name == 'pull_request') }}
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: "${{ inputs.module }}/junit.xml"
          check_name: "Test Report (${{ inputs.module }})"
          comment: true
          include_passed: true

      - name: Prepare coverage comment
        id: prepare_coverage_comment_step
        if: ${{ inputs.run_tests && always() && (github.event_name == 'pull_request') }}
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ${{ inputs.module }}/cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          indicators: true
          output: both
          thresholds: "60 80"

      - name: Add Coverage PR Comment
        if: ${{ inputs.run_tests && always() && (github.event_name == 'pull_request') }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: module-coverage-${{ inputs.module }}
          message: |
            **Coverage for ${{ inputs.module }}**
            ${{ steps.prepare_coverage_comment_step.outputs.markdown }}
            Download the latest HTML coverage report for ${{ inputs.module }} [here](${{ github.server_url }}/${{ inputs.github_repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.upload_test_reports_artifact_step.outputs.artifact-id }}).

      - name: Setup Ko
        if: ${{ inputs.run_build_image }}
        uses: ko-build/setup-ko@v0.8

      - name: Inject slug vars
        if: ${{ inputs.run_build_image }}
        uses: rlespinasse/github-slug-action@v5

      - name: Build and Push Image with Ko
        id: build_image_ko_step
        if: ${{ inputs.run_build_image }}
        shell: bash
        working-directory: ${{ inputs.module }}
        env:
          KO_DOCKER_REPO: ${{ inputs.container_registry }}/${{ inputs.github_repository }}/${{ inputs.module }}
          KO_CONFIG_PATH: ${{ github.workspace }}/.ko.yaml
        run: |
          if [ -z "${{ inputs.github_repository }}" ] || [ -z "${{ inputs.github_ref }}" ]; then
            echo "Error: github_repository and github_ref inputs are required when run_build_image is true."
            exit 1
          fi
          output=$(ko build ${{ inputs.ko_build_path }} --bare --tags "${GITHUB_REF_SLUG}")
          echo "Ko output: $output"
          digest=$(echo "$output" | grep -o 'sha256:[a-f0-9]\{64\}')
          echo "digest=$digest" >> $GITHUB_OUTPUT
          tag_value=""
          if [[ "${{ inputs.github_ref }}" == refs/tags/* ]]; then
            tag_value=$(echo "${{ inputs.github_ref }}" | sed 's_refs/tags/\(.*\)_\1_')
          elif [[ "${{ inputs.github_ref }}" == refs/pull/* ]]; then
            tag_value="pr-${GITHUB_HEAD_REF_SLUG:-$GITHUB_REF_SLUG}"
          else
            tag_value="${GITHUB_REF_SLUG}"
          fi
          echo "tag=$tag_value" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        if: ${{ inputs.run_build_image }}
        env:
          TRIVY_USERNAME: ${{ secrets.GITHUB_ACTOR }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        with:
          image-ref: ${{ inputs.container_registry }}/${{ inputs.github_repository }}/${{ inputs.module }}:${{ steps.build_image_ko_step.outputs.digest }}
          exit-code: "1"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Run govulncheck
        if: ${{ inputs.run_vulnerability_check }}
        uses: golang/govulncheck-action@b625fbe08f3bccbe446d94fbf87fcc875a4f50ee # pin@1.0.4
        with:
          go-package: ./...
          work-dir: ${{ inputs.module }}

      - name: Initialize CodeQL
        if: ${{ inputs.run_code_analysis }}
        uses: github/codeql-action/init@4dd16135b69a43b6c8efb853346f8437d92d3c93 # pinv3.26.6
        with:
          languages: go
          build-mode: manual

      - name: Build module for CodeQL
        if: ${{ inputs.run_code_analysis }}
        shell: bash
        working-directory: ${{ inputs.module }}
        run: |
          echo "Attempting to build ${{ inputs.module }} for CodeQL analysis..."
          if [ -f Makefile ] && grep -q -E "^build[:[:space:]]" Makefile; then
            echo "Found Makefile with build target. Running make build..."
            make build
          elif [ -f go.mod ]; then
            echo "Found go.mod. Running go build ./..."
            go build ./...
          else
            echo "WARNING: No Makefile with a 'build' target or go.mod found in ${{ inputs.module }}. CodeQL may not analyze effectively."
          fi

      - name: Perform CodeQL Analysis
        if: ${{ inputs.run_code_analysis }}
        uses: github/codeql-action/analyze@4dd16135b69a43b6c8efb853346f8437d92d3c93 # pinv3.26.6
        with:
          category: "/language:go"

      - name: Run golangci-lint
        if: ${{ inputs.run_lint }}
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # pin@v6.0.1
        with:
          version: ${{ inputs.golangci_lint_binary_version }}
          working-directory: ${{ inputs.module }}
          args: --timeout 5m
