// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWithBody request with any body
	PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdName request
	GetIdName(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealm request
	DeleteRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealm request
	GetRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmWithBody request with any body
	PutRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealm(ctx context.Context, realm string, body PutRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmAdminEvents request
	DeleteRealmAdminEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAdminEvents request
	GetRealmAdminEvents(ctx context.Context, realm string, params *GetRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmAttackDetectionBruteForceUsers request
	DeleteRealmAttackDetectionBruteForceUsers(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmAttackDetectionBruteForceUsersUserId request
	DeleteRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAttackDetectionBruteForceUsersUserId request
	GetRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationAuthenticatorProviders request
	GetRealmAuthenticationAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationClientAuthenticatorProviders request
	GetRealmAuthenticationClientAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationConfigDescriptionProviderId request
	GetRealmAuthenticationConfigDescriptionProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmAuthenticationConfigId request
	DeleteRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationConfigId request
	GetRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmAuthenticationConfigIdWithBody request with any body
	PutRealmAuthenticationConfigIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmAuthenticationConfigId(ctx context.Context, realm string, id string, body PutRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationExecutionsWithBody request with any body
	PostRealmAuthenticationExecutionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmAuthenticationExecutions(ctx context.Context, realm string, body PostRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmAuthenticationExecutionsExecutionId request
	DeleteRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationExecutionsExecutionId request
	GetRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationExecutionsExecutionIdConfigWithBody request with any body
	PostRealmAuthenticationExecutionsExecutionIdConfigWithBody(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmAuthenticationExecutionsExecutionIdConfig(ctx context.Context, realm string, executionId string, body PostRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationExecutionsExecutionIdLowerPriority request
	PostRealmAuthenticationExecutionsExecutionIdLowerPriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationExecutionsExecutionIdRaisePriority request
	PostRealmAuthenticationExecutionsExecutionIdRaisePriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationFlows request
	GetRealmAuthenticationFlows(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationFlowsWithBody request with any body
	PostRealmAuthenticationFlowsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmAuthenticationFlows(ctx context.Context, realm string, body PostRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationFlowsFlowAliasCopyWithBody request with any body
	PostRealmAuthenticationFlowsFlowAliasCopyWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmAuthenticationFlowsFlowAliasCopy(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationFlowsFlowAliasExecutions request
	GetRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmAuthenticationFlowsFlowAliasExecutionsWithBody request with any body
	PutRealmAuthenticationFlowsFlowAliasExecutionsWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, body PutRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody request with any body
	PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmAuthenticationFlowsFlowAliasExecutionsExecution(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody request with any body
	PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmAuthenticationFlowsFlowAliasExecutionsFlow(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmAuthenticationFlowsId request
	DeleteRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationFlowsId request
	GetRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmAuthenticationFlowsIdWithBody request with any body
	PutRealmAuthenticationFlowsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, body PutRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationFormActionProviders request
	GetRealmAuthenticationFormActionProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationFormProviders request
	GetRealmAuthenticationFormProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationPerClientConfigDescription request
	GetRealmAuthenticationPerClientConfigDescription(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationRegisterRequiredActionWithBody request with any body
	PostRealmAuthenticationRegisterRequiredActionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmAuthenticationRegisterRequiredAction(ctx context.Context, realm string, body PostRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationRequiredActions request
	GetRealmAuthenticationRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmAuthenticationRequiredActionsAlias request
	DeleteRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationRequiredActionsAlias request
	GetRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmAuthenticationRequiredActionsAliasWithBody request with any body
	PutRealmAuthenticationRequiredActionsAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, body PutRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationRequiredActionsAliasLowerPriority request
	PostRealmAuthenticationRequiredActionsAliasLowerPriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmAuthenticationRequiredActionsAliasRaisePriority request
	PostRealmAuthenticationRequiredActionsAliasRaisePriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmAuthenticationUnregisteredRequiredActions request
	GetRealmAuthenticationUnregisteredRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClearKeysCache request
	PostRealmClearKeysCache(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClearRealmCache request
	PostRealmClearRealmCache(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClearUserCache request
	PostRealmClearUserCache(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientDescriptionConverterWithBody request with any body
	PostRealmClientDescriptionConverterWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientDescriptionConverterWithTextBody(ctx context.Context, realm string, body PostRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientRegistrationPolicyProviders request
	GetRealmClientRegistrationPolicyProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopes request
	GetRealmClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientScopesWithBody request with any body
	PostRealmClientScopesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientScopes(ctx context.Context, realm string, body PostRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientScopesId1ProtocolMappersModelsId2 request
	DeleteRealmClientScopesId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesId1ProtocolMappersModelsId2 request
	GetRealmClientScopesId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientScopesId1ProtocolMappersModelsId2WithBody request with any body
	PutRealmClientScopesId1ProtocolMappersModelsId2WithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmClientScopesId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientScopesId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientScopesId request
	DeleteRealmClientScopesId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesId request
	GetRealmClientScopesId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientScopesIdWithBody request with any body
	PutRealmClientScopesIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmClientScopesId(ctx context.Context, realm string, id string, body PutRealmClientScopesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientScopesIdProtocolMappersAddModelsWithBody request with any body
	PostRealmClientScopesIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientScopesIdProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdProtocolMappersModels request
	GetRealmClientScopesIdProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientScopesIdProtocolMappersModelsWithBody request with any body
	PostRealmClientScopesIdProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientScopesIdProtocolMappersModels(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdProtocolMappersProtocolProtocol request
	GetRealmClientScopesIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdScopeMappings request
	GetRealmClientScopesIdScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientScopesIdScopeMappingsClientsClientWithBody request with any body
	DeleteRealmClientScopesIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmClientScopesIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdScopeMappingsClientsClient request
	GetRealmClientScopesIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientScopesIdScopeMappingsClientsClientWithBody request with any body
	PostRealmClientScopesIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientScopesIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdScopeMappingsClientsClientAvailable request
	GetRealmClientScopesIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdScopeMappingsClientsClientComposite request
	GetRealmClientScopesIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientScopesIdScopeMappingsRealmWithBody request with any body
	DeleteRealmClientScopesIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmClientScopesIdScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdScopeMappingsRealm request
	GetRealmClientScopesIdScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientScopesIdScopeMappingsRealmWithBody request with any body
	PostRealmClientScopesIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientScopesIdScopeMappingsRealm(ctx context.Context, realm string, id string, body PostRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdScopeMappingsRealmAvailable request
	GetRealmClientScopesIdScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientScopesIdScopeMappingsRealmComposite request
	GetRealmClientScopesIdScopeMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientSessionStats request
	GetRealmClientSessionStats(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClients request
	GetRealmClients(ctx context.Context, realm string, params *GetRealmClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsWithBody request with any body
	PostRealmClientsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClients(ctx context.Context, realm string, body PostRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsInitialAccess request
	GetRealmClientsInitialAccess(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsInitialAccessWithBody request with any body
	PostRealmClientsInitialAccessWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsInitialAccess(ctx context.Context, realm string, body PostRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsInitialAccessId request
	DeleteRealmClientsInitialAccessId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsId1ProtocolMappersModelsId2 request
	DeleteRealmClientsId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsId1ProtocolMappersModelsId2 request
	GetRealmClientsId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientsId1ProtocolMappersModelsId2WithBody request with any body
	PutRealmClientsId1ProtocolMappersModelsId2WithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmClientsId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientsId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsId request
	DeleteRealmClientsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsId request
	GetRealmClientsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientsIdWithBody request with any body
	PutRealmClientsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmClientsId(ctx context.Context, realm string, id string, body PutRealmClientsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdCertificatesAttr request
	GetRealmClientsIdCertificatesAttr(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdCertificatesAttrDownloadWithBody request with any body
	PostRealmClientsIdCertificatesAttrDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdCertificatesAttrDownload(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdCertificatesAttrGenerate request
	PostRealmClientsIdCertificatesAttrGenerate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBody request with any body
	PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdCertificatesAttrGenerateAndDownload(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdCertificatesAttrUpload request
	PostRealmClientsIdCertificatesAttrUpload(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdCertificatesAttrUploadCertificate request
	PostRealmClientsIdCertificatesAttrUploadCertificate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdClientSecret request
	GetRealmClientsIdClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdClientSecret request
	PostRealmClientsIdClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdDefaultClientScopes request
	GetRealmClientsIdDefaultClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsIdDefaultClientScopesClientScopeId request
	DeleteRealmClientsIdDefaultClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientsIdDefaultClientScopesClientScopeId request
	PutRealmClientsIdDefaultClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdEvaluateScopesGenerateExampleAccessToken request
	GetRealmClientsIdEvaluateScopesGenerateExampleAccessToken(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdEvaluateScopesProtocolMappers request
	GetRealmClientsIdEvaluateScopesProtocolMappers(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGranted request
	GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGranted request
	GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdInstallationProvidersProviderId request
	GetRealmClientsIdInstallationProvidersProviderId(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdManagementPermissions request
	GetRealmClientsIdManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientsIdManagementPermissionsWithBody request with any body
	PutRealmClientsIdManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmClientsIdManagementPermissions(ctx context.Context, realm string, id string, body PutRealmClientsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdNodesWithBody request with any body
	PostRealmClientsIdNodesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdNodes(ctx context.Context, realm string, id string, body PostRealmClientsIdNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsIdNodesNode request
	DeleteRealmClientsIdNodesNode(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdOfflineSessionCount request
	GetRealmClientsIdOfflineSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdOfflineSessions request
	GetRealmClientsIdOfflineSessions(ctx context.Context, realm string, id string, params *GetRealmClientsIdOfflineSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdOptionalClientScopes request
	GetRealmClientsIdOptionalClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsIdOptionalClientScopesClientScopeId request
	DeleteRealmClientsIdOptionalClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientsIdOptionalClientScopesClientScopeId request
	PutRealmClientsIdOptionalClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdProtocolMappersAddModelsWithBody request with any body
	PostRealmClientsIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdProtocolMappersModels request
	GetRealmClientsIdProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdProtocolMappersModelsWithBody request with any body
	PostRealmClientsIdProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdProtocolMappersModels(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdProtocolMappersProtocolProtocol request
	GetRealmClientsIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdPushRevocation request
	PostRealmClientsIdPushRevocation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdRegistrationAccessToken request
	PostRealmClientsIdRegistrationAccessToken(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRoles request
	GetRealmClientsIdRoles(ctx context.Context, realm string, id string, params *GetRealmClientsIdRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdRolesWithBody request with any body
	PostRealmClientsIdRolesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdRoles(ctx context.Context, realm string, id string, body PostRealmClientsIdRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsIdRolesRoleName request
	DeleteRealmClientsIdRolesRoleName(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRolesRoleName request
	GetRealmClientsIdRolesRoleName(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientsIdRolesRoleNameWithBody request with any body
	PutRealmClientsIdRolesRoleNameWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmClientsIdRolesRoleName(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsIdRolesRoleNameCompositesWithBody request with any body
	DeleteRealmClientsIdRolesRoleNameCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmClientsIdRolesRoleNameComposites(ctx context.Context, realm string, id string, roleName string, body DeleteRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRolesRoleNameComposites request
	GetRealmClientsIdRolesRoleNameComposites(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdRolesRoleNameCompositesWithBody request with any body
	PostRealmClientsIdRolesRoleNameCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdRolesRoleNameComposites(ctx context.Context, realm string, id string, roleName string, body PostRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRolesRoleNameCompositesClientsClient request
	GetRealmClientsIdRolesRoleNameCompositesClientsClient(ctx context.Context, realm string, id string, roleName string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRolesRoleNameCompositesRealm request
	GetRealmClientsIdRolesRoleNameCompositesRealm(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRolesRoleNameGroups request
	GetRealmClientsIdRolesRoleNameGroups(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRolesRoleNameManagementPermissions request
	GetRealmClientsIdRolesRoleNameManagementPermissions(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmClientsIdRolesRoleNameManagementPermissionsWithBody request with any body
	PutRealmClientsIdRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmClientsIdRolesRoleNameManagementPermissions(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdRolesRoleNameUsers request
	GetRealmClientsIdRolesRoleNameUsers(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdScopeMappings request
	GetRealmClientsIdScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsIdScopeMappingsClientsClientWithBody request with any body
	DeleteRealmClientsIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmClientsIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdScopeMappingsClientsClient request
	GetRealmClientsIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdScopeMappingsClientsClientWithBody request with any body
	PostRealmClientsIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdScopeMappingsClientsClientAvailable request
	GetRealmClientsIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdScopeMappingsClientsClientComposite request
	GetRealmClientsIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmClientsIdScopeMappingsRealmWithBody request with any body
	DeleteRealmClientsIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmClientsIdScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdScopeMappingsRealm request
	GetRealmClientsIdScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmClientsIdScopeMappingsRealmWithBody request with any body
	PostRealmClientsIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmClientsIdScopeMappingsRealm(ctx context.Context, realm string, id string, body PostRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdScopeMappingsRealmAvailable request
	GetRealmClientsIdScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdScopeMappingsRealmComposite request
	GetRealmClientsIdScopeMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdServiceAccountUser request
	GetRealmClientsIdServiceAccountUser(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdSessionCount request
	GetRealmClientsIdSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdTestNodesAvailable request
	GetRealmClientsIdTestNodesAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmClientsIdUserSessions request
	GetRealmClientsIdUserSessions(ctx context.Context, realm string, id string, params *GetRealmClientsIdUserSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmComponents request
	GetRealmComponents(ctx context.Context, realm string, params *GetRealmComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmComponentsWithBody request with any body
	PostRealmComponentsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmComponents(ctx context.Context, realm string, body PostRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmComponentsId request
	DeleteRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmComponentsId request
	GetRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmComponentsIdWithBody request with any body
	PutRealmComponentsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmComponentsId(ctx context.Context, realm string, id string, body PutRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmComponentsIdSubComponentTypes request
	GetRealmComponentsIdSubComponentTypes(ctx context.Context, realm string, id string, params *GetRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmCredentialRegistrators request
	GetRealmCredentialRegistrators(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmDefaultDefaultClientScopes request
	GetRealmDefaultDefaultClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmDefaultDefaultClientScopesClientScopeId request
	DeleteRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmDefaultDefaultClientScopesClientScopeId request
	PutRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmDefaultGroups request
	GetRealmDefaultGroups(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmDefaultGroupsGroupId request
	DeleteRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmDefaultGroupsGroupId request
	PutRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmDefaultOptionalClientScopes request
	GetRealmDefaultOptionalClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmDefaultOptionalClientScopesClientScopeId request
	DeleteRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmDefaultOptionalClientScopesClientScopeId request
	PutRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmEvents request
	DeleteRealmEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmEvents request
	GetRealmEvents(ctx context.Context, realm string, params *GetRealmEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmEventsConfig request
	GetRealmEventsConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmEventsConfigWithBody request with any body
	PutRealmEventsConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmEventsConfig(ctx context.Context, realm string, body PutRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupByPathPath request
	GetRealmGroupByPathPath(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroups request
	GetRealmGroups(ctx context.Context, realm string, params *GetRealmGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmGroupsWithBody request with any body
	PostRealmGroupsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmGroups(ctx context.Context, realm string, body PostRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsCount request
	GetRealmGroupsCount(ctx context.Context, realm string, params *GetRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmGroupsId request
	DeleteRealmGroupsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsId request
	GetRealmGroupsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmGroupsIdWithBody request with any body
	PutRealmGroupsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmGroupsId(ctx context.Context, realm string, id string, body PutRealmGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmGroupsIdChildrenWithBody request with any body
	PostRealmGroupsIdChildrenWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmGroupsIdChildren(ctx context.Context, realm string, id string, body PostRealmGroupsIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdManagementPermissions request
	GetRealmGroupsIdManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmGroupsIdManagementPermissionsWithBody request with any body
	PutRealmGroupsIdManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmGroupsIdManagementPermissions(ctx context.Context, realm string, id string, body PutRealmGroupsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdMembers request
	GetRealmGroupsIdMembers(ctx context.Context, realm string, id string, params *GetRealmGroupsIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdRoleMappings request
	GetRealmGroupsIdRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmGroupsIdRoleMappingsClientsClientWithBody request with any body
	DeleteRealmGroupsIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmGroupsIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdRoleMappingsClientsClient request
	GetRealmGroupsIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmGroupsIdRoleMappingsClientsClientWithBody request with any body
	PostRealmGroupsIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmGroupsIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdRoleMappingsClientsClientAvailable request
	GetRealmGroupsIdRoleMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdRoleMappingsClientsClientComposite request
	GetRealmGroupsIdRoleMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmGroupsIdRoleMappingsRealmWithBody request with any body
	DeleteRealmGroupsIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmGroupsIdRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdRoleMappingsRealm request
	GetRealmGroupsIdRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmGroupsIdRoleMappingsRealmWithBody request with any body
	PostRealmGroupsIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmGroupsIdRoleMappingsRealm(ctx context.Context, realm string, id string, body PostRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdRoleMappingsRealmAvailable request
	GetRealmGroupsIdRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmGroupsIdRoleMappingsRealmComposite request
	GetRealmGroupsIdRoleMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmIdentityProviderImportConfig request
	PostRealmIdentityProviderImportConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderInstances request
	GetRealmIdentityProviderInstances(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmIdentityProviderInstancesWithBody request with any body
	PostRealmIdentityProviderInstancesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmIdentityProviderInstances(ctx context.Context, realm string, body PostRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmIdentityProviderInstancesAlias request
	DeleteRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderInstancesAlias request
	GetRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmIdentityProviderInstancesAliasWithBody request with any body
	PutRealmIdentityProviderInstancesAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderInstancesAliasExport request
	GetRealmIdentityProviderInstancesAliasExport(ctx context.Context, realm string, alias string, params *GetRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderInstancesAliasManagementPermissions request
	GetRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBody request with any body
	PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderInstancesAliasMapperTypes request
	GetRealmIdentityProviderInstancesAliasMapperTypes(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderInstancesAliasMappers request
	GetRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmIdentityProviderInstancesAliasMappersWithBody request with any body
	PostRealmIdentityProviderInstancesAliasMappersWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, body PostRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmIdentityProviderInstancesAliasMappersId request
	DeleteRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderInstancesAliasMappersId request
	GetRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmIdentityProviderInstancesAliasMappersIdWithBody request with any body
	PutRealmIdentityProviderInstancesAliasMappersIdWithBody(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, body PutRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmIdentityProviderProvidersProviderId request
	GetRealmIdentityProviderProvidersProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmKeys request
	GetRealmKeys(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmLogoutAll request
	PostRealmLogoutAll(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmPartialExport request
	PostRealmPartialExport(ctx context.Context, realm string, params *PostRealmPartialExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmPartialImportWithBody request with any body
	PostRealmPartialImportWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmPartialImport(ctx context.Context, realm string, body PostRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmPushRevocation request
	PostRealmPushRevocation(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRoles request
	GetRealmRoles(ctx context.Context, realm string, params *GetRealmRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmRolesWithBody request with any body
	PostRealmRolesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmRoles(ctx context.Context, realm string, body PostRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmRolesByIdRoleId request
	DeleteRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesByIdRoleId request
	GetRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmRolesByIdRoleIdWithBody request with any body
	PutRealmRolesByIdRoleIdWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmRolesByIdRoleIdCompositesWithBody request with any body
	DeleteRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body DeleteRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesByIdRoleIdComposites request
	GetRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmRolesByIdRoleIdCompositesWithBody request with any body
	PostRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body PostRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesByIdRoleIdCompositesClientsClient request
	GetRealmRolesByIdRoleIdCompositesClientsClient(ctx context.Context, realm string, roleId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesByIdRoleIdCompositesRealm request
	GetRealmRolesByIdRoleIdCompositesRealm(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesByIdRoleIdManagementPermissions request
	GetRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmRolesByIdRoleIdManagementPermissionsWithBody request with any body
	PutRealmRolesByIdRoleIdManagementPermissionsWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmRolesRoleName request
	DeleteRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesRoleName request
	GetRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmRolesRoleNameWithBody request with any body
	PutRealmRolesRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmRolesRoleName(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmRolesRoleNameCompositesWithBody request with any body
	DeleteRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body DeleteRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesRoleNameComposites request
	GetRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmRolesRoleNameCompositesWithBody request with any body
	PostRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body PostRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesRoleNameCompositesClientsClient request
	GetRealmRolesRoleNameCompositesClientsClient(ctx context.Context, realm string, roleName string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesRoleNameCompositesRealm request
	GetRealmRolesRoleNameCompositesRealm(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesRoleNameGroups request
	GetRealmRolesRoleNameGroups(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesRoleNameManagementPermissions request
	GetRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmRolesRoleNameManagementPermissionsWithBody request with any body
	PutRealmRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmRolesRoleNameUsers request
	GetRealmRolesRoleNameUsers(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmSessionsSession request
	DeleteRealmSessionsSession(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmTestLDAPConnectionWithBody request with any body
	PostRealmTestLDAPConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmTestLDAPConnection(ctx context.Context, realm string, body PostRealmTestLDAPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmTestSMTPConnectionWithBody request with any body
	PostRealmTestSMTPConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmTestSMTPConnection(ctx context.Context, realm string, body PostRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUserStorageIdName request
	GetRealmUserStorageIdName(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUserStorageIdRemoveImportedUsers request
	PostRealmUserStorageIdRemoveImportedUsers(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUserStorageIdSync request
	PostRealmUserStorageIdSync(ctx context.Context, realm string, id string, params *PostRealmUserStorageIdSyncParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUserStorageIdUnlinkUsers request
	PostRealmUserStorageIdUnlinkUsers(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUserStorageParentIdMappersIdSync request
	PostRealmUserStorageParentIdMappersIdSync(ctx context.Context, realm string, parentId string, id string, params *PostRealmUserStorageParentIdMappersIdSyncParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsers request
	GetRealmUsers(ctx context.Context, realm string, params *GetRealmUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersWithBody request with any body
	PostRealmUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmUsers(ctx context.Context, realm string, body PostRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersManagementPermissions request
	GetRealmUsersManagementPermissions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersManagementPermissionsWithBody request with any body
	PutRealmUsersManagementPermissionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmUsersManagementPermissions(ctx context.Context, realm string, body PutRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersCount request
	GetRealmUsersCount(ctx context.Context, realm string, params *GetRealmUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmUsersId request
	DeleteRealmUsersId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersId request
	GetRealmUsersId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersIdWithBody request with any body
	PutRealmUsersIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmUsersId(ctx context.Context, realm string, id string, body PutRealmUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdConfiguredUserStorageCredentialTypes request
	GetRealmUsersIdConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdConsents request
	GetRealmUsersIdConsents(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmUsersIdConsentsClient request
	DeleteRealmUsersIdConsentsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdCredentials request
	GetRealmUsersIdCredentials(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmUsersIdCredentialsCredentialId request
	DeleteRealmUsersIdCredentialsCredentialId(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId request
	PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersIdCredentialsCredentialIdMoveToFirst request
	PostRealmUsersIdCredentialsCredentialIdMoveToFirst(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersIdCredentialsCredentialIdUserLabelWithBody request with any body
	PutRealmUsersIdCredentialsCredentialIdUserLabelWithBody(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmUsersIdCredentialsCredentialIdUserLabelWithTextBody(ctx context.Context, realm string, id string, credentialId string, body PutRealmUsersIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersIdDisableCredentialTypesWithBody request with any body
	PutRealmUsersIdDisableCredentialTypesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmUsersIdDisableCredentialTypes(ctx context.Context, realm string, id string, body PutRealmUsersIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersIdExecuteActionsEmailWithBody request with any body
	PutRealmUsersIdExecuteActionsEmailWithBody(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmUsersIdExecuteActionsEmail(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, body PutRealmUsersIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdFederatedIdentity request
	GetRealmUsersIdFederatedIdentity(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmUsersIdFederatedIdentityProvider request
	DeleteRealmUsersIdFederatedIdentityProvider(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersIdFederatedIdentityProviderWithBody request with any body
	PostRealmUsersIdFederatedIdentityProviderWithBody(ctx context.Context, realm string, id string, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmUsersIdFederatedIdentityProvider(ctx context.Context, realm string, id string, provider string, body PostRealmUsersIdFederatedIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdGroups request
	GetRealmUsersIdGroups(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdGroupsCount request
	GetRealmUsersIdGroupsCount(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmUsersIdGroupsGroupId request
	DeleteRealmUsersIdGroupsGroupId(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersIdGroupsGroupId request
	PutRealmUsersIdGroupsGroupId(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersIdImpersonation request
	PostRealmUsersIdImpersonation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersIdLogout request
	PostRealmUsersIdLogout(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdOfflineSessionsClientId request
	GetRealmUsersIdOfflineSessionsClientId(ctx context.Context, realm string, id string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersIdResetPasswordWithBody request with any body
	PutRealmUsersIdResetPasswordWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRealmUsersIdResetPassword(ctx context.Context, realm string, id string, body PutRealmUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdRoleMappings request
	GetRealmUsersIdRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmUsersIdRoleMappingsClientsClientWithBody request with any body
	DeleteRealmUsersIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmUsersIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdRoleMappingsClientsClient request
	GetRealmUsersIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersIdRoleMappingsClientsClientWithBody request with any body
	PostRealmUsersIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmUsersIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdRoleMappingsClientsClientAvailable request
	GetRealmUsersIdRoleMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdRoleMappingsClientsClientComposite request
	GetRealmUsersIdRoleMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRealmUsersIdRoleMappingsRealmWithBody request with any body
	DeleteRealmUsersIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRealmUsersIdRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdRoleMappingsRealm request
	GetRealmUsersIdRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRealmUsersIdRoleMappingsRealmWithBody request with any body
	PostRealmUsersIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRealmUsersIdRoleMappingsRealm(ctx context.Context, realm string, id string, body PostRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdRoleMappingsRealmAvailable request
	GetRealmUsersIdRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdRoleMappingsRealmComposite request
	GetRealmUsersIdRoleMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRealmUsersIdSendVerifyEmail request
	PutRealmUsersIdSendVerifyEmail(ctx context.Context, realm string, id string, params *PutRealmUsersIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRealmUsersIdSessions request
	GetRealmUsersIdSessions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdName(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdNameRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealm(ctx context.Context, realm string, body PutRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmAdminEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmAdminEventsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAdminEvents(ctx context.Context, realm string, params *GetRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAdminEventsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmAttackDetectionBruteForceUsers(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmAttackDetectionBruteForceUsersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmAttackDetectionBruteForceUsersUserIdRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAttackDetectionBruteForceUsersUserIdRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationAuthenticatorProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationClientAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationClientAuthenticatorProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationConfigDescriptionProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationConfigDescriptionProviderIdRequest(c.Server, realm, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmAuthenticationConfigIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationConfigIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationConfigIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationConfigIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationConfigId(ctx context.Context, realm string, id string, body PutRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationConfigIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationExecutionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationExecutionsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationExecutions(ctx context.Context, realm string, body PostRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationExecutionsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmAuthenticationExecutionsExecutionIdRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationExecutionsExecutionIdRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationExecutionsExecutionIdConfigWithBody(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody(c.Server, realm, executionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationExecutionsExecutionIdConfig(ctx context.Context, realm string, executionId string, body PostRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationExecutionsExecutionIdConfigRequest(c.Server, realm, executionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationExecutionsExecutionIdLowerPriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationExecutionsExecutionIdRaisePriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationFlows(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationFlowsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlowsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlows(ctx context.Context, realm string, body PostRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlowsFlowAliasCopyWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsFlowAliasCopyRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlowsFlowAliasCopy(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsFlowAliasCopyRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationFlowsFlowAliasExecutionsRequest(c.Server, realm, flowAlias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationFlowsFlowAliasExecutionsWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, body PutRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationFlowsFlowAliasExecutionsRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlowsFlowAliasExecutionsExecution(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationFlowsFlowAliasExecutionsFlow(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmAuthenticationFlowsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationFlowsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationFlowsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationFlowsIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, body PutRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationFlowsIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationFormActionProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationFormActionProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationFormProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationFormProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationPerClientConfigDescription(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationPerClientConfigDescriptionRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationRegisterRequiredActionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationRegisterRequiredActionRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationRegisterRequiredAction(ctx context.Context, realm string, body PostRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationRegisterRequiredActionRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationRequiredActionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmAuthenticationRequiredActionsAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationRequiredActionsAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationRequiredActionsAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationRequiredActionsAliasRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, body PutRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmAuthenticationRequiredActionsAliasRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationRequiredActionsAliasLowerPriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmAuthenticationRequiredActionsAliasRaisePriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmAuthenticationUnregisteredRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmAuthenticationUnregisteredRequiredActionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClearKeysCache(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClearKeysCacheRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClearRealmCache(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClearRealmCacheRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClearUserCache(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClearUserCacheRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientDescriptionConverterWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientDescriptionConverterRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientDescriptionConverterWithTextBody(ctx context.Context, realm string, body PostRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientDescriptionConverterRequestWithTextBody(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientRegistrationPolicyProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientRegistrationPolicyProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopes(ctx context.Context, realm string, body PostRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientScopesId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientScopesId1ProtocolMappersModelsId2Request(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesId1ProtocolMappersModelsId2Request(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientScopesId1ProtocolMappersModelsId2WithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientScopesId1ProtocolMappersModelsId2RequestWithBody(c.Server, realm, id1, id2, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientScopesId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientScopesId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientScopesId1ProtocolMappersModelsId2Request(c.Server, realm, id1, id2, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientScopesId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientScopesIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientScopesIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientScopesIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientScopesId(ctx context.Context, realm string, id string, body PutRealmClientScopesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientScopesIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdProtocolMappersAddModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdProtocolMappersAddModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdProtocolMappersModelsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdProtocolMappersModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdProtocolMappersModels(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdProtocolMappersModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdProtocolMappersProtocolProtocolRequest(c.Server, realm, id, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdScopeMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientScopesIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientScopesIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientScopesIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientScopesIdScopeMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdScopeMappingsClientsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdScopeMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientScopesIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientScopesIdScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientScopesIdScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientScopesIdScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdScopeMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientScopesIdScopeMappingsRealm(ctx context.Context, realm string, id string, body PostRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientScopesIdScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdScopeMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientScopesIdScopeMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientScopesIdScopeMappingsRealmCompositeRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientSessionStats(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientSessionStatsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClients(ctx context.Context, realm string, params *GetRealmClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClients(ctx context.Context, realm string, body PostRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsInitialAccess(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsInitialAccessRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsInitialAccessWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsInitialAccessRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsInitialAccess(ctx context.Context, realm string, body PostRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsInitialAccessRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsInitialAccessId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsInitialAccessIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsId1ProtocolMappersModelsId2Request(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsId1ProtocolMappersModelsId2Request(c.Server, realm, id1, id2)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsId1ProtocolMappersModelsId2WithBody(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsId1ProtocolMappersModelsId2RequestWithBody(c.Server, realm, id1, id2, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsId1ProtocolMappersModelsId2(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientsId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsId1ProtocolMappersModelsId2Request(c.Server, realm, id1, id2, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsId(ctx context.Context, realm string, id string, body PutRealmClientsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdCertificatesAttr(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdCertificatesAttrRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdCertificatesAttrDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdCertificatesAttrDownloadRequestWithBody(c.Server, realm, id, attr, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdCertificatesAttrDownload(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdCertificatesAttrDownloadRequest(c.Server, realm, id, attr, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdCertificatesAttrGenerate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdCertificatesAttrGenerateRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBody(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdCertificatesAttrGenerateAndDownloadRequestWithBody(c.Server, realm, id, attr, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdCertificatesAttrGenerateAndDownload(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdCertificatesAttrGenerateAndDownloadRequest(c.Server, realm, id, attr, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdCertificatesAttrUpload(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdCertificatesAttrUploadRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdCertificatesAttrUploadCertificate(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdCertificatesAttrUploadCertificateRequest(c.Server, realm, id, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdClientSecretRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdClientSecret(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdClientSecretRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdDefaultClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdDefaultClientScopesRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdDefaultClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdDefaultClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdDefaultClientScopesClientScopeIdRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdEvaluateScopesGenerateExampleAccessToken(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdEvaluateScopesProtocolMappers(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdEvaluateScopesProtocolMappersRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest(c.Server, realm, id, roleContainerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGranted(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest(c.Server, realm, id, roleContainerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdInstallationProvidersProviderId(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdInstallationProvidersProviderIdRequest(c.Server, realm, id, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdManagementPermissionsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdManagementPermissionsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdManagementPermissions(ctx context.Context, realm string, id string, body PutRealmClientsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdManagementPermissionsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdNodesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdNodesRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdNodes(ctx context.Context, realm string, id string, body PostRealmClientsIdNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdNodesRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdNodesNode(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdNodesNodeRequest(c.Server, realm, id, node)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdOfflineSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdOfflineSessionCountRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdOfflineSessions(ctx context.Context, realm string, id string, params *GetRealmClientsIdOfflineSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdOfflineSessionsRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdOptionalClientScopes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdOptionalClientScopesRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdOptionalClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdOptionalClientScopesClientScopeId(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdOptionalClientScopesClientScopeIdRequest(c.Server, realm, id, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdProtocolMappersAddModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdProtocolMappersAddModels(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdProtocolMappersAddModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdProtocolMappersModels(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdProtocolMappersModelsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdProtocolMappersModelsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdProtocolMappersModelsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdProtocolMappersModels(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdProtocolMappersModelsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdProtocolMappersProtocolProtocolRequest(c.Server, realm, id, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdPushRevocation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdPushRevocationRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdRegistrationAccessToken(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdRegistrationAccessTokenRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRoles(ctx context.Context, realm string, id string, params *GetRealmClientsIdRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdRolesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdRolesRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdRoles(ctx context.Context, realm string, id string, body PostRealmClientsIdRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdRolesRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdRolesRoleName(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdRolesRoleNameRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRolesRoleName(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRoleNameRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdRolesRoleNameWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdRolesRoleNameRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdRolesRoleName(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdRolesRoleNameRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdRolesRoleNameCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdRolesRoleNameCompositesRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdRolesRoleNameComposites(ctx context.Context, realm string, id string, roleName string, body DeleteRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdRolesRoleNameCompositesRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRolesRoleNameComposites(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRoleNameCompositesRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdRolesRoleNameCompositesWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdRolesRoleNameCompositesRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdRolesRoleNameComposites(ctx context.Context, realm string, id string, roleName string, body PostRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdRolesRoleNameCompositesRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRolesRoleNameCompositesClientsClient(ctx context.Context, realm string, id string, roleName string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRoleNameCompositesClientsClientRequest(c.Server, realm, id, roleName, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRolesRoleNameCompositesRealm(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRoleNameCompositesRealmRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRolesRoleNameGroups(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRoleNameGroupsRequest(c.Server, realm, id, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRolesRoleNameManagementPermissions(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRoleNameManagementPermissionsRequest(c.Server, realm, id, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdRolesRoleNameManagementPermissionsRequestWithBody(c.Server, realm, id, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmClientsIdRolesRoleNameManagementPermissions(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmClientsIdRolesRoleNameManagementPermissionsRequest(c.Server, realm, id, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdRolesRoleNameUsers(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdRolesRoleNameUsersRequest(c.Server, realm, id, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdScopeMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdScopeMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdScopeMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdScopeMappingsClientsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdScopeMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdScopeMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdScopeMappingsClientsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdScopeMappingsClientsClientCompositeRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmClientsIdScopeMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmClientsIdScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdScopeMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdScopeMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdScopeMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdScopeMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmClientsIdScopeMappingsRealm(ctx context.Context, realm string, id string, body PostRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmClientsIdScopeMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdScopeMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdScopeMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdScopeMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdScopeMappingsRealmCompositeRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdServiceAccountUser(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdServiceAccountUserRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdSessionCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdSessionCountRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdTestNodesAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdTestNodesAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmClientsIdUserSessions(ctx context.Context, realm string, id string, params *GetRealmClientsIdUserSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmClientsIdUserSessionsRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmComponents(ctx context.Context, realm string, params *GetRealmComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmComponentsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmComponentsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmComponentsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmComponents(ctx context.Context, realm string, body PostRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmComponentsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmComponentsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmComponentsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmComponentsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmComponentsIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmComponentsId(ctx context.Context, realm string, id string, body PutRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmComponentsIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmComponentsIdSubComponentTypes(ctx context.Context, realm string, id string, params *GetRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmComponentsIdSubComponentTypesRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmCredentialRegistrators(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmCredentialRegistratorsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmDefaultDefaultClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmDefaultDefaultClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmDefaultDefaultClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmDefaultDefaultClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmDefaultGroups(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmDefaultGroupsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmDefaultGroupsGroupIdRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmDefaultGroupsGroupIdRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmDefaultOptionalClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmDefaultOptionalClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmDefaultOptionalClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmDefaultOptionalClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmEventsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmEvents(ctx context.Context, realm string, params *GetRealmEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmEventsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmEventsConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmEventsConfigRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmEventsConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmEventsConfigRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmEventsConfig(ctx context.Context, realm string, body PutRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmEventsConfigRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupByPathPath(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupByPathPathRequest(c.Server, realm, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroups(ctx context.Context, realm string, params *GetRealmGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroupsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroups(ctx context.Context, realm string, body PostRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsCount(ctx context.Context, realm string, params *GetRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsCountRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmGroupsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmGroupsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmGroupsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmGroupsIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmGroupsId(ctx context.Context, realm string, id string, body PutRealmGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmGroupsIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroupsIdChildrenWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsIdChildrenRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroupsIdChildren(ctx context.Context, realm string, id string, body PostRealmGroupsIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsIdChildrenRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdManagementPermissions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdManagementPermissionsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmGroupsIdManagementPermissionsWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmGroupsIdManagementPermissionsRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmGroupsIdManagementPermissions(ctx context.Context, realm string, id string, body PutRealmGroupsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmGroupsIdManagementPermissionsRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdMembers(ctx context.Context, realm string, id string, params *GetRealmGroupsIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdMembersRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRoleMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmGroupsIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmGroupsIdRoleMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmGroupsIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmGroupsIdRoleMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRoleMappingsClientsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroupsIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsIdRoleMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroupsIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsIdRoleMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdRoleMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRoleMappingsClientsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdRoleMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRoleMappingsClientsClientCompositeRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmGroupsIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmGroupsIdRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmGroupsIdRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmGroupsIdRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRoleMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroupsIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsIdRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmGroupsIdRoleMappingsRealm(ctx context.Context, realm string, id string, body PostRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmGroupsIdRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRoleMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmGroupsIdRoleMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmGroupsIdRoleMappingsRealmCompositeRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmIdentityProviderImportConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmIdentityProviderImportConfigRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderInstances(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderInstancesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmIdentityProviderInstancesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmIdentityProviderInstancesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmIdentityProviderInstances(ctx context.Context, realm string, body PostRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmIdentityProviderInstancesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmIdentityProviderInstancesAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderInstancesAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmIdentityProviderInstancesAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmIdentityProviderInstancesAliasRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmIdentityProviderInstancesAliasRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderInstancesAliasExport(ctx context.Context, realm string, alias string, params *GetRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderInstancesAliasExportRequest(c.Server, realm, alias, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderInstancesAliasManagementPermissionsRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmIdentityProviderInstancesAliasManagementPermissionsRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderInstancesAliasMapperTypes(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderInstancesAliasMapperTypesRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderInstancesAliasMappersRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmIdentityProviderInstancesAliasMappersWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmIdentityProviderInstancesAliasMappersRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, body PostRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmIdentityProviderInstancesAliasMappersRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmIdentityProviderInstancesAliasMappersIdRequest(c.Server, realm, alias, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderInstancesAliasMappersIdRequest(c.Server, realm, alias, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmIdentityProviderInstancesAliasMappersIdWithBody(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmIdentityProviderInstancesAliasMappersIdRequestWithBody(c.Server, realm, alias, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, body PutRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmIdentityProviderInstancesAliasMappersIdRequest(c.Server, realm, alias, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmIdentityProviderProvidersProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmIdentityProviderProvidersProviderIdRequest(c.Server, realm, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmKeys(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmKeysRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmLogoutAll(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmLogoutAllRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmPartialExport(ctx context.Context, realm string, params *PostRealmPartialExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmPartialExportRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmPartialImportWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmPartialImportRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmPartialImport(ctx context.Context, realm string, body PostRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmPartialImportRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmPushRevocation(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmPushRevocationRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRoles(ctx context.Context, realm string, params *GetRealmRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmRolesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmRolesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmRoles(ctx context.Context, realm string, body PostRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmRolesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmRolesByIdRoleIdRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesByIdRoleIdRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesByIdRoleIdWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesByIdRoleIdRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesByIdRoleIdRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmRolesByIdRoleIdCompositesRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body DeleteRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmRolesByIdRoleIdCompositesRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesByIdRoleIdCompositesRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmRolesByIdRoleIdCompositesRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body PostRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmRolesByIdRoleIdCompositesRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesByIdRoleIdCompositesClientsClient(ctx context.Context, realm string, roleId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesByIdRoleIdCompositesClientsClientRequest(c.Server, realm, roleId, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesByIdRoleIdCompositesRealm(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesByIdRoleIdCompositesRealmRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesByIdRoleIdManagementPermissionsRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesByIdRoleIdManagementPermissionsWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesByIdRoleIdManagementPermissionsRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesByIdRoleIdManagementPermissionsRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmRolesRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesRoleNameRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesRoleName(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesRoleNameRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmRolesRoleNameCompositesRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body DeleteRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmRolesRoleNameCompositesRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRoleNameCompositesRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmRolesRoleNameCompositesRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body PostRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmRolesRoleNameCompositesRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesRoleNameCompositesClientsClient(ctx context.Context, realm string, roleName string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRoleNameCompositesClientsClientRequest(c.Server, realm, roleName, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesRoleNameCompositesRealm(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRoleNameCompositesRealmRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesRoleNameGroups(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRoleNameGroupsRequest(c.Server, realm, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRoleNameManagementPermissionsRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesRoleNameManagementPermissionsRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmRolesRoleNameManagementPermissionsRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmRolesRoleNameUsers(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmRolesRoleNameUsersRequest(c.Server, realm, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmSessionsSession(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmSessionsSessionRequest(c.Server, realm, session)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmTestLDAPConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmTestLDAPConnectionRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmTestLDAPConnection(ctx context.Context, realm string, body PostRealmTestLDAPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmTestLDAPConnectionRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmTestSMTPConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmTestSMTPConnectionRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmTestSMTPConnection(ctx context.Context, realm string, body PostRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmTestSMTPConnectionRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUserStorageIdName(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUserStorageIdNameRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUserStorageIdRemoveImportedUsers(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUserStorageIdRemoveImportedUsersRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUserStorageIdSync(ctx context.Context, realm string, id string, params *PostRealmUserStorageIdSyncParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUserStorageIdSyncRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUserStorageIdUnlinkUsers(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUserStorageIdUnlinkUsersRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUserStorageParentIdMappersIdSync(ctx context.Context, realm string, parentId string, id string, params *PostRealmUserStorageParentIdMappersIdSyncParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUserStorageParentIdMappersIdSyncRequest(c.Server, realm, parentId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsers(ctx context.Context, realm string, params *GetRealmUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsers(ctx context.Context, realm string, body PostRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersManagementPermissions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersManagementPermissionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersManagementPermissionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersManagementPermissionsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersManagementPermissions(ctx context.Context, realm string, body PutRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersManagementPermissionsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersCount(ctx context.Context, realm string, params *GetRealmUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersCountRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersId(ctx context.Context, realm string, id string, body PutRealmUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdConfiguredUserStorageCredentialTypesRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdConsents(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdConsentsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdConsentsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdConsentsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdCredentials(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdCredentialsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdCredentialsCredentialId(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdCredentialsCredentialIdRequest(c.Server, realm, id, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest(c.Server, realm, id, credentialId, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdCredentialsCredentialIdMoveToFirst(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdCredentialsCredentialIdMoveToFirstRequest(c.Server, realm, id, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdCredentialsCredentialIdUserLabelWithBody(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdCredentialsCredentialIdUserLabelRequestWithBody(c.Server, realm, id, credentialId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdCredentialsCredentialIdUserLabelWithTextBody(ctx context.Context, realm string, id string, credentialId string, body PutRealmUsersIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdCredentialsCredentialIdUserLabelRequestWithTextBody(c.Server, realm, id, credentialId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdDisableCredentialTypesWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdDisableCredentialTypesRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdDisableCredentialTypes(ctx context.Context, realm string, id string, body PutRealmUsersIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdDisableCredentialTypesRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdExecuteActionsEmailWithBody(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdExecuteActionsEmailRequestWithBody(c.Server, realm, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdExecuteActionsEmail(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, body PutRealmUsersIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdExecuteActionsEmailRequest(c.Server, realm, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdFederatedIdentity(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdFederatedIdentityRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdFederatedIdentityProvider(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdFederatedIdentityProviderRequest(c.Server, realm, id, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdFederatedIdentityProviderWithBody(ctx context.Context, realm string, id string, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdFederatedIdentityProviderRequestWithBody(c.Server, realm, id, provider, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdFederatedIdentityProvider(ctx context.Context, realm string, id string, provider string, body PostRealmUsersIdFederatedIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdFederatedIdentityProviderRequest(c.Server, realm, id, provider, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdGroups(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdGroupsRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdGroupsCount(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdGroupsCountRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdGroupsGroupId(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdGroupsGroupIdRequest(c.Server, realm, id, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdGroupsGroupId(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdGroupsGroupIdRequest(c.Server, realm, id, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdImpersonation(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdImpersonationRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdLogout(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdLogoutRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdOfflineSessionsClientId(ctx context.Context, realm string, id string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdOfflineSessionsClientIdRequest(c.Server, realm, id, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdResetPasswordWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdResetPasswordRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdResetPassword(ctx context.Context, realm string, id string, body PutRealmUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdResetPasswordRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdRoleMappings(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRoleMappingsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdRoleMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body DeleteRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdRoleMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRoleMappingsClientsClientRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdRoleMappingsClientsClientWithBody(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdRoleMappingsClientsClientRequestWithBody(c.Server, realm, id, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdRoleMappingsClientsClient(ctx context.Context, realm string, id string, client string, body PostRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdRoleMappingsClientsClientRequest(c.Server, realm, id, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdRoleMappingsClientsClientAvailable(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRoleMappingsClientsClientAvailableRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdRoleMappingsClientsClientComposite(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRoleMappingsClientsClientCompositeRequest(c.Server, realm, id, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRealmUsersIdRoleMappingsRealm(ctx context.Context, realm string, id string, body DeleteRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRealmUsersIdRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdRoleMappingsRealm(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRoleMappingsRealmRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdRoleMappingsRealmWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdRoleMappingsRealmRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRealmUsersIdRoleMappingsRealm(ctx context.Context, realm string, id string, body PostRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRealmUsersIdRoleMappingsRealmRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdRoleMappingsRealmAvailable(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRoleMappingsRealmAvailableRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdRoleMappingsRealmComposite(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdRoleMappingsRealmCompositeRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRealmUsersIdSendVerifyEmail(ctx context.Context, realm string, id string, params *PutRealmUsersIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRealmUsersIdSendVerifyEmailRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRealmUsersIdSessions(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRealmUsersIdSessionsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRequest calls the generic Post builder with application/json body
func NewPostRequest(server string, body PostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRequestWithBody generates requests for Post with any type of body
func NewPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdNameRequest generates requests for GetIdName
func NewGetIdNameRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmRequest generates requests for DeleteRealm
func NewDeleteRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRequest generates requests for GetRealm
func NewGetRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmRequest calls the generic PutRealm builder with application/json body
func NewPutRealmRequest(server string, realm string, body PutRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutRealmRequestWithBody generates requests for PutRealm with any type of body
func NewPutRealmRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmAdminEventsRequest generates requests for DeleteRealmAdminEvents
func NewDeleteRealmAdminEventsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/admin-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAdminEventsRequest generates requests for GetRealmAdminEvents
func NewGetRealmAdminEventsRequest(server string, realm string, params *GetRealmAdminEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/admin-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AuthClient != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authClient", runtime.ParamLocationQuery, *params.AuthClient); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthIpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authIpAddress", runtime.ParamLocationQuery, *params.AuthIpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthRealm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authRealm", runtime.ParamLocationQuery, *params.AuthRealm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authUser", runtime.ParamLocationQuery, *params.AuthUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OperationTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "operationTypes", runtime.ParamLocationQuery, *params.OperationTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourcePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourcePath", runtime.ParamLocationQuery, *params.ResourcePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourceTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceTypes", runtime.ParamLocationQuery, *params.ResourceTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmAttackDetectionBruteForceUsersRequest generates requests for DeleteRealmAttackDetectionBruteForceUsers
func NewDeleteRealmAttackDetectionBruteForceUsersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/attack-detection/brute-force/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmAttackDetectionBruteForceUsersUserIdRequest generates requests for DeleteRealmAttackDetectionBruteForceUsersUserId
func NewDeleteRealmAttackDetectionBruteForceUsersUserIdRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/attack-detection/brute-force/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAttackDetectionBruteForceUsersUserIdRequest generates requests for GetRealmAttackDetectionBruteForceUsersUserId
func NewGetRealmAttackDetectionBruteForceUsersUserIdRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/attack-detection/brute-force/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationAuthenticatorProvidersRequest generates requests for GetRealmAuthenticationAuthenticatorProviders
func NewGetRealmAuthenticationAuthenticatorProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/authenticator-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationClientAuthenticatorProvidersRequest generates requests for GetRealmAuthenticationClientAuthenticatorProviders
func NewGetRealmAuthenticationClientAuthenticatorProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/client-authenticator-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationConfigDescriptionProviderIdRequest generates requests for GetRealmAuthenticationConfigDescriptionProviderId
func NewGetRealmAuthenticationConfigDescriptionProviderIdRequest(server string, realm string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config-description/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmAuthenticationConfigIdRequest generates requests for DeleteRealmAuthenticationConfigId
func NewDeleteRealmAuthenticationConfigIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationConfigIdRequest generates requests for GetRealmAuthenticationConfigId
func NewGetRealmAuthenticationConfigIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmAuthenticationConfigIdRequest calls the generic PutRealmAuthenticationConfigId builder with application/json body
func NewPutRealmAuthenticationConfigIdRequest(server string, realm string, id string, body PutRealmAuthenticationConfigIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmAuthenticationConfigIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmAuthenticationConfigIdRequestWithBody generates requests for PutRealmAuthenticationConfigId with any type of body
func NewPutRealmAuthenticationConfigIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmAuthenticationExecutionsRequest calls the generic PostRealmAuthenticationExecutions builder with application/json body
func NewPostRealmAuthenticationExecutionsRequest(server string, realm string, body PostRealmAuthenticationExecutionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmAuthenticationExecutionsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmAuthenticationExecutionsRequestWithBody generates requests for PostRealmAuthenticationExecutions with any type of body
func NewPostRealmAuthenticationExecutionsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmAuthenticationExecutionsExecutionIdRequest generates requests for DeleteRealmAuthenticationExecutionsExecutionId
func NewDeleteRealmAuthenticationExecutionsExecutionIdRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationExecutionsExecutionIdRequest generates requests for GetRealmAuthenticationExecutionsExecutionId
func NewGetRealmAuthenticationExecutionsExecutionIdRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmAuthenticationExecutionsExecutionIdConfigRequest calls the generic PostRealmAuthenticationExecutionsExecutionIdConfig builder with application/json body
func NewPostRealmAuthenticationExecutionsExecutionIdConfigRequest(server string, realm string, executionId string, body PostRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody(server, realm, executionId, "application/json", bodyReader)
}

// NewPostRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody generates requests for PostRealmAuthenticationExecutionsExecutionIdConfig with any type of body
func NewPostRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody(server string, realm string, executionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s/config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest generates requests for PostRealmAuthenticationExecutionsExecutionIdLowerPriority
func NewPostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s/lower-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest generates requests for PostRealmAuthenticationExecutionsExecutionIdRaisePriority
func NewPostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/executions/%s/raise-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationFlowsRequest generates requests for GetRealmAuthenticationFlows
func NewGetRealmAuthenticationFlowsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmAuthenticationFlowsRequest calls the generic PostRealmAuthenticationFlows builder with application/json body
func NewPostRealmAuthenticationFlowsRequest(server string, realm string, body PostRealmAuthenticationFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmAuthenticationFlowsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmAuthenticationFlowsRequestWithBody generates requests for PostRealmAuthenticationFlows with any type of body
func NewPostRealmAuthenticationFlowsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmAuthenticationFlowsFlowAliasCopyRequest calls the generic PostRealmAuthenticationFlowsFlowAliasCopy builder with application/json body
func NewPostRealmAuthenticationFlowsFlowAliasCopyRequest(server string, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmAuthenticationFlowsFlowAliasCopyRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostRealmAuthenticationFlowsFlowAliasCopyRequestWithBody generates requests for PostRealmAuthenticationFlowsFlowAliasCopy with any type of body
func NewPostRealmAuthenticationFlowsFlowAliasCopyRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/copy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmAuthenticationFlowsFlowAliasExecutionsRequest generates requests for GetRealmAuthenticationFlowsFlowAliasExecutions
func NewGetRealmAuthenticationFlowsFlowAliasExecutionsRequest(server string, realm string, flowAlias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmAuthenticationFlowsFlowAliasExecutionsRequest calls the generic PutRealmAuthenticationFlowsFlowAliasExecutions builder with application/json body
func NewPutRealmAuthenticationFlowsFlowAliasExecutionsRequest(server string, realm string, flowAlias string, body PutRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPutRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody generates requests for PutRealmAuthenticationFlowsFlowAliasExecutions with any type of body
func NewPutRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest calls the generic PostRealmAuthenticationFlowsFlowAliasExecutionsExecution builder with application/json body
func NewPostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest(server string, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody generates requests for PostRealmAuthenticationFlowsFlowAliasExecutionsExecution with any type of body
func NewPostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions/execution", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest calls the generic PostRealmAuthenticationFlowsFlowAliasExecutionsFlow builder with application/json body
func NewPostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest(server string, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody generates requests for PostRealmAuthenticationFlowsFlowAliasExecutionsFlow with any type of body
func NewPostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s/executions/flow", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmAuthenticationFlowsIdRequest generates requests for DeleteRealmAuthenticationFlowsId
func NewDeleteRealmAuthenticationFlowsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationFlowsIdRequest generates requests for GetRealmAuthenticationFlowsId
func NewGetRealmAuthenticationFlowsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmAuthenticationFlowsIdRequest calls the generic PutRealmAuthenticationFlowsId builder with application/json body
func NewPutRealmAuthenticationFlowsIdRequest(server string, realm string, id string, body PutRealmAuthenticationFlowsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmAuthenticationFlowsIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmAuthenticationFlowsIdRequestWithBody generates requests for PutRealmAuthenticationFlowsId with any type of body
func NewPutRealmAuthenticationFlowsIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmAuthenticationFormActionProvidersRequest generates requests for GetRealmAuthenticationFormActionProviders
func NewGetRealmAuthenticationFormActionProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/form-action-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationFormProvidersRequest generates requests for GetRealmAuthenticationFormProviders
func NewGetRealmAuthenticationFormProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/form-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationPerClientConfigDescriptionRequest generates requests for GetRealmAuthenticationPerClientConfigDescription
func NewGetRealmAuthenticationPerClientConfigDescriptionRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/per-client-config-description", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmAuthenticationRegisterRequiredActionRequest calls the generic PostRealmAuthenticationRegisterRequiredAction builder with application/json body
func NewPostRealmAuthenticationRegisterRequiredActionRequest(server string, realm string, body PostRealmAuthenticationRegisterRequiredActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmAuthenticationRegisterRequiredActionRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmAuthenticationRegisterRequiredActionRequestWithBody generates requests for PostRealmAuthenticationRegisterRequiredAction with any type of body
func NewPostRealmAuthenticationRegisterRequiredActionRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/register-required-action", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmAuthenticationRequiredActionsRequest generates requests for GetRealmAuthenticationRequiredActions
func NewGetRealmAuthenticationRequiredActionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmAuthenticationRequiredActionsAliasRequest generates requests for DeleteRealmAuthenticationRequiredActionsAlias
func NewDeleteRealmAuthenticationRequiredActionsAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationRequiredActionsAliasRequest generates requests for GetRealmAuthenticationRequiredActionsAlias
func NewGetRealmAuthenticationRequiredActionsAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmAuthenticationRequiredActionsAliasRequest calls the generic PutRealmAuthenticationRequiredActionsAlias builder with application/json body
func NewPutRealmAuthenticationRequiredActionsAliasRequest(server string, realm string, alias string, body PutRealmAuthenticationRequiredActionsAliasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmAuthenticationRequiredActionsAliasRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutRealmAuthenticationRequiredActionsAliasRequestWithBody generates requests for PutRealmAuthenticationRequiredActionsAlias with any type of body
func NewPutRealmAuthenticationRequiredActionsAliasRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest generates requests for PostRealmAuthenticationRequiredActionsAliasLowerPriority
func NewPostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s/lower-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest generates requests for PostRealmAuthenticationRequiredActionsAliasRaisePriority
func NewPostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/required-actions/%s/raise-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmAuthenticationUnregisteredRequiredActionsRequest generates requests for GetRealmAuthenticationUnregisteredRequiredActions
func NewGetRealmAuthenticationUnregisteredRequiredActionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authentication/unregistered-required-actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClearKeysCacheRequest generates requests for PostRealmClearKeysCache
func NewPostRealmClearKeysCacheRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clear-keys-cache", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClearRealmCacheRequest generates requests for PostRealmClearRealmCache
func NewPostRealmClearRealmCacheRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clear-realm-cache", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClearUserCacheRequest generates requests for PostRealmClearUserCache
func NewPostRealmClearUserCacheRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clear-user-cache", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientDescriptionConverterRequestWithTextBody calls the generic PostRealmClientDescriptionConverter builder with text/plain body
func NewPostRealmClientDescriptionConverterRequestWithTextBody(server string, realm string, body PostRealmClientDescriptionConverterTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostRealmClientDescriptionConverterRequestWithBody(server, realm, "text/plain", bodyReader)
}

// NewPostRealmClientDescriptionConverterRequestWithBody generates requests for PostRealmClientDescriptionConverter with any type of body
func NewPostRealmClientDescriptionConverterRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-description-converter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientRegistrationPolicyProvidersRequest generates requests for GetRealmClientRegistrationPolicyProviders
func NewGetRealmClientRegistrationPolicyProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-registration-policy/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientScopesRequest generates requests for GetRealmClientScopes
func NewGetRealmClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientScopesRequest calls the generic PostRealmClientScopes builder with application/json body
func NewPostRealmClientScopesRequest(server string, realm string, body PostRealmClientScopesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientScopesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmClientScopesRequestWithBody generates requests for PostRealmClientScopes with any type of body
func NewPostRealmClientScopesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmClientScopesId1ProtocolMappersModelsId2Request generates requests for DeleteRealmClientScopesId1ProtocolMappersModelsId2
func NewDeleteRealmClientScopesId1ProtocolMappersModelsId2Request(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientScopesId1ProtocolMappersModelsId2Request generates requests for GetRealmClientScopesId1ProtocolMappersModelsId2
func NewGetRealmClientScopesId1ProtocolMappersModelsId2Request(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientScopesId1ProtocolMappersModelsId2Request calls the generic PutRealmClientScopesId1ProtocolMappersModelsId2 builder with application/json body
func NewPutRealmClientScopesId1ProtocolMappersModelsId2Request(server string, realm string, id1 string, id2 string, body PutRealmClientScopesId1ProtocolMappersModelsId2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmClientScopesId1ProtocolMappersModelsId2RequestWithBody(server, realm, id1, id2, "application/json", bodyReader)
}

// NewPutRealmClientScopesId1ProtocolMappersModelsId2RequestWithBody generates requests for PutRealmClientScopesId1ProtocolMappersModelsId2 with any type of body
func NewPutRealmClientScopesId1ProtocolMappersModelsId2RequestWithBody(server string, realm string, id1 string, id2 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmClientScopesIdRequest generates requests for DeleteRealmClientScopesId
func NewDeleteRealmClientScopesIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientScopesIdRequest generates requests for GetRealmClientScopesId
func NewGetRealmClientScopesIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientScopesIdRequest calls the generic PutRealmClientScopesId builder with application/json body
func NewPutRealmClientScopesIdRequest(server string, realm string, id string, body PutRealmClientScopesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmClientScopesIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmClientScopesIdRequestWithBody generates requests for PutRealmClientScopesId with any type of body
func NewPutRealmClientScopesIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmClientScopesIdProtocolMappersAddModelsRequest calls the generic PostRealmClientScopesIdProtocolMappersAddModels builder with application/json body
func NewPostRealmClientScopesIdProtocolMappersAddModelsRequest(server string, realm string, id string, body PostRealmClientScopesIdProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientScopesIdProtocolMappersAddModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientScopesIdProtocolMappersAddModelsRequestWithBody generates requests for PostRealmClientScopesIdProtocolMappersAddModels with any type of body
func NewPostRealmClientScopesIdProtocolMappersAddModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientScopesIdProtocolMappersModelsRequest generates requests for GetRealmClientScopesIdProtocolMappersModels
func NewGetRealmClientScopesIdProtocolMappersModelsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientScopesIdProtocolMappersModelsRequest calls the generic PostRealmClientScopesIdProtocolMappersModels builder with application/json body
func NewPostRealmClientScopesIdProtocolMappersModelsRequest(server string, realm string, id string, body PostRealmClientScopesIdProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientScopesIdProtocolMappersModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientScopesIdProtocolMappersModelsRequestWithBody generates requests for PostRealmClientScopesIdProtocolMappersModels with any type of body
func NewPostRealmClientScopesIdProtocolMappersModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientScopesIdProtocolMappersProtocolProtocolRequest generates requests for GetRealmClientScopesIdProtocolMappersProtocolProtocol
func NewGetRealmClientScopesIdProtocolMappersProtocolProtocolRequest(server string, realm string, id string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientScopesIdScopeMappingsRequest generates requests for GetRealmClientScopesIdScopeMappings
func NewGetRealmClientScopesIdScopeMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmClientScopesIdScopeMappingsClientsClientRequest calls the generic DeleteRealmClientScopesIdScopeMappingsClientsClient builder with application/json body
func NewDeleteRealmClientScopesIdScopeMappingsClientsClientRequest(server string, realm string, id string, client string, body DeleteRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmClientScopesIdScopeMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteRealmClientScopesIdScopeMappingsClientsClientRequestWithBody generates requests for DeleteRealmClientScopesIdScopeMappingsClientsClient with any type of body
func NewDeleteRealmClientScopesIdScopeMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientScopesIdScopeMappingsClientsClientRequest generates requests for GetRealmClientScopesIdScopeMappingsClientsClient
func NewGetRealmClientScopesIdScopeMappingsClientsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientScopesIdScopeMappingsClientsClientRequest calls the generic PostRealmClientScopesIdScopeMappingsClientsClient builder with application/json body
func NewPostRealmClientScopesIdScopeMappingsClientsClientRequest(server string, realm string, id string, client string, body PostRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientScopesIdScopeMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostRealmClientScopesIdScopeMappingsClientsClientRequestWithBody generates requests for PostRealmClientScopesIdScopeMappingsClientsClient with any type of body
func NewPostRealmClientScopesIdScopeMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest generates requests for GetRealmClientScopesIdScopeMappingsClientsClientAvailable
func NewGetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest generates requests for GetRealmClientScopesIdScopeMappingsClientsClientComposite
func NewGetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmClientScopesIdScopeMappingsRealmRequest calls the generic DeleteRealmClientScopesIdScopeMappingsRealm builder with application/json body
func NewDeleteRealmClientScopesIdScopeMappingsRealmRequest(server string, realm string, id string, body DeleteRealmClientScopesIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmClientScopesIdScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteRealmClientScopesIdScopeMappingsRealmRequestWithBody generates requests for DeleteRealmClientScopesIdScopeMappingsRealm with any type of body
func NewDeleteRealmClientScopesIdScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientScopesIdScopeMappingsRealmRequest generates requests for GetRealmClientScopesIdScopeMappingsRealm
func NewGetRealmClientScopesIdScopeMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientScopesIdScopeMappingsRealmRequest calls the generic PostRealmClientScopesIdScopeMappingsRealm builder with application/json body
func NewPostRealmClientScopesIdScopeMappingsRealmRequest(server string, realm string, id string, body PostRealmClientScopesIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientScopesIdScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientScopesIdScopeMappingsRealmRequestWithBody generates requests for PostRealmClientScopesIdScopeMappingsRealm with any type of body
func NewPostRealmClientScopesIdScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientScopesIdScopeMappingsRealmAvailableRequest generates requests for GetRealmClientScopesIdScopeMappingsRealmAvailable
func NewGetRealmClientScopesIdScopeMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientScopesIdScopeMappingsRealmCompositeRequest generates requests for GetRealmClientScopesIdScopeMappingsRealmComposite
func NewGetRealmClientScopesIdScopeMappingsRealmCompositeRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-scopes/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientSessionStatsRequest generates requests for GetRealmClientSessionStats
func NewGetRealmClientSessionStatsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/client-session-stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsRequest generates requests for GetRealmClients
func NewGetRealmClientsRequest(server string, realm string, params *GetRealmClientsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewableOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewableOnly", runtime.ParamLocationQuery, *params.ViewableOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsRequest calls the generic PostRealmClients builder with application/json body
func NewPostRealmClientsRequest(server string, realm string, body PostRealmClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmClientsRequestWithBody generates requests for PostRealmClients with any type of body
func NewPostRealmClientsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsInitialAccessRequest generates requests for GetRealmClientsInitialAccess
func NewGetRealmClientsInitialAccessRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients-initial-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsInitialAccessRequest calls the generic PostRealmClientsInitialAccess builder with application/json body
func NewPostRealmClientsInitialAccessRequest(server string, realm string, body PostRealmClientsInitialAccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsInitialAccessRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmClientsInitialAccessRequestWithBody generates requests for PostRealmClientsInitialAccess with any type of body
func NewPostRealmClientsInitialAccessRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients-initial-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmClientsInitialAccessIdRequest generates requests for DeleteRealmClientsInitialAccessId
func NewDeleteRealmClientsInitialAccessIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients-initial-access/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmClientsId1ProtocolMappersModelsId2Request generates requests for DeleteRealmClientsId1ProtocolMappersModelsId2
func NewDeleteRealmClientsId1ProtocolMappersModelsId2Request(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsId1ProtocolMappersModelsId2Request generates requests for GetRealmClientsId1ProtocolMappersModelsId2
func NewGetRealmClientsId1ProtocolMappersModelsId2Request(server string, realm string, id1 string, id2 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientsId1ProtocolMappersModelsId2Request calls the generic PutRealmClientsId1ProtocolMappersModelsId2 builder with application/json body
func NewPutRealmClientsId1ProtocolMappersModelsId2Request(server string, realm string, id1 string, id2 string, body PutRealmClientsId1ProtocolMappersModelsId2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmClientsId1ProtocolMappersModelsId2RequestWithBody(server, realm, id1, id2, "application/json", bodyReader)
}

// NewPutRealmClientsId1ProtocolMappersModelsId2RequestWithBody generates requests for PutRealmClientsId1ProtocolMappersModelsId2 with any type of body
func NewPutRealmClientsId1ProtocolMappersModelsId2RequestWithBody(server string, realm string, id1 string, id2 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id1", runtime.ParamLocationPath, id1)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id2", runtime.ParamLocationPath, id2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmClientsIdRequest generates requests for DeleteRealmClientsId
func NewDeleteRealmClientsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdRequest generates requests for GetRealmClientsId
func NewGetRealmClientsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientsIdRequest calls the generic PutRealmClientsId builder with application/json body
func NewPutRealmClientsIdRequest(server string, realm string, id string, body PutRealmClientsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmClientsIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmClientsIdRequestWithBody generates requests for PutRealmClientsId with any type of body
func NewPutRealmClientsIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdCertificatesAttrRequest generates requests for GetRealmClientsIdCertificatesAttr
func NewGetRealmClientsIdCertificatesAttrRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdCertificatesAttrDownloadRequest calls the generic PostRealmClientsIdCertificatesAttrDownload builder with application/json body
func NewPostRealmClientsIdCertificatesAttrDownloadRequest(server string, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdCertificatesAttrDownloadRequestWithBody(server, realm, id, attr, "application/json", bodyReader)
}

// NewPostRealmClientsIdCertificatesAttrDownloadRequestWithBody generates requests for PostRealmClientsIdCertificatesAttrDownload with any type of body
func NewPostRealmClientsIdCertificatesAttrDownloadRequestWithBody(server string, realm string, id string, attr string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmClientsIdCertificatesAttrGenerateRequest generates requests for PostRealmClientsIdCertificatesAttrGenerate
func NewPostRealmClientsIdCertificatesAttrGenerateRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/generate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdCertificatesAttrGenerateAndDownloadRequest calls the generic PostRealmClientsIdCertificatesAttrGenerateAndDownload builder with application/json body
func NewPostRealmClientsIdCertificatesAttrGenerateAndDownloadRequest(server string, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrGenerateAndDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdCertificatesAttrGenerateAndDownloadRequestWithBody(server, realm, id, attr, "application/json", bodyReader)
}

// NewPostRealmClientsIdCertificatesAttrGenerateAndDownloadRequestWithBody generates requests for PostRealmClientsIdCertificatesAttrGenerateAndDownload with any type of body
func NewPostRealmClientsIdCertificatesAttrGenerateAndDownloadRequestWithBody(server string, realm string, id string, attr string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/generate-and-download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmClientsIdCertificatesAttrUploadRequest generates requests for PostRealmClientsIdCertificatesAttrUpload
func NewPostRealmClientsIdCertificatesAttrUploadRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/upload", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdCertificatesAttrUploadCertificateRequest generates requests for PostRealmClientsIdCertificatesAttrUploadCertificate
func NewPostRealmClientsIdCertificatesAttrUploadCertificateRequest(server string, realm string, id string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/certificates/%s/upload-certificate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdClientSecretRequest generates requests for GetRealmClientsIdClientSecret
func NewGetRealmClientsIdClientSecretRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/client-secret", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdClientSecretRequest generates requests for PostRealmClientsIdClientSecret
func NewPostRealmClientsIdClientSecretRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/client-secret", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdDefaultClientScopesRequest generates requests for GetRealmClientsIdDefaultClientScopes
func NewGetRealmClientsIdDefaultClientScopesRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/default-client-scopes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest generates requests for DeleteRealmClientsIdDefaultClientScopesClientScopeId
func NewDeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/default-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientsIdDefaultClientScopesClientScopeIdRequest generates requests for PutRealmClientsIdDefaultClientScopesClientScopeId
func NewPutRealmClientsIdDefaultClientScopesClientScopeIdRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/default-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest generates requests for GetRealmClientsIdEvaluateScopesGenerateExampleAccessToken
func NewGetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest(server string, realm string, id string, params *GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/generate-example-access-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdEvaluateScopesProtocolMappersRequest generates requests for GetRealmClientsIdEvaluateScopesProtocolMappers
func NewGetRealmClientsIdEvaluateScopesProtocolMappersRequest(server string, realm string, id string, params *GetRealmClientsIdEvaluateScopesProtocolMappersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/protocol-mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest generates requests for GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGranted
func NewGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest(server string, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "roleContainerId", runtime.ParamLocationPath, roleContainerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/scope-mappings/%s/granted", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest generates requests for GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGranted
func NewGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest(server string, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "roleContainerId", runtime.ParamLocationPath, roleContainerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/evaluate-scopes/scope-mappings/%s/not-granted", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdInstallationProvidersProviderIdRequest generates requests for GetRealmClientsIdInstallationProvidersProviderId
func NewGetRealmClientsIdInstallationProvidersProviderIdRequest(server string, realm string, id string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/installation/providers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdManagementPermissionsRequest generates requests for GetRealmClientsIdManagementPermissions
func NewGetRealmClientsIdManagementPermissionsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientsIdManagementPermissionsRequest calls the generic PutRealmClientsIdManagementPermissions builder with application/json body
func NewPutRealmClientsIdManagementPermissionsRequest(server string, realm string, id string, body PutRealmClientsIdManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmClientsIdManagementPermissionsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmClientsIdManagementPermissionsRequestWithBody generates requests for PutRealmClientsIdManagementPermissions with any type of body
func NewPutRealmClientsIdManagementPermissionsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmClientsIdNodesRequest calls the generic PostRealmClientsIdNodes builder with application/json body
func NewPostRealmClientsIdNodesRequest(server string, realm string, id string, body PostRealmClientsIdNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdNodesRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientsIdNodesRequestWithBody generates requests for PostRealmClientsIdNodes with any type of body
func NewPostRealmClientsIdNodesRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/nodes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmClientsIdNodesNodeRequest generates requests for DeleteRealmClientsIdNodesNode
func NewDeleteRealmClientsIdNodesNodeRequest(server string, realm string, id string, node string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "node", runtime.ParamLocationPath, node)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/nodes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdOfflineSessionCountRequest generates requests for GetRealmClientsIdOfflineSessionCount
func NewGetRealmClientsIdOfflineSessionCountRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/offline-session-count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdOfflineSessionsRequest generates requests for GetRealmClientsIdOfflineSessions
func NewGetRealmClientsIdOfflineSessionsRequest(server string, realm string, id string, params *GetRealmClientsIdOfflineSessionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/offline-sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdOptionalClientScopesRequest generates requests for GetRealmClientsIdOptionalClientScopes
func NewGetRealmClientsIdOptionalClientScopesRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/optional-client-scopes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest generates requests for DeleteRealmClientsIdOptionalClientScopesClientScopeId
func NewDeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/optional-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientsIdOptionalClientScopesClientScopeIdRequest generates requests for PutRealmClientsIdOptionalClientScopesClientScopeId
func NewPutRealmClientsIdOptionalClientScopesClientScopeIdRequest(server string, realm string, id string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/optional-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdProtocolMappersAddModelsRequest calls the generic PostRealmClientsIdProtocolMappersAddModels builder with application/json body
func NewPostRealmClientsIdProtocolMappersAddModelsRequest(server string, realm string, id string, body PostRealmClientsIdProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdProtocolMappersAddModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientsIdProtocolMappersAddModelsRequestWithBody generates requests for PostRealmClientsIdProtocolMappersAddModels with any type of body
func NewPostRealmClientsIdProtocolMappersAddModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdProtocolMappersModelsRequest generates requests for GetRealmClientsIdProtocolMappersModels
func NewGetRealmClientsIdProtocolMappersModelsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdProtocolMappersModelsRequest calls the generic PostRealmClientsIdProtocolMappersModels builder with application/json body
func NewPostRealmClientsIdProtocolMappersModelsRequest(server string, realm string, id string, body PostRealmClientsIdProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdProtocolMappersModelsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientsIdProtocolMappersModelsRequestWithBody generates requests for PostRealmClientsIdProtocolMappersModels with any type of body
func NewPostRealmClientsIdProtocolMappersModelsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdProtocolMappersProtocolProtocolRequest generates requests for GetRealmClientsIdProtocolMappersProtocolProtocol
func NewGetRealmClientsIdProtocolMappersProtocolProtocolRequest(server string, realm string, id string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdPushRevocationRequest generates requests for PostRealmClientsIdPushRevocation
func NewPostRealmClientsIdPushRevocationRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/push-revocation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdRegistrationAccessTokenRequest generates requests for PostRealmClientsIdRegistrationAccessToken
func NewPostRealmClientsIdRegistrationAccessTokenRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/registration-access-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdRolesRequest generates requests for GetRealmClientsIdRoles
func NewGetRealmClientsIdRolesRequest(server string, realm string, id string, params *GetRealmClientsIdRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdRolesRequest calls the generic PostRealmClientsIdRoles builder with application/json body
func NewPostRealmClientsIdRolesRequest(server string, realm string, id string, body PostRealmClientsIdRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdRolesRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientsIdRolesRequestWithBody generates requests for PostRealmClientsIdRoles with any type of body
func NewPostRealmClientsIdRolesRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmClientsIdRolesRoleNameRequest generates requests for DeleteRealmClientsIdRolesRoleName
func NewDeleteRealmClientsIdRolesRoleNameRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdRolesRoleNameRequest generates requests for GetRealmClientsIdRolesRoleName
func NewGetRealmClientsIdRolesRoleNameRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientsIdRolesRoleNameRequest calls the generic PutRealmClientsIdRolesRoleName builder with application/json body
func NewPutRealmClientsIdRolesRoleNameRequest(server string, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmClientsIdRolesRoleNameRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewPutRealmClientsIdRolesRoleNameRequestWithBody generates requests for PutRealmClientsIdRolesRoleName with any type of body
func NewPutRealmClientsIdRolesRoleNameRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmClientsIdRolesRoleNameCompositesRequest calls the generic DeleteRealmClientsIdRolesRoleNameComposites builder with application/json body
func NewDeleteRealmClientsIdRolesRoleNameCompositesRequest(server string, realm string, id string, roleName string, body DeleteRealmClientsIdRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmClientsIdRolesRoleNameCompositesRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewDeleteRealmClientsIdRolesRoleNameCompositesRequestWithBody generates requests for DeleteRealmClientsIdRolesRoleNameComposites with any type of body
func NewDeleteRealmClientsIdRolesRoleNameCompositesRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdRolesRoleNameCompositesRequest generates requests for GetRealmClientsIdRolesRoleNameComposites
func NewGetRealmClientsIdRolesRoleNameCompositesRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdRolesRoleNameCompositesRequest calls the generic PostRealmClientsIdRolesRoleNameComposites builder with application/json body
func NewPostRealmClientsIdRolesRoleNameCompositesRequest(server string, realm string, id string, roleName string, body PostRealmClientsIdRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdRolesRoleNameCompositesRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewPostRealmClientsIdRolesRoleNameCompositesRequestWithBody generates requests for PostRealmClientsIdRolesRoleNameComposites with any type of body
func NewPostRealmClientsIdRolesRoleNameCompositesRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdRolesRoleNameCompositesClientsClientRequest generates requests for GetRealmClientsIdRolesRoleNameCompositesClientsClient
func NewGetRealmClientsIdRolesRoleNameCompositesClientsClientRequest(server string, realm string, id string, roleName string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdRolesRoleNameCompositesRealmRequest generates requests for GetRealmClientsIdRolesRoleNameCompositesRealm
func NewGetRealmClientsIdRolesRoleNameCompositesRealmRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/composites/realm", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdRolesRoleNameGroupsRequest generates requests for GetRealmClientsIdRolesRoleNameGroups
func NewGetRealmClientsIdRolesRoleNameGroupsRequest(server string, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/groups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdRolesRoleNameManagementPermissionsRequest generates requests for GetRealmClientsIdRolesRoleNameManagementPermissions
func NewGetRealmClientsIdRolesRoleNameManagementPermissionsRequest(server string, realm string, id string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/management/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmClientsIdRolesRoleNameManagementPermissionsRequest calls the generic PutRealmClientsIdRolesRoleNameManagementPermissions builder with application/json body
func NewPutRealmClientsIdRolesRoleNameManagementPermissionsRequest(server string, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmClientsIdRolesRoleNameManagementPermissionsRequestWithBody(server, realm, id, roleName, "application/json", bodyReader)
}

// NewPutRealmClientsIdRolesRoleNameManagementPermissionsRequestWithBody generates requests for PutRealmClientsIdRolesRoleNameManagementPermissions with any type of body
func NewPutRealmClientsIdRolesRoleNameManagementPermissionsRequestWithBody(server string, realm string, id string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/management/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdRolesRoleNameUsersRequest generates requests for GetRealmClientsIdRolesRoleNameUsers
func NewGetRealmClientsIdRolesRoleNameUsersRequest(server string, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/roles/%s/users", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdScopeMappingsRequest generates requests for GetRealmClientsIdScopeMappings
func NewGetRealmClientsIdScopeMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmClientsIdScopeMappingsClientsClientRequest calls the generic DeleteRealmClientsIdScopeMappingsClientsClient builder with application/json body
func NewDeleteRealmClientsIdScopeMappingsClientsClientRequest(server string, realm string, id string, client string, body DeleteRealmClientsIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmClientsIdScopeMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteRealmClientsIdScopeMappingsClientsClientRequestWithBody generates requests for DeleteRealmClientsIdScopeMappingsClientsClient with any type of body
func NewDeleteRealmClientsIdScopeMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdScopeMappingsClientsClientRequest generates requests for GetRealmClientsIdScopeMappingsClientsClient
func NewGetRealmClientsIdScopeMappingsClientsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdScopeMappingsClientsClientRequest calls the generic PostRealmClientsIdScopeMappingsClientsClient builder with application/json body
func NewPostRealmClientsIdScopeMappingsClientsClientRequest(server string, realm string, id string, client string, body PostRealmClientsIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdScopeMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostRealmClientsIdScopeMappingsClientsClientRequestWithBody generates requests for PostRealmClientsIdScopeMappingsClientsClient with any type of body
func NewPostRealmClientsIdScopeMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdScopeMappingsClientsClientAvailableRequest generates requests for GetRealmClientsIdScopeMappingsClientsClientAvailable
func NewGetRealmClientsIdScopeMappingsClientsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdScopeMappingsClientsClientCompositeRequest generates requests for GetRealmClientsIdScopeMappingsClientsClientComposite
func NewGetRealmClientsIdScopeMappingsClientsClientCompositeRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmClientsIdScopeMappingsRealmRequest calls the generic DeleteRealmClientsIdScopeMappingsRealm builder with application/json body
func NewDeleteRealmClientsIdScopeMappingsRealmRequest(server string, realm string, id string, body DeleteRealmClientsIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmClientsIdScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteRealmClientsIdScopeMappingsRealmRequestWithBody generates requests for DeleteRealmClientsIdScopeMappingsRealm with any type of body
func NewDeleteRealmClientsIdScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdScopeMappingsRealmRequest generates requests for GetRealmClientsIdScopeMappingsRealm
func NewGetRealmClientsIdScopeMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmClientsIdScopeMappingsRealmRequest calls the generic PostRealmClientsIdScopeMappingsRealm builder with application/json body
func NewPostRealmClientsIdScopeMappingsRealmRequest(server string, realm string, id string, body PostRealmClientsIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmClientsIdScopeMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmClientsIdScopeMappingsRealmRequestWithBody generates requests for PostRealmClientsIdScopeMappingsRealm with any type of body
func NewPostRealmClientsIdScopeMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmClientsIdScopeMappingsRealmAvailableRequest generates requests for GetRealmClientsIdScopeMappingsRealmAvailable
func NewGetRealmClientsIdScopeMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdScopeMappingsRealmCompositeRequest generates requests for GetRealmClientsIdScopeMappingsRealmComposite
func NewGetRealmClientsIdScopeMappingsRealmCompositeRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdServiceAccountUserRequest generates requests for GetRealmClientsIdServiceAccountUser
func NewGetRealmClientsIdServiceAccountUserRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/service-account-user", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdSessionCountRequest generates requests for GetRealmClientsIdSessionCount
func NewGetRealmClientsIdSessionCountRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/session-count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdTestNodesAvailableRequest generates requests for GetRealmClientsIdTestNodesAvailable
func NewGetRealmClientsIdTestNodesAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/test-nodes-available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmClientsIdUserSessionsRequest generates requests for GetRealmClientsIdUserSessions
func NewGetRealmClientsIdUserSessionsRequest(server string, realm string, id string, params *GetRealmClientsIdUserSessionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/clients/%s/user-sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmComponentsRequest generates requests for GetRealmComponents
func NewGetRealmComponentsRequest(server string, realm string, params *GetRealmComponentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmComponentsRequest calls the generic PostRealmComponents builder with application/json body
func NewPostRealmComponentsRequest(server string, realm string, body PostRealmComponentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmComponentsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmComponentsRequestWithBody generates requests for PostRealmComponents with any type of body
func NewPostRealmComponentsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmComponentsIdRequest generates requests for DeleteRealmComponentsId
func NewDeleteRealmComponentsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmComponentsIdRequest generates requests for GetRealmComponentsId
func NewGetRealmComponentsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmComponentsIdRequest calls the generic PutRealmComponentsId builder with application/json body
func NewPutRealmComponentsIdRequest(server string, realm string, id string, body PutRealmComponentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmComponentsIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmComponentsIdRequestWithBody generates requests for PutRealmComponentsId with any type of body
func NewPutRealmComponentsIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmComponentsIdSubComponentTypesRequest generates requests for GetRealmComponentsIdSubComponentTypes
func NewGetRealmComponentsIdSubComponentTypesRequest(server string, realm string, id string, params *GetRealmComponentsIdSubComponentTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/components/%s/sub-component-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmCredentialRegistratorsRequest generates requests for GetRealmCredentialRegistrators
func NewGetRealmCredentialRegistratorsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/credential-registrators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmDefaultDefaultClientScopesRequest generates requests for GetRealmDefaultDefaultClientScopes
func NewGetRealmDefaultDefaultClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-default-client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmDefaultDefaultClientScopesClientScopeIdRequest generates requests for DeleteRealmDefaultDefaultClientScopesClientScopeId
func NewDeleteRealmDefaultDefaultClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-default-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmDefaultDefaultClientScopesClientScopeIdRequest generates requests for PutRealmDefaultDefaultClientScopesClientScopeId
func NewPutRealmDefaultDefaultClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-default-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmDefaultGroupsRequest generates requests for GetRealmDefaultGroups
func NewGetRealmDefaultGroupsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmDefaultGroupsGroupIdRequest generates requests for DeleteRealmDefaultGroupsGroupId
func NewDeleteRealmDefaultGroupsGroupIdRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmDefaultGroupsGroupIdRequest generates requests for PutRealmDefaultGroupsGroupId
func NewPutRealmDefaultGroupsGroupIdRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmDefaultOptionalClientScopesRequest generates requests for GetRealmDefaultOptionalClientScopes
func NewGetRealmDefaultOptionalClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-optional-client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmDefaultOptionalClientScopesClientScopeIdRequest generates requests for DeleteRealmDefaultOptionalClientScopesClientScopeId
func NewDeleteRealmDefaultOptionalClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-optional-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmDefaultOptionalClientScopesClientScopeIdRequest generates requests for PutRealmDefaultOptionalClientScopesClientScopeId
func NewPutRealmDefaultOptionalClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/default-optional-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmEventsRequest generates requests for DeleteRealmEvents
func NewDeleteRealmEventsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmEventsRequest generates requests for GetRealmEvents
func NewGetRealmEventsRequest(server string, realm string, params *GetRealmEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Client != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client", runtime.ParamLocationQuery, *params.Client); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipAddress", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmEventsConfigRequest generates requests for GetRealmEventsConfig
func NewGetRealmEventsConfigRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmEventsConfigRequest calls the generic PutRealmEventsConfig builder with application/json body
func NewPutRealmEventsConfigRequest(server string, realm string, body PutRealmEventsConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmEventsConfigRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutRealmEventsConfigRequestWithBody generates requests for PutRealmEventsConfig with any type of body
func NewPutRealmEventsConfigRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/events/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupByPathPathRequest generates requests for GetRealmGroupByPathPath
func NewGetRealmGroupByPathPathRequest(server string, realm string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "_path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/group-by-path/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmGroupsRequest generates requests for GetRealmGroups
func NewGetRealmGroupsRequest(server string, realm string, params *GetRealmGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmGroupsRequest calls the generic PostRealmGroups builder with application/json body
func NewPostRealmGroupsRequest(server string, realm string, body PostRealmGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmGroupsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmGroupsRequestWithBody generates requests for PostRealmGroups with any type of body
func NewPostRealmGroupsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupsCountRequest generates requests for GetRealmGroupsCount
func NewGetRealmGroupsCountRequest(server string, realm string, params *GetRealmGroupsCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmGroupsIdRequest generates requests for DeleteRealmGroupsId
func NewDeleteRealmGroupsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmGroupsIdRequest generates requests for GetRealmGroupsId
func NewGetRealmGroupsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmGroupsIdRequest calls the generic PutRealmGroupsId builder with application/json body
func NewPutRealmGroupsIdRequest(server string, realm string, id string, body PutRealmGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmGroupsIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmGroupsIdRequestWithBody generates requests for PutRealmGroupsId with any type of body
func NewPutRealmGroupsIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmGroupsIdChildrenRequest calls the generic PostRealmGroupsIdChildren builder with application/json body
func NewPostRealmGroupsIdChildrenRequest(server string, realm string, id string, body PostRealmGroupsIdChildrenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmGroupsIdChildrenRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmGroupsIdChildrenRequestWithBody generates requests for PostRealmGroupsIdChildren with any type of body
func NewPostRealmGroupsIdChildrenRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/children", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupsIdManagementPermissionsRequest generates requests for GetRealmGroupsIdManagementPermissions
func NewGetRealmGroupsIdManagementPermissionsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmGroupsIdManagementPermissionsRequest calls the generic PutRealmGroupsIdManagementPermissions builder with application/json body
func NewPutRealmGroupsIdManagementPermissionsRequest(server string, realm string, id string, body PutRealmGroupsIdManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmGroupsIdManagementPermissionsRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmGroupsIdManagementPermissionsRequestWithBody generates requests for PutRealmGroupsIdManagementPermissions with any type of body
func NewPutRealmGroupsIdManagementPermissionsRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupsIdMembersRequest generates requests for GetRealmGroupsIdMembers
func NewGetRealmGroupsIdMembersRequest(server string, realm string, id string, params *GetRealmGroupsIdMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmGroupsIdRoleMappingsRequest generates requests for GetRealmGroupsIdRoleMappings
func NewGetRealmGroupsIdRoleMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmGroupsIdRoleMappingsClientsClientRequest calls the generic DeleteRealmGroupsIdRoleMappingsClientsClient builder with application/json body
func NewDeleteRealmGroupsIdRoleMappingsClientsClientRequest(server string, realm string, id string, client string, body DeleteRealmGroupsIdRoleMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmGroupsIdRoleMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteRealmGroupsIdRoleMappingsClientsClientRequestWithBody generates requests for DeleteRealmGroupsIdRoleMappingsClientsClient with any type of body
func NewDeleteRealmGroupsIdRoleMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupsIdRoleMappingsClientsClientRequest generates requests for GetRealmGroupsIdRoleMappingsClientsClient
func NewGetRealmGroupsIdRoleMappingsClientsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmGroupsIdRoleMappingsClientsClientRequest calls the generic PostRealmGroupsIdRoleMappingsClientsClient builder with application/json body
func NewPostRealmGroupsIdRoleMappingsClientsClientRequest(server string, realm string, id string, client string, body PostRealmGroupsIdRoleMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmGroupsIdRoleMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostRealmGroupsIdRoleMappingsClientsClientRequestWithBody generates requests for PostRealmGroupsIdRoleMappingsClientsClient with any type of body
func NewPostRealmGroupsIdRoleMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupsIdRoleMappingsClientsClientAvailableRequest generates requests for GetRealmGroupsIdRoleMappingsClientsClientAvailable
func NewGetRealmGroupsIdRoleMappingsClientsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmGroupsIdRoleMappingsClientsClientCompositeRequest generates requests for GetRealmGroupsIdRoleMappingsClientsClientComposite
func NewGetRealmGroupsIdRoleMappingsClientsClientCompositeRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmGroupsIdRoleMappingsRealmRequest calls the generic DeleteRealmGroupsIdRoleMappingsRealm builder with application/json body
func NewDeleteRealmGroupsIdRoleMappingsRealmRequest(server string, realm string, id string, body DeleteRealmGroupsIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmGroupsIdRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteRealmGroupsIdRoleMappingsRealmRequestWithBody generates requests for DeleteRealmGroupsIdRoleMappingsRealm with any type of body
func NewDeleteRealmGroupsIdRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupsIdRoleMappingsRealmRequest generates requests for GetRealmGroupsIdRoleMappingsRealm
func NewGetRealmGroupsIdRoleMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmGroupsIdRoleMappingsRealmRequest calls the generic PostRealmGroupsIdRoleMappingsRealm builder with application/json body
func NewPostRealmGroupsIdRoleMappingsRealmRequest(server string, realm string, id string, body PostRealmGroupsIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmGroupsIdRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmGroupsIdRoleMappingsRealmRequestWithBody generates requests for PostRealmGroupsIdRoleMappingsRealm with any type of body
func NewPostRealmGroupsIdRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmGroupsIdRoleMappingsRealmAvailableRequest generates requests for GetRealmGroupsIdRoleMappingsRealmAvailable
func NewGetRealmGroupsIdRoleMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmGroupsIdRoleMappingsRealmCompositeRequest generates requests for GetRealmGroupsIdRoleMappingsRealmComposite
func NewGetRealmGroupsIdRoleMappingsRealmCompositeRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/groups/%s/role-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmIdentityProviderImportConfigRequest generates requests for PostRealmIdentityProviderImportConfig
func NewPostRealmIdentityProviderImportConfigRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/import-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmIdentityProviderInstancesRequest generates requests for GetRealmIdentityProviderInstances
func NewGetRealmIdentityProviderInstancesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmIdentityProviderInstancesRequest calls the generic PostRealmIdentityProviderInstances builder with application/json body
func NewPostRealmIdentityProviderInstancesRequest(server string, realm string, body PostRealmIdentityProviderInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmIdentityProviderInstancesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmIdentityProviderInstancesRequestWithBody generates requests for PostRealmIdentityProviderInstances with any type of body
func NewPostRealmIdentityProviderInstancesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmIdentityProviderInstancesAliasRequest generates requests for DeleteRealmIdentityProviderInstancesAlias
func NewDeleteRealmIdentityProviderInstancesAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmIdentityProviderInstancesAliasRequest generates requests for GetRealmIdentityProviderInstancesAlias
func NewGetRealmIdentityProviderInstancesAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmIdentityProviderInstancesAliasRequest calls the generic PutRealmIdentityProviderInstancesAlias builder with application/json body
func NewPutRealmIdentityProviderInstancesAliasRequest(server string, realm string, alias string, body PutRealmIdentityProviderInstancesAliasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmIdentityProviderInstancesAliasRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutRealmIdentityProviderInstancesAliasRequestWithBody generates requests for PutRealmIdentityProviderInstancesAlias with any type of body
func NewPutRealmIdentityProviderInstancesAliasRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmIdentityProviderInstancesAliasExportRequest generates requests for GetRealmIdentityProviderInstancesAliasExport
func NewGetRealmIdentityProviderInstancesAliasExportRequest(server string, realm string, alias string, params *GetRealmIdentityProviderInstancesAliasExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/export", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmIdentityProviderInstancesAliasManagementPermissionsRequest generates requests for GetRealmIdentityProviderInstancesAliasManagementPermissions
func NewGetRealmIdentityProviderInstancesAliasManagementPermissionsRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmIdentityProviderInstancesAliasManagementPermissionsRequest calls the generic PutRealmIdentityProviderInstancesAliasManagementPermissions builder with application/json body
func NewPutRealmIdentityProviderInstancesAliasManagementPermissionsRequest(server string, realm string, alias string, body PutRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody generates requests for PutRealmIdentityProviderInstancesAliasManagementPermissions with any type of body
func NewPutRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmIdentityProviderInstancesAliasMapperTypesRequest generates requests for GetRealmIdentityProviderInstancesAliasMapperTypes
func NewGetRealmIdentityProviderInstancesAliasMapperTypesRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mapper-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmIdentityProviderInstancesAliasMappersRequest generates requests for GetRealmIdentityProviderInstancesAliasMappers
func NewGetRealmIdentityProviderInstancesAliasMappersRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmIdentityProviderInstancesAliasMappersRequest calls the generic PostRealmIdentityProviderInstancesAliasMappers builder with application/json body
func NewPostRealmIdentityProviderInstancesAliasMappersRequest(server string, realm string, alias string, body PostRealmIdentityProviderInstancesAliasMappersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmIdentityProviderInstancesAliasMappersRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPostRealmIdentityProviderInstancesAliasMappersRequestWithBody generates requests for PostRealmIdentityProviderInstancesAliasMappers with any type of body
func NewPostRealmIdentityProviderInstancesAliasMappersRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmIdentityProviderInstancesAliasMappersIdRequest generates requests for DeleteRealmIdentityProviderInstancesAliasMappersId
func NewDeleteRealmIdentityProviderInstancesAliasMappersIdRequest(server string, realm string, alias string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmIdentityProviderInstancesAliasMappersIdRequest generates requests for GetRealmIdentityProviderInstancesAliasMappersId
func NewGetRealmIdentityProviderInstancesAliasMappersIdRequest(server string, realm string, alias string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmIdentityProviderInstancesAliasMappersIdRequest calls the generic PutRealmIdentityProviderInstancesAliasMappersId builder with application/json body
func NewPutRealmIdentityProviderInstancesAliasMappersIdRequest(server string, realm string, alias string, id string, body PutRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmIdentityProviderInstancesAliasMappersIdRequestWithBody(server, realm, alias, id, "application/json", bodyReader)
}

// NewPutRealmIdentityProviderInstancesAliasMappersIdRequestWithBody generates requests for PutRealmIdentityProviderInstancesAliasMappersId with any type of body
func NewPutRealmIdentityProviderInstancesAliasMappersIdRequestWithBody(server string, realm string, alias string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmIdentityProviderProvidersProviderIdRequest generates requests for GetRealmIdentityProviderProvidersProviderId
func NewGetRealmIdentityProviderProvidersProviderIdRequest(server string, realm string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/identity-provider/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmKeysRequest generates requests for GetRealmKeys
func NewGetRealmKeysRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmLogoutAllRequest generates requests for PostRealmLogoutAll
func NewPostRealmLogoutAllRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/logout-all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmPartialExportRequest generates requests for PostRealmPartialExport
func NewPostRealmPartialExportRequest(server string, realm string, params *PostRealmPartialExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partial-export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExportClients != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportClients", runtime.ParamLocationQuery, *params.ExportClients); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportGroupsAndRoles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportGroupsAndRoles", runtime.ParamLocationQuery, *params.ExportGroupsAndRoles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmPartialImportRequest calls the generic PostRealmPartialImport builder with application/json body
func NewPostRealmPartialImportRequest(server string, realm string, body PostRealmPartialImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmPartialImportRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmPartialImportRequestWithBody generates requests for PostRealmPartialImport with any type of body
func NewPostRealmPartialImportRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/partialImport", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmPushRevocationRequest generates requests for PostRealmPushRevocation
func NewPostRealmPushRevocationRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/push-revocation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesRequest generates requests for GetRealmRoles
func NewGetRealmRolesRequest(server string, realm string, params *GetRealmRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmRolesRequest calls the generic PostRealmRoles builder with application/json body
func NewPostRealmRolesRequest(server string, realm string, body PostRealmRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmRolesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmRolesRequestWithBody generates requests for PostRealmRoles with any type of body
func NewPostRealmRolesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmRolesByIdRoleIdRequest generates requests for DeleteRealmRolesByIdRoleId
func NewDeleteRealmRolesByIdRoleIdRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesByIdRoleIdRequest generates requests for GetRealmRolesByIdRoleId
func NewGetRealmRolesByIdRoleIdRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmRolesByIdRoleIdRequest calls the generic PutRealmRolesByIdRoleId builder with application/json body
func NewPutRealmRolesByIdRoleIdRequest(server string, realm string, roleId string, body PutRealmRolesByIdRoleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmRolesByIdRoleIdRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPutRealmRolesByIdRoleIdRequestWithBody generates requests for PutRealmRolesByIdRoleId with any type of body
func NewPutRealmRolesByIdRoleIdRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmRolesByIdRoleIdCompositesRequest calls the generic DeleteRealmRolesByIdRoleIdComposites builder with application/json body
func NewDeleteRealmRolesByIdRoleIdCompositesRequest(server string, realm string, roleId string, body DeleteRealmRolesByIdRoleIdCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmRolesByIdRoleIdCompositesRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewDeleteRealmRolesByIdRoleIdCompositesRequestWithBody generates requests for DeleteRealmRolesByIdRoleIdComposites with any type of body
func NewDeleteRealmRolesByIdRoleIdCompositesRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmRolesByIdRoleIdCompositesRequest generates requests for GetRealmRolesByIdRoleIdComposites
func NewGetRealmRolesByIdRoleIdCompositesRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmRolesByIdRoleIdCompositesRequest calls the generic PostRealmRolesByIdRoleIdComposites builder with application/json body
func NewPostRealmRolesByIdRoleIdCompositesRequest(server string, realm string, roleId string, body PostRealmRolesByIdRoleIdCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmRolesByIdRoleIdCompositesRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPostRealmRolesByIdRoleIdCompositesRequestWithBody generates requests for PostRealmRolesByIdRoleIdComposites with any type of body
func NewPostRealmRolesByIdRoleIdCompositesRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmRolesByIdRoleIdCompositesClientsClientRequest generates requests for GetRealmRolesByIdRoleIdCompositesClientsClient
func NewGetRealmRolesByIdRoleIdCompositesClientsClientRequest(server string, realm string, roleId string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesByIdRoleIdCompositesRealmRequest generates requests for GetRealmRolesByIdRoleIdCompositesRealm
func NewGetRealmRolesByIdRoleIdCompositesRealmRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/composites/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesByIdRoleIdManagementPermissionsRequest generates requests for GetRealmRolesByIdRoleIdManagementPermissions
func NewGetRealmRolesByIdRoleIdManagementPermissionsRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmRolesByIdRoleIdManagementPermissionsRequest calls the generic PutRealmRolesByIdRoleIdManagementPermissions builder with application/json body
func NewPutRealmRolesByIdRoleIdManagementPermissionsRequest(server string, realm string, roleId string, body PutRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmRolesByIdRoleIdManagementPermissionsRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPutRealmRolesByIdRoleIdManagementPermissionsRequestWithBody generates requests for PutRealmRolesByIdRoleIdManagementPermissions with any type of body
func NewPutRealmRolesByIdRoleIdManagementPermissionsRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles-by-id/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmRolesRoleNameRequest generates requests for DeleteRealmRolesRoleName
func NewDeleteRealmRolesRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesRoleNameRequest generates requests for GetRealmRolesRoleName
func NewGetRealmRolesRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmRolesRoleNameRequest calls the generic PutRealmRolesRoleName builder with application/json body
func NewPutRealmRolesRoleNameRequest(server string, realm string, roleName string, body PutRealmRolesRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmRolesRoleNameRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPutRealmRolesRoleNameRequestWithBody generates requests for PutRealmRolesRoleName with any type of body
func NewPutRealmRolesRoleNameRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRealmRolesRoleNameCompositesRequest calls the generic DeleteRealmRolesRoleNameComposites builder with application/json body
func NewDeleteRealmRolesRoleNameCompositesRequest(server string, realm string, roleName string, body DeleteRealmRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmRolesRoleNameCompositesRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewDeleteRealmRolesRoleNameCompositesRequestWithBody generates requests for DeleteRealmRolesRoleNameComposites with any type of body
func NewDeleteRealmRolesRoleNameCompositesRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmRolesRoleNameCompositesRequest generates requests for GetRealmRolesRoleNameComposites
func NewGetRealmRolesRoleNameCompositesRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmRolesRoleNameCompositesRequest calls the generic PostRealmRolesRoleNameComposites builder with application/json body
func NewPostRealmRolesRoleNameCompositesRequest(server string, realm string, roleName string, body PostRealmRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmRolesRoleNameCompositesRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPostRealmRolesRoleNameCompositesRequestWithBody generates requests for PostRealmRolesRoleNameComposites with any type of body
func NewPostRealmRolesRoleNameCompositesRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmRolesRoleNameCompositesClientsClientRequest generates requests for GetRealmRolesRoleNameCompositesClientsClient
func NewGetRealmRolesRoleNameCompositesClientsClientRequest(server string, realm string, roleName string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesRoleNameCompositesRealmRequest generates requests for GetRealmRolesRoleNameCompositesRealm
func NewGetRealmRolesRoleNameCompositesRealmRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/composites/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesRoleNameGroupsRequest generates requests for GetRealmRolesRoleNameGroups
func NewGetRealmRolesRoleNameGroupsRequest(server string, realm string, roleName string, params *GetRealmRolesRoleNameGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmRolesRoleNameManagementPermissionsRequest generates requests for GetRealmRolesRoleNameManagementPermissions
func NewGetRealmRolesRoleNameManagementPermissionsRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmRolesRoleNameManagementPermissionsRequest calls the generic PutRealmRolesRoleNameManagementPermissions builder with application/json body
func NewPutRealmRolesRoleNameManagementPermissionsRequest(server string, realm string, roleName string, body PutRealmRolesRoleNameManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmRolesRoleNameManagementPermissionsRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPutRealmRolesRoleNameManagementPermissionsRequestWithBody generates requests for PutRealmRolesRoleNameManagementPermissions with any type of body
func NewPutRealmRolesRoleNameManagementPermissionsRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmRolesRoleNameUsersRequest generates requests for GetRealmRolesRoleNameUsers
func NewGetRealmRolesRoleNameUsersRequest(server string, realm string, roleName string, params *GetRealmRolesRoleNameUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/roles/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmSessionsSessionRequest generates requests for DeleteRealmSessionsSession
func NewDeleteRealmSessionsSessionRequest(server string, realm string, session string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "session", runtime.ParamLocationPath, session)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sessions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmTestLDAPConnectionRequest calls the generic PostRealmTestLDAPConnection builder with application/json body
func NewPostRealmTestLDAPConnectionRequest(server string, realm string, body PostRealmTestLDAPConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmTestLDAPConnectionRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmTestLDAPConnectionRequestWithBody generates requests for PostRealmTestLDAPConnection with any type of body
func NewPostRealmTestLDAPConnectionRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/testLDAPConnection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRealmTestSMTPConnectionRequest calls the generic PostRealmTestSMTPConnection builder with application/json body
func NewPostRealmTestSMTPConnectionRequest(server string, realm string, body PostRealmTestSMTPConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmTestSMTPConnectionRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmTestSMTPConnectionRequestWithBody generates requests for PostRealmTestSMTPConnection with any type of body
func NewPostRealmTestSMTPConnectionRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/testSMTPConnection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUserStorageIdNameRequest generates requests for GetRealmUserStorageIdName
func NewGetRealmUserStorageIdNameRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/user-storage/%s/name", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUserStorageIdRemoveImportedUsersRequest generates requests for PostRealmUserStorageIdRemoveImportedUsers
func NewPostRealmUserStorageIdRemoveImportedUsersRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/user-storage/%s/remove-imported-users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUserStorageIdSyncRequest generates requests for PostRealmUserStorageIdSync
func NewPostRealmUserStorageIdSyncRequest(server string, realm string, id string, params *PostRealmUserStorageIdSyncParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/user-storage/%s/sync", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUserStorageIdUnlinkUsersRequest generates requests for PostRealmUserStorageIdUnlinkUsers
func NewPostRealmUserStorageIdUnlinkUsersRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/user-storage/%s/unlink-users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUserStorageParentIdMappersIdSyncRequest generates requests for PostRealmUserStorageParentIdMappersIdSync
func NewPostRealmUserStorageParentIdMappersIdSyncRequest(server string, realm string, parentId string, id string, params *PostRealmUserStorageParentIdMappersIdSyncParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parentId", runtime.ParamLocationPath, parentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/user-storage/%s/mappers/%s/sync", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Direction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, *params.Direction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersRequest generates requests for GetRealmUsers
func NewGetRealmUsersRequest(server string, realm string, params *GetRealmUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersRequest calls the generic PostRealmUsers builder with application/json body
func NewPostRealmUsersRequest(server string, realm string, body PostRealmUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmUsersRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostRealmUsersRequestWithBody generates requests for PostRealmUsers with any type of body
func NewPostRealmUsersRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersManagementPermissionsRequest generates requests for GetRealmUsersManagementPermissions
func NewGetRealmUsersManagementPermissionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users-management-permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmUsersManagementPermissionsRequest calls the generic PutRealmUsersManagementPermissions builder with application/json body
func NewPutRealmUsersManagementPermissionsRequest(server string, realm string, body PutRealmUsersManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmUsersManagementPermissionsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutRealmUsersManagementPermissionsRequestWithBody generates requests for PutRealmUsersManagementPermissions with any type of body
func NewPutRealmUsersManagementPermissionsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users-management-permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersCountRequest generates requests for GetRealmUsersCount
func NewGetRealmUsersCountRequest(server string, realm string, params *GetRealmUsersCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmUsersIdRequest generates requests for DeleteRealmUsersId
func NewDeleteRealmUsersIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdRequest generates requests for GetRealmUsersId
func NewGetRealmUsersIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmUsersIdRequest calls the generic PutRealmUsersId builder with application/json body
func NewPutRealmUsersIdRequest(server string, realm string, id string, body PutRealmUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmUsersIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmUsersIdRequestWithBody generates requests for PutRealmUsersId with any type of body
func NewPutRealmUsersIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdConfiguredUserStorageCredentialTypesRequest generates requests for GetRealmUsersIdConfiguredUserStorageCredentialTypes
func NewGetRealmUsersIdConfiguredUserStorageCredentialTypesRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/configured-user-storage-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdConsentsRequest generates requests for GetRealmUsersIdConsents
func NewGetRealmUsersIdConsentsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/consents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmUsersIdConsentsClientRequest generates requests for DeleteRealmUsersIdConsentsClient
func NewDeleteRealmUsersIdConsentsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdCredentialsRequest generates requests for GetRealmUsersIdCredentials
func NewGetRealmUsersIdCredentialsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmUsersIdCredentialsCredentialIdRequest generates requests for DeleteRealmUsersIdCredentialsCredentialId
func NewDeleteRealmUsersIdCredentialsCredentialIdRequest(server string, realm string, id string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest generates requests for PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId
func NewPostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest(server string, realm string, id string, credentialId string, newPreviousCredentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "newPreviousCredentialId", runtime.ParamLocationPath, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s/moveAfter/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersIdCredentialsCredentialIdMoveToFirstRequest generates requests for PostRealmUsersIdCredentialsCredentialIdMoveToFirst
func NewPostRealmUsersIdCredentialsCredentialIdMoveToFirstRequest(server string, realm string, id string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s/moveToFirst", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmUsersIdCredentialsCredentialIdUserLabelRequestWithTextBody calls the generic PutRealmUsersIdCredentialsCredentialIdUserLabel builder with text/plain body
func NewPutRealmUsersIdCredentialsCredentialIdUserLabelRequestWithTextBody(server string, realm string, id string, credentialId string, body PutRealmUsersIdCredentialsCredentialIdUserLabelTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPutRealmUsersIdCredentialsCredentialIdUserLabelRequestWithBody(server, realm, id, credentialId, "text/plain", bodyReader)
}

// NewPutRealmUsersIdCredentialsCredentialIdUserLabelRequestWithBody generates requests for PutRealmUsersIdCredentialsCredentialIdUserLabel with any type of body
func NewPutRealmUsersIdCredentialsCredentialIdUserLabelRequestWithBody(server string, realm string, id string, credentialId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/credentials/%s/userLabel", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutRealmUsersIdDisableCredentialTypesRequest calls the generic PutRealmUsersIdDisableCredentialTypes builder with application/json body
func NewPutRealmUsersIdDisableCredentialTypesRequest(server string, realm string, id string, body PutRealmUsersIdDisableCredentialTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmUsersIdDisableCredentialTypesRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmUsersIdDisableCredentialTypesRequestWithBody generates requests for PutRealmUsersIdDisableCredentialTypes with any type of body
func NewPutRealmUsersIdDisableCredentialTypesRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/disable-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutRealmUsersIdExecuteActionsEmailRequest calls the generic PutRealmUsersIdExecuteActionsEmail builder with application/json body
func NewPutRealmUsersIdExecuteActionsEmailRequest(server string, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, body PutRealmUsersIdExecuteActionsEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmUsersIdExecuteActionsEmailRequestWithBody(server, realm, id, params, "application/json", bodyReader)
}

// NewPutRealmUsersIdExecuteActionsEmailRequestWithBody generates requests for PutRealmUsersIdExecuteActionsEmail with any type of body
func NewPutRealmUsersIdExecuteActionsEmailRequestWithBody(server string, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/execute-actions-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifespan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifespan", runtime.ParamLocationQuery, *params.Lifespan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdFederatedIdentityRequest generates requests for GetRealmUsersIdFederatedIdentity
func NewGetRealmUsersIdFederatedIdentityRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/federated-identity", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmUsersIdFederatedIdentityProviderRequest generates requests for DeleteRealmUsersIdFederatedIdentityProvider
func NewDeleteRealmUsersIdFederatedIdentityProviderRequest(server string, realm string, id string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersIdFederatedIdentityProviderRequest calls the generic PostRealmUsersIdFederatedIdentityProvider builder with application/json body
func NewPostRealmUsersIdFederatedIdentityProviderRequest(server string, realm string, id string, provider string, body PostRealmUsersIdFederatedIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmUsersIdFederatedIdentityProviderRequestWithBody(server, realm, id, provider, "application/json", bodyReader)
}

// NewPostRealmUsersIdFederatedIdentityProviderRequestWithBody generates requests for PostRealmUsersIdFederatedIdentityProvider with any type of body
func NewPostRealmUsersIdFederatedIdentityProviderRequestWithBody(server string, realm string, id string, provider string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdGroupsRequest generates requests for GetRealmUsersIdGroups
func NewGetRealmUsersIdGroupsRequest(server string, realm string, id string, params *GetRealmUsersIdGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdGroupsCountRequest generates requests for GetRealmUsersIdGroupsCount
func NewGetRealmUsersIdGroupsCountRequest(server string, realm string, id string, params *GetRealmUsersIdGroupsCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups/count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmUsersIdGroupsGroupIdRequest generates requests for DeleteRealmUsersIdGroupsGroupId
func NewDeleteRealmUsersIdGroupsGroupIdRequest(server string, realm string, id string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmUsersIdGroupsGroupIdRequest generates requests for PutRealmUsersIdGroupsGroupId
func NewPutRealmUsersIdGroupsGroupIdRequest(server string, realm string, id string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersIdImpersonationRequest generates requests for PostRealmUsersIdImpersonation
func NewPostRealmUsersIdImpersonationRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/impersonation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersIdLogoutRequest generates requests for PostRealmUsersIdLogout
func NewPostRealmUsersIdLogoutRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/logout", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdOfflineSessionsClientIdRequest generates requests for GetRealmUsersIdOfflineSessionsClientId
func NewGetRealmUsersIdOfflineSessionsClientIdRequest(server string, realm string, id string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/offline-sessions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmUsersIdResetPasswordRequest calls the generic PutRealmUsersIdResetPassword builder with application/json body
func NewPutRealmUsersIdResetPasswordRequest(server string, realm string, id string, body PutRealmUsersIdResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRealmUsersIdResetPasswordRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutRealmUsersIdResetPasswordRequestWithBody generates requests for PutRealmUsersIdResetPassword with any type of body
func NewPutRealmUsersIdResetPasswordRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/reset-password", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdRoleMappingsRequest generates requests for GetRealmUsersIdRoleMappings
func NewGetRealmUsersIdRoleMappingsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmUsersIdRoleMappingsClientsClientRequest calls the generic DeleteRealmUsersIdRoleMappingsClientsClient builder with application/json body
func NewDeleteRealmUsersIdRoleMappingsClientsClientRequest(server string, realm string, id string, client string, body DeleteRealmUsersIdRoleMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmUsersIdRoleMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewDeleteRealmUsersIdRoleMappingsClientsClientRequestWithBody generates requests for DeleteRealmUsersIdRoleMappingsClientsClient with any type of body
func NewDeleteRealmUsersIdRoleMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdRoleMappingsClientsClientRequest generates requests for GetRealmUsersIdRoleMappingsClientsClient
func NewGetRealmUsersIdRoleMappingsClientsClientRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersIdRoleMappingsClientsClientRequest calls the generic PostRealmUsersIdRoleMappingsClientsClient builder with application/json body
func NewPostRealmUsersIdRoleMappingsClientsClientRequest(server string, realm string, id string, client string, body PostRealmUsersIdRoleMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmUsersIdRoleMappingsClientsClientRequestWithBody(server, realm, id, client, "application/json", bodyReader)
}

// NewPostRealmUsersIdRoleMappingsClientsClientRequestWithBody generates requests for PostRealmUsersIdRoleMappingsClientsClient with any type of body
func NewPostRealmUsersIdRoleMappingsClientsClientRequestWithBody(server string, realm string, id string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdRoleMappingsClientsClientAvailableRequest generates requests for GetRealmUsersIdRoleMappingsClientsClientAvailable
func NewGetRealmUsersIdRoleMappingsClientsClientAvailableRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdRoleMappingsClientsClientCompositeRequest generates requests for GetRealmUsersIdRoleMappingsClientsClientComposite
func NewGetRealmUsersIdRoleMappingsClientsClientCompositeRequest(server string, realm string, id string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRealmUsersIdRoleMappingsRealmRequest calls the generic DeleteRealmUsersIdRoleMappingsRealm builder with application/json body
func NewDeleteRealmUsersIdRoleMappingsRealmRequest(server string, realm string, id string, body DeleteRealmUsersIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRealmUsersIdRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewDeleteRealmUsersIdRoleMappingsRealmRequestWithBody generates requests for DeleteRealmUsersIdRoleMappingsRealm with any type of body
func NewDeleteRealmUsersIdRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdRoleMappingsRealmRequest generates requests for GetRealmUsersIdRoleMappingsRealm
func NewGetRealmUsersIdRoleMappingsRealmRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRealmUsersIdRoleMappingsRealmRequest calls the generic PostRealmUsersIdRoleMappingsRealm builder with application/json body
func NewPostRealmUsersIdRoleMappingsRealmRequest(server string, realm string, id string, body PostRealmUsersIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRealmUsersIdRoleMappingsRealmRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostRealmUsersIdRoleMappingsRealmRequestWithBody generates requests for PostRealmUsersIdRoleMappingsRealm with any type of body
func NewPostRealmUsersIdRoleMappingsRealmRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRealmUsersIdRoleMappingsRealmAvailableRequest generates requests for GetRealmUsersIdRoleMappingsRealmAvailable
func NewGetRealmUsersIdRoleMappingsRealmAvailableRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdRoleMappingsRealmCompositeRequest generates requests for GetRealmUsersIdRoleMappingsRealmComposite
func NewGetRealmUsersIdRoleMappingsRealmCompositeRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/role-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRealmUsersIdSendVerifyEmailRequest generates requests for PutRealmUsersIdSendVerifyEmail
func NewPutRealmUsersIdSendVerifyEmailRequest(server string, realm string, id string, params *PutRealmUsersIdSendVerifyEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/send-verify-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRealmUsersIdSessionsRequest generates requests for GetRealmUsersIdSessions
func NewGetRealmUsersIdSessionsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/users/%s/sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PostWithBodyWithResponse request with any body
	PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error)

	PostWithResponse(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error)

	// GetIdNameWithResponse request
	GetIdNameWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIdNameResponse, error)

	// DeleteRealmWithResponse request
	DeleteRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmResponse, error)

	// GetRealmWithResponse request
	GetRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmResponse, error)

	// PutRealmWithBodyWithResponse request with any body
	PutRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmResponse, error)

	PutRealmWithResponse(ctx context.Context, realm string, body PutRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmResponse, error)

	// DeleteRealmAdminEventsWithResponse request
	DeleteRealmAdminEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmAdminEventsResponse, error)

	// GetRealmAdminEventsWithResponse request
	GetRealmAdminEventsWithResponse(ctx context.Context, realm string, params *GetRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*GetRealmAdminEventsResponse, error)

	// DeleteRealmAttackDetectionBruteForceUsersWithResponse request
	DeleteRealmAttackDetectionBruteForceUsersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmAttackDetectionBruteForceUsersResponse, error)

	// DeleteRealmAttackDetectionBruteForceUsersUserIdWithResponse request
	DeleteRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteRealmAttackDetectionBruteForceUsersUserIdResponse, error)

	// GetRealmAttackDetectionBruteForceUsersUserIdWithResponse request
	GetRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetRealmAttackDetectionBruteForceUsersUserIdResponse, error)

	// GetRealmAuthenticationAuthenticatorProvidersWithResponse request
	GetRealmAuthenticationAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationAuthenticatorProvidersResponse, error)

	// GetRealmAuthenticationClientAuthenticatorProvidersWithResponse request
	GetRealmAuthenticationClientAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationClientAuthenticatorProvidersResponse, error)

	// GetRealmAuthenticationConfigDescriptionProviderIdWithResponse request
	GetRealmAuthenticationConfigDescriptionProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationConfigDescriptionProviderIdResponse, error)

	// DeleteRealmAuthenticationConfigIdWithResponse request
	DeleteRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationConfigIdResponse, error)

	// GetRealmAuthenticationConfigIdWithResponse request
	GetRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationConfigIdResponse, error)

	// PutRealmAuthenticationConfigIdWithBodyWithResponse request with any body
	PutRealmAuthenticationConfigIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationConfigIdResponse, error)

	PutRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, body PutRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationConfigIdResponse, error)

	// PostRealmAuthenticationExecutionsWithBodyWithResponse request with any body
	PostRealmAuthenticationExecutionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsResponse, error)

	PostRealmAuthenticationExecutionsWithResponse(ctx context.Context, realm string, body PostRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsResponse, error)

	// DeleteRealmAuthenticationExecutionsExecutionIdWithResponse request
	DeleteRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationExecutionsExecutionIdResponse, error)

	// GetRealmAuthenticationExecutionsExecutionIdWithResponse request
	GetRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationExecutionsExecutionIdResponse, error)

	// PostRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse request with any body
	PostRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdConfigResponse, error)

	PostRealmAuthenticationExecutionsExecutionIdConfigWithResponse(ctx context.Context, realm string, executionId string, body PostRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdConfigResponse, error)

	// PostRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse request
	PostRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse, error)

	// PostRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse request
	PostRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse, error)

	// GetRealmAuthenticationFlowsWithResponse request
	GetRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFlowsResponse, error)

	// PostRealmAuthenticationFlowsWithBodyWithResponse request with any body
	PostRealmAuthenticationFlowsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsResponse, error)

	PostRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, body PostRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsResponse, error)

	// PostRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse request with any body
	PostRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasCopyResponse, error)

	PostRealmAuthenticationFlowsFlowAliasCopyWithResponse(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasCopyResponse, error)

	// GetRealmAuthenticationFlowsFlowAliasExecutionsWithResponse request
	GetRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFlowsFlowAliasExecutionsResponse, error)

	// PutRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse request with any body
	PutRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsFlowAliasExecutionsResponse, error)

	PutRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, body PutRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsFlowAliasExecutionsResponse, error)

	// PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse request with any body
	PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error)

	PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithResponse(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error)

	// PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse request with any body
	PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error)

	PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithResponse(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error)

	// DeleteRealmAuthenticationFlowsIdWithResponse request
	DeleteRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationFlowsIdResponse, error)

	// GetRealmAuthenticationFlowsIdWithResponse request
	GetRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFlowsIdResponse, error)

	// PutRealmAuthenticationFlowsIdWithBodyWithResponse request with any body
	PutRealmAuthenticationFlowsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsIdResponse, error)

	PutRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsIdResponse, error)

	// GetRealmAuthenticationFormActionProvidersWithResponse request
	GetRealmAuthenticationFormActionProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFormActionProvidersResponse, error)

	// GetRealmAuthenticationFormProvidersWithResponse request
	GetRealmAuthenticationFormProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFormProvidersResponse, error)

	// GetRealmAuthenticationPerClientConfigDescriptionWithResponse request
	GetRealmAuthenticationPerClientConfigDescriptionWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationPerClientConfigDescriptionResponse, error)

	// PostRealmAuthenticationRegisterRequiredActionWithBodyWithResponse request with any body
	PostRealmAuthenticationRegisterRequiredActionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRegisterRequiredActionResponse, error)

	PostRealmAuthenticationRegisterRequiredActionWithResponse(ctx context.Context, realm string, body PostRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRegisterRequiredActionResponse, error)

	// GetRealmAuthenticationRequiredActionsWithResponse request
	GetRealmAuthenticationRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationRequiredActionsResponse, error)

	// DeleteRealmAuthenticationRequiredActionsAliasWithResponse request
	DeleteRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationRequiredActionsAliasResponse, error)

	// GetRealmAuthenticationRequiredActionsAliasWithResponse request
	GetRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationRequiredActionsAliasResponse, error)

	// PutRealmAuthenticationRequiredActionsAliasWithBodyWithResponse request with any body
	PutRealmAuthenticationRequiredActionsAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationRequiredActionsAliasResponse, error)

	PutRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, body PutRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationRequiredActionsAliasResponse, error)

	// PostRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse request
	PostRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse, error)

	// PostRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse request
	PostRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse, error)

	// GetRealmAuthenticationUnregisteredRequiredActionsWithResponse request
	GetRealmAuthenticationUnregisteredRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationUnregisteredRequiredActionsResponse, error)

	// PostRealmClearKeysCacheWithResponse request
	PostRealmClearKeysCacheWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmClearKeysCacheResponse, error)

	// PostRealmClearRealmCacheWithResponse request
	PostRealmClearRealmCacheWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmClearRealmCacheResponse, error)

	// PostRealmClearUserCacheWithResponse request
	PostRealmClearUserCacheWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmClearUserCacheResponse, error)

	// PostRealmClientDescriptionConverterWithBodyWithResponse request with any body
	PostRealmClientDescriptionConverterWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientDescriptionConverterResponse, error)

	PostRealmClientDescriptionConverterWithTextBodyWithResponse(ctx context.Context, realm string, body PostRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientDescriptionConverterResponse, error)

	// GetRealmClientRegistrationPolicyProvidersWithResponse request
	GetRealmClientRegistrationPolicyProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientRegistrationPolicyProvidersResponse, error)

	// GetRealmClientScopesWithResponse request
	GetRealmClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesResponse, error)

	// PostRealmClientScopesWithBodyWithResponse request with any body
	PostRealmClientScopesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesResponse, error)

	PostRealmClientScopesWithResponse(ctx context.Context, realm string, body PostRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesResponse, error)

	// DeleteRealmClientScopesId1ProtocolMappersModelsId2WithResponse request
	DeleteRealmClientScopesId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesId1ProtocolMappersModelsId2Response, error)

	// GetRealmClientScopesId1ProtocolMappersModelsId2WithResponse request
	GetRealmClientScopesId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesId1ProtocolMappersModelsId2Response, error)

	// PutRealmClientScopesId1ProtocolMappersModelsId2WithBodyWithResponse request with any body
	PutRealmClientScopesId1ProtocolMappersModelsId2WithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientScopesId1ProtocolMappersModelsId2Response, error)

	PutRealmClientScopesId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientScopesId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientScopesId1ProtocolMappersModelsId2Response, error)

	// DeleteRealmClientScopesIdWithResponse request
	DeleteRealmClientScopesIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdResponse, error)

	// GetRealmClientScopesIdWithResponse request
	GetRealmClientScopesIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdResponse, error)

	// PutRealmClientScopesIdWithBodyWithResponse request with any body
	PutRealmClientScopesIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientScopesIdResponse, error)

	PutRealmClientScopesIdWithResponse(ctx context.Context, realm string, id string, body PutRealmClientScopesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientScopesIdResponse, error)

	// PostRealmClientScopesIdProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostRealmClientScopesIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersAddModelsResponse, error)

	PostRealmClientScopesIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersAddModelsResponse, error)

	// GetRealmClientScopesIdProtocolMappersModelsWithResponse request
	GetRealmClientScopesIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdProtocolMappersModelsResponse, error)

	// PostRealmClientScopesIdProtocolMappersModelsWithBodyWithResponse request with any body
	PostRealmClientScopesIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersModelsResponse, error)

	PostRealmClientScopesIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersModelsResponse, error)

	// GetRealmClientScopesIdProtocolMappersProtocolProtocolWithResponse request
	GetRealmClientScopesIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse, error)

	// GetRealmClientScopesIdScopeMappingsWithResponse request
	GetRealmClientScopesIdScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsResponse, error)

	// DeleteRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	DeleteRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsClientsClientResponse, error)

	DeleteRealmClientScopesIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsClientsClientResponse, error)

	// GetRealmClientScopesIdScopeMappingsClientsClientWithResponse request
	GetRealmClientScopesIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsClientsClientResponse, error)

	// PostRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	PostRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsClientsClientResponse, error)

	PostRealmClientScopesIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsClientsClientResponse, error)

	// GetRealmClientScopesIdScopeMappingsClientsClientAvailableWithResponse request
	GetRealmClientScopesIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse, error)

	// GetRealmClientScopesIdScopeMappingsClientsClientCompositeWithResponse request
	GetRealmClientScopesIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse, error)

	// DeleteRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsRealmResponse, error)

	DeleteRealmClientScopesIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsRealmResponse, error)

	// GetRealmClientScopesIdScopeMappingsRealmWithResponse request
	GetRealmClientScopesIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsRealmResponse, error)

	// PostRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse request with any body
	PostRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsRealmResponse, error)

	PostRealmClientScopesIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsRealmResponse, error)

	// GetRealmClientScopesIdScopeMappingsRealmAvailableWithResponse request
	GetRealmClientScopesIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsRealmAvailableResponse, error)

	// GetRealmClientScopesIdScopeMappingsRealmCompositeWithResponse request
	GetRealmClientScopesIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsRealmCompositeResponse, error)

	// GetRealmClientSessionStatsWithResponse request
	GetRealmClientSessionStatsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientSessionStatsResponse, error)

	// GetRealmClientsWithResponse request
	GetRealmClientsWithResponse(ctx context.Context, realm string, params *GetRealmClientsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsResponse, error)

	// PostRealmClientsWithBodyWithResponse request with any body
	PostRealmClientsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsResponse, error)

	PostRealmClientsWithResponse(ctx context.Context, realm string, body PostRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsResponse, error)

	// GetRealmClientsInitialAccessWithResponse request
	GetRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientsInitialAccessResponse, error)

	// PostRealmClientsInitialAccessWithBodyWithResponse request with any body
	PostRealmClientsInitialAccessWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsInitialAccessResponse, error)

	PostRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, body PostRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsInitialAccessResponse, error)

	// DeleteRealmClientsInitialAccessIdWithResponse request
	DeleteRealmClientsInitialAccessIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsInitialAccessIdResponse, error)

	// DeleteRealmClientsId1ProtocolMappersModelsId2WithResponse request
	DeleteRealmClientsId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsId1ProtocolMappersModelsId2Response, error)

	// GetRealmClientsId1ProtocolMappersModelsId2WithResponse request
	GetRealmClientsId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetRealmClientsId1ProtocolMappersModelsId2Response, error)

	// PutRealmClientsId1ProtocolMappersModelsId2WithBodyWithResponse request with any body
	PutRealmClientsId1ProtocolMappersModelsId2WithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsId1ProtocolMappersModelsId2Response, error)

	PutRealmClientsId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientsId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsId1ProtocolMappersModelsId2Response, error)

	// DeleteRealmClientsIdWithResponse request
	DeleteRealmClientsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdResponse, error)

	// GetRealmClientsIdWithResponse request
	GetRealmClientsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdResponse, error)

	// PutRealmClientsIdWithBodyWithResponse request with any body
	PutRealmClientsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdResponse, error)

	PutRealmClientsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmClientsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdResponse, error)

	// GetRealmClientsIdCertificatesAttrWithResponse request
	GetRealmClientsIdCertificatesAttrWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdCertificatesAttrResponse, error)

	// PostRealmClientsIdCertificatesAttrDownloadWithBodyWithResponse request with any body
	PostRealmClientsIdCertificatesAttrDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrDownloadResponse, error)

	PostRealmClientsIdCertificatesAttrDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrDownloadResponse, error)

	// PostRealmClientsIdCertificatesAttrGenerateWithResponse request
	PostRealmClientsIdCertificatesAttrGenerateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrGenerateResponse, error)

	// PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBodyWithResponse request with any body
	PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse, error)

	PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse, error)

	// PostRealmClientsIdCertificatesAttrUploadWithResponse request
	PostRealmClientsIdCertificatesAttrUploadWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrUploadResponse, error)

	// PostRealmClientsIdCertificatesAttrUploadCertificateWithResponse request
	PostRealmClientsIdCertificatesAttrUploadCertificateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrUploadCertificateResponse, error)

	// GetRealmClientsIdClientSecretWithResponse request
	GetRealmClientsIdClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdClientSecretResponse, error)

	// PostRealmClientsIdClientSecretWithResponse request
	PostRealmClientsIdClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdClientSecretResponse, error)

	// GetRealmClientsIdDefaultClientScopesWithResponse request
	GetRealmClientsIdDefaultClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdDefaultClientScopesResponse, error)

	// DeleteRealmClientsIdDefaultClientScopesClientScopeIdWithResponse request
	DeleteRealmClientsIdDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse, error)

	// PutRealmClientsIdDefaultClientScopesClientScopeIdWithResponse request
	PutRealmClientsIdDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmClientsIdDefaultClientScopesClientScopeIdResponse, error)

	// GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenWithResponse request
	GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse, error)

	// GetRealmClientsIdEvaluateScopesProtocolMappersWithResponse request
	GetRealmClientsIdEvaluateScopesProtocolMappersWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesProtocolMappersResponse, error)

	// GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse request
	GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse, error)

	// GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse request
	GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse, error)

	// GetRealmClientsIdInstallationProvidersProviderIdWithResponse request
	GetRealmClientsIdInstallationProvidersProviderIdWithResponse(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdInstallationProvidersProviderIdResponse, error)

	// GetRealmClientsIdManagementPermissionsWithResponse request
	GetRealmClientsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdManagementPermissionsResponse, error)

	// PutRealmClientsIdManagementPermissionsWithBodyWithResponse request with any body
	PutRealmClientsIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdManagementPermissionsResponse, error)

	PutRealmClientsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutRealmClientsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdManagementPermissionsResponse, error)

	// PostRealmClientsIdNodesWithBodyWithResponse request with any body
	PostRealmClientsIdNodesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdNodesResponse, error)

	PostRealmClientsIdNodesWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdNodesResponse, error)

	// DeleteRealmClientsIdNodesNodeWithResponse request
	DeleteRealmClientsIdNodesNodeWithResponse(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdNodesNodeResponse, error)

	// GetRealmClientsIdOfflineSessionCountWithResponse request
	GetRealmClientsIdOfflineSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdOfflineSessionCountResponse, error)

	// GetRealmClientsIdOfflineSessionsWithResponse request
	GetRealmClientsIdOfflineSessionsWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdOfflineSessionsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdOfflineSessionsResponse, error)

	// GetRealmClientsIdOptionalClientScopesWithResponse request
	GetRealmClientsIdOptionalClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdOptionalClientScopesResponse, error)

	// DeleteRealmClientsIdOptionalClientScopesClientScopeIdWithResponse request
	DeleteRealmClientsIdOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse, error)

	// PutRealmClientsIdOptionalClientScopesClientScopeIdWithResponse request
	PutRealmClientsIdOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmClientsIdOptionalClientScopesClientScopeIdResponse, error)

	// PostRealmClientsIdProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostRealmClientsIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersAddModelsResponse, error)

	PostRealmClientsIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersAddModelsResponse, error)

	// GetRealmClientsIdProtocolMappersModelsWithResponse request
	GetRealmClientsIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdProtocolMappersModelsResponse, error)

	// PostRealmClientsIdProtocolMappersModelsWithBodyWithResponse request with any body
	PostRealmClientsIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersModelsResponse, error)

	PostRealmClientsIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersModelsResponse, error)

	// GetRealmClientsIdProtocolMappersProtocolProtocolWithResponse request
	GetRealmClientsIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdProtocolMappersProtocolProtocolResponse, error)

	// PostRealmClientsIdPushRevocationWithResponse request
	PostRealmClientsIdPushRevocationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdPushRevocationResponse, error)

	// PostRealmClientsIdRegistrationAccessTokenWithResponse request
	PostRealmClientsIdRegistrationAccessTokenWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRegistrationAccessTokenResponse, error)

	// GetRealmClientsIdRolesWithResponse request
	GetRealmClientsIdRolesWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdRolesParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesResponse, error)

	// PostRealmClientsIdRolesWithBodyWithResponse request with any body
	PostRealmClientsIdRolesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesResponse, error)

	PostRealmClientsIdRolesWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesResponse, error)

	// DeleteRealmClientsIdRolesRoleNameWithResponse request
	DeleteRealmClientsIdRolesRoleNameWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdRolesRoleNameResponse, error)

	// GetRealmClientsIdRolesRoleNameWithResponse request
	GetRealmClientsIdRolesRoleNameWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameResponse, error)

	// PutRealmClientsIdRolesRoleNameWithBodyWithResponse request with any body
	PutRealmClientsIdRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameResponse, error)

	PutRealmClientsIdRolesRoleNameWithResponse(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameResponse, error)

	// DeleteRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse request with any body
	DeleteRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdRolesRoleNameCompositesResponse, error)

	DeleteRealmClientsIdRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body DeleteRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdRolesRoleNameCompositesResponse, error)

	// GetRealmClientsIdRolesRoleNameCompositesWithResponse request
	GetRealmClientsIdRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameCompositesResponse, error)

	// PostRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse request with any body
	PostRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesRoleNameCompositesResponse, error)

	PostRealmClientsIdRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body PostRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesRoleNameCompositesResponse, error)

	// GetRealmClientsIdRolesRoleNameCompositesClientsClientWithResponse request
	GetRealmClientsIdRolesRoleNameCompositesClientsClientWithResponse(ctx context.Context, realm string, id string, roleName string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse, error)

	// GetRealmClientsIdRolesRoleNameCompositesRealmWithResponse request
	GetRealmClientsIdRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameCompositesRealmResponse, error)

	// GetRealmClientsIdRolesRoleNameGroupsWithResponse request
	GetRealmClientsIdRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameGroupsResponse, error)

	// GetRealmClientsIdRolesRoleNameManagementPermissionsWithResponse request
	GetRealmClientsIdRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameManagementPermissionsResponse, error)

	// PutRealmClientsIdRolesRoleNameManagementPermissionsWithBodyWithResponse request with any body
	PutRealmClientsIdRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameManagementPermissionsResponse, error)

	PutRealmClientsIdRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameManagementPermissionsResponse, error)

	// GetRealmClientsIdRolesRoleNameUsersWithResponse request
	GetRealmClientsIdRolesRoleNameUsersWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameUsersResponse, error)

	// GetRealmClientsIdScopeMappingsWithResponse request
	GetRealmClientsIdScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsResponse, error)

	// DeleteRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	DeleteRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsClientsClientResponse, error)

	DeleteRealmClientsIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsClientsClientResponse, error)

	// GetRealmClientsIdScopeMappingsClientsClientWithResponse request
	GetRealmClientsIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsClientsClientResponse, error)

	// PostRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	PostRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsClientsClientResponse, error)

	PostRealmClientsIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsClientsClientResponse, error)

	// GetRealmClientsIdScopeMappingsClientsClientAvailableWithResponse request
	GetRealmClientsIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsClientsClientAvailableResponse, error)

	// GetRealmClientsIdScopeMappingsClientsClientCompositeWithResponse request
	GetRealmClientsIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsClientsClientCompositeResponse, error)

	// DeleteRealmClientsIdScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteRealmClientsIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsRealmResponse, error)

	DeleteRealmClientsIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsRealmResponse, error)

	// GetRealmClientsIdScopeMappingsRealmWithResponse request
	GetRealmClientsIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsRealmResponse, error)

	// PostRealmClientsIdScopeMappingsRealmWithBodyWithResponse request with any body
	PostRealmClientsIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsRealmResponse, error)

	PostRealmClientsIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsRealmResponse, error)

	// GetRealmClientsIdScopeMappingsRealmAvailableWithResponse request
	GetRealmClientsIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsRealmAvailableResponse, error)

	// GetRealmClientsIdScopeMappingsRealmCompositeWithResponse request
	GetRealmClientsIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsRealmCompositeResponse, error)

	// GetRealmClientsIdServiceAccountUserWithResponse request
	GetRealmClientsIdServiceAccountUserWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdServiceAccountUserResponse, error)

	// GetRealmClientsIdSessionCountWithResponse request
	GetRealmClientsIdSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdSessionCountResponse, error)

	// GetRealmClientsIdTestNodesAvailableWithResponse request
	GetRealmClientsIdTestNodesAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdTestNodesAvailableResponse, error)

	// GetRealmClientsIdUserSessionsWithResponse request
	GetRealmClientsIdUserSessionsWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdUserSessionsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdUserSessionsResponse, error)

	// GetRealmComponentsWithResponse request
	GetRealmComponentsWithResponse(ctx context.Context, realm string, params *GetRealmComponentsParams, reqEditors ...RequestEditorFn) (*GetRealmComponentsResponse, error)

	// PostRealmComponentsWithBodyWithResponse request with any body
	PostRealmComponentsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmComponentsResponse, error)

	PostRealmComponentsWithResponse(ctx context.Context, realm string, body PostRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmComponentsResponse, error)

	// DeleteRealmComponentsIdWithResponse request
	DeleteRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmComponentsIdResponse, error)

	// GetRealmComponentsIdWithResponse request
	GetRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmComponentsIdResponse, error)

	// PutRealmComponentsIdWithBodyWithResponse request with any body
	PutRealmComponentsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmComponentsIdResponse, error)

	PutRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmComponentsIdResponse, error)

	// GetRealmComponentsIdSubComponentTypesWithResponse request
	GetRealmComponentsIdSubComponentTypesWithResponse(ctx context.Context, realm string, id string, params *GetRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*GetRealmComponentsIdSubComponentTypesResponse, error)

	// GetRealmCredentialRegistratorsWithResponse request
	GetRealmCredentialRegistratorsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmCredentialRegistratorsResponse, error)

	// GetRealmDefaultDefaultClientScopesWithResponse request
	GetRealmDefaultDefaultClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmDefaultDefaultClientScopesResponse, error)

	// DeleteRealmDefaultDefaultClientScopesClientScopeIdWithResponse request
	DeleteRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse, error)

	// PutRealmDefaultDefaultClientScopesClientScopeIdWithResponse request
	PutRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmDefaultDefaultClientScopesClientScopeIdResponse, error)

	// GetRealmDefaultGroupsWithResponse request
	GetRealmDefaultGroupsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmDefaultGroupsResponse, error)

	// DeleteRealmDefaultGroupsGroupIdWithResponse request
	DeleteRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteRealmDefaultGroupsGroupIdResponse, error)

	// PutRealmDefaultGroupsGroupIdWithResponse request
	PutRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*PutRealmDefaultGroupsGroupIdResponse, error)

	// GetRealmDefaultOptionalClientScopesWithResponse request
	GetRealmDefaultOptionalClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmDefaultOptionalClientScopesResponse, error)

	// DeleteRealmDefaultOptionalClientScopesClientScopeIdWithResponse request
	DeleteRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse, error)

	// PutRealmDefaultOptionalClientScopesClientScopeIdWithResponse request
	PutRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmDefaultOptionalClientScopesClientScopeIdResponse, error)

	// DeleteRealmEventsWithResponse request
	DeleteRealmEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmEventsResponse, error)

	// GetRealmEventsWithResponse request
	GetRealmEventsWithResponse(ctx context.Context, realm string, params *GetRealmEventsParams, reqEditors ...RequestEditorFn) (*GetRealmEventsResponse, error)

	// GetRealmEventsConfigWithResponse request
	GetRealmEventsConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmEventsConfigResponse, error)

	// PutRealmEventsConfigWithBodyWithResponse request with any body
	PutRealmEventsConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmEventsConfigResponse, error)

	PutRealmEventsConfigWithResponse(ctx context.Context, realm string, body PutRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmEventsConfigResponse, error)

	// GetRealmGroupByPathPathWithResponse request
	GetRealmGroupByPathPathWithResponse(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*GetRealmGroupByPathPathResponse, error)

	// GetRealmGroupsWithResponse request
	GetRealmGroupsWithResponse(ctx context.Context, realm string, params *GetRealmGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmGroupsResponse, error)

	// PostRealmGroupsWithBodyWithResponse request with any body
	PostRealmGroupsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsResponse, error)

	PostRealmGroupsWithResponse(ctx context.Context, realm string, body PostRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsResponse, error)

	// GetRealmGroupsCountWithResponse request
	GetRealmGroupsCountWithResponse(ctx context.Context, realm string, params *GetRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*GetRealmGroupsCountResponse, error)

	// DeleteRealmGroupsIdWithResponse request
	DeleteRealmGroupsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdResponse, error)

	// GetRealmGroupsIdWithResponse request
	GetRealmGroupsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdResponse, error)

	// PutRealmGroupsIdWithBodyWithResponse request with any body
	PutRealmGroupsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdResponse, error)

	PutRealmGroupsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdResponse, error)

	// PostRealmGroupsIdChildrenWithBodyWithResponse request with any body
	PostRealmGroupsIdChildrenWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdChildrenResponse, error)

	PostRealmGroupsIdChildrenWithResponse(ctx context.Context, realm string, id string, body PostRealmGroupsIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdChildrenResponse, error)

	// GetRealmGroupsIdManagementPermissionsWithResponse request
	GetRealmGroupsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdManagementPermissionsResponse, error)

	// PutRealmGroupsIdManagementPermissionsWithBodyWithResponse request with any body
	PutRealmGroupsIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdManagementPermissionsResponse, error)

	PutRealmGroupsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutRealmGroupsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdManagementPermissionsResponse, error)

	// GetRealmGroupsIdMembersWithResponse request
	GetRealmGroupsIdMembersWithResponse(ctx context.Context, realm string, id string, params *GetRealmGroupsIdMembersParams, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdMembersResponse, error)

	// GetRealmGroupsIdRoleMappingsWithResponse request
	GetRealmGroupsIdRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsResponse, error)

	// DeleteRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse request with any body
	DeleteRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsClientsClientResponse, error)

	DeleteRealmGroupsIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsClientsClientResponse, error)

	// GetRealmGroupsIdRoleMappingsClientsClientWithResponse request
	GetRealmGroupsIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsClientsClientResponse, error)

	// PostRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse request with any body
	PostRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsClientsClientResponse, error)

	PostRealmGroupsIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsClientsClientResponse, error)

	// GetRealmGroupsIdRoleMappingsClientsClientAvailableWithResponse request
	GetRealmGroupsIdRoleMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse, error)

	// GetRealmGroupsIdRoleMappingsClientsClientCompositeWithResponse request
	GetRealmGroupsIdRoleMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse, error)

	// DeleteRealmGroupsIdRoleMappingsRealmWithBodyWithResponse request with any body
	DeleteRealmGroupsIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsRealmResponse, error)

	DeleteRealmGroupsIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsRealmResponse, error)

	// GetRealmGroupsIdRoleMappingsRealmWithResponse request
	GetRealmGroupsIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsRealmResponse, error)

	// PostRealmGroupsIdRoleMappingsRealmWithBodyWithResponse request with any body
	PostRealmGroupsIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsRealmResponse, error)

	PostRealmGroupsIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsRealmResponse, error)

	// GetRealmGroupsIdRoleMappingsRealmAvailableWithResponse request
	GetRealmGroupsIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsRealmAvailableResponse, error)

	// GetRealmGroupsIdRoleMappingsRealmCompositeWithResponse request
	GetRealmGroupsIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsRealmCompositeResponse, error)

	// PostRealmIdentityProviderImportConfigWithResponse request
	PostRealmIdentityProviderImportConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderImportConfigResponse, error)

	// GetRealmIdentityProviderInstancesWithResponse request
	GetRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesResponse, error)

	// PostRealmIdentityProviderInstancesWithBodyWithResponse request with any body
	PostRealmIdentityProviderInstancesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesResponse, error)

	PostRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, body PostRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesResponse, error)

	// DeleteRealmIdentityProviderInstancesAliasWithResponse request
	DeleteRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteRealmIdentityProviderInstancesAliasResponse, error)

	// GetRealmIdentityProviderInstancesAliasWithResponse request
	GetRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasResponse, error)

	// PutRealmIdentityProviderInstancesAliasWithBodyWithResponse request with any body
	PutRealmIdentityProviderInstancesAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasResponse, error)

	PutRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasResponse, error)

	// GetRealmIdentityProviderInstancesAliasExportWithResponse request
	GetRealmIdentityProviderInstancesAliasExportWithResponse(ctx context.Context, realm string, alias string, params *GetRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasExportResponse, error)

	// GetRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse request
	GetRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error)

	// PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse request with any body
	PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error)

	PutRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error)

	// GetRealmIdentityProviderInstancesAliasMapperTypesWithResponse request
	GetRealmIdentityProviderInstancesAliasMapperTypesWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasMapperTypesResponse, error)

	// GetRealmIdentityProviderInstancesAliasMappersWithResponse request
	GetRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasMappersResponse, error)

	// PostRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse request with any body
	PostRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesAliasMappersResponse, error)

	PostRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, body PostRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesAliasMappersResponse, error)

	// DeleteRealmIdentityProviderInstancesAliasMappersIdWithResponse request
	DeleteRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	// GetRealmIdentityProviderInstancesAliasMappersIdWithResponse request
	GetRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	// PutRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse request with any body
	PutRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	PutRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, body PutRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	// GetRealmIdentityProviderProvidersProviderIdWithResponse request
	GetRealmIdentityProviderProvidersProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderProvidersProviderIdResponse, error)

	// GetRealmKeysWithResponse request
	GetRealmKeysWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmKeysResponse, error)

	// PostRealmLogoutAllWithResponse request
	PostRealmLogoutAllWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmLogoutAllResponse, error)

	// PostRealmPartialExportWithResponse request
	PostRealmPartialExportWithResponse(ctx context.Context, realm string, params *PostRealmPartialExportParams, reqEditors ...RequestEditorFn) (*PostRealmPartialExportResponse, error)

	// PostRealmPartialImportWithBodyWithResponse request with any body
	PostRealmPartialImportWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmPartialImportResponse, error)

	PostRealmPartialImportWithResponse(ctx context.Context, realm string, body PostRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmPartialImportResponse, error)

	// PostRealmPushRevocationWithResponse request
	PostRealmPushRevocationWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmPushRevocationResponse, error)

	// GetRealmRolesWithResponse request
	GetRealmRolesWithResponse(ctx context.Context, realm string, params *GetRealmRolesParams, reqEditors ...RequestEditorFn) (*GetRealmRolesResponse, error)

	// PostRealmRolesWithBodyWithResponse request with any body
	PostRealmRolesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmRolesResponse, error)

	PostRealmRolesWithResponse(ctx context.Context, realm string, body PostRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmRolesResponse, error)

	// DeleteRealmRolesByIdRoleIdWithResponse request
	DeleteRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*DeleteRealmRolesByIdRoleIdResponse, error)

	// GetRealmRolesByIdRoleIdWithResponse request
	GetRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdResponse, error)

	// PutRealmRolesByIdRoleIdWithBodyWithResponse request with any body
	PutRealmRolesByIdRoleIdWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdResponse, error)

	PutRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdResponse, error)

	// DeleteRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with any body
	DeleteRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmRolesByIdRoleIdCompositesResponse, error)

	DeleteRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body DeleteRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmRolesByIdRoleIdCompositesResponse, error)

	// GetRealmRolesByIdRoleIdCompositesWithResponse request
	GetRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdCompositesResponse, error)

	// PostRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with any body
	PostRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmRolesByIdRoleIdCompositesResponse, error)

	PostRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body PostRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmRolesByIdRoleIdCompositesResponse, error)

	// GetRealmRolesByIdRoleIdCompositesClientsClientWithResponse request
	GetRealmRolesByIdRoleIdCompositesClientsClientWithResponse(ctx context.Context, realm string, roleId string, client string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdCompositesClientsClientResponse, error)

	// GetRealmRolesByIdRoleIdCompositesRealmWithResponse request
	GetRealmRolesByIdRoleIdCompositesRealmWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdCompositesRealmResponse, error)

	// GetRealmRolesByIdRoleIdManagementPermissionsWithResponse request
	GetRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdManagementPermissionsResponse, error)

	// PutRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse request with any body
	PutRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdManagementPermissionsResponse, error)

	PutRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdManagementPermissionsResponse, error)

	// DeleteRealmRolesRoleNameWithResponse request
	DeleteRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRealmRolesRoleNameResponse, error)

	// GetRealmRolesRoleNameWithResponse request
	GetRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameResponse, error)

	// PutRealmRolesRoleNameWithBodyWithResponse request with any body
	PutRealmRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameResponse, error)

	PutRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameResponse, error)

	// DeleteRealmRolesRoleNameCompositesWithBodyWithResponse request with any body
	DeleteRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmRolesRoleNameCompositesResponse, error)

	DeleteRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body DeleteRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmRolesRoleNameCompositesResponse, error)

	// GetRealmRolesRoleNameCompositesWithResponse request
	GetRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameCompositesResponse, error)

	// PostRealmRolesRoleNameCompositesWithBodyWithResponse request with any body
	PostRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmRolesRoleNameCompositesResponse, error)

	PostRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body PostRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmRolesRoleNameCompositesResponse, error)

	// GetRealmRolesRoleNameCompositesClientsClientWithResponse request
	GetRealmRolesRoleNameCompositesClientsClientWithResponse(ctx context.Context, realm string, roleName string, client string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameCompositesClientsClientResponse, error)

	// GetRealmRolesRoleNameCompositesRealmWithResponse request
	GetRealmRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameCompositesRealmResponse, error)

	// GetRealmRolesRoleNameGroupsWithResponse request
	GetRealmRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameGroupsResponse, error)

	// GetRealmRolesRoleNameManagementPermissionsWithResponse request
	GetRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameManagementPermissionsResponse, error)

	// PutRealmRolesRoleNameManagementPermissionsWithBodyWithResponse request with any body
	PutRealmRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameManagementPermissionsResponse, error)

	PutRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameManagementPermissionsResponse, error)

	// GetRealmRolesRoleNameUsersWithResponse request
	GetRealmRolesRoleNameUsersWithResponse(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameUsersResponse, error)

	// DeleteRealmSessionsSessionWithResponse request
	DeleteRealmSessionsSessionWithResponse(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*DeleteRealmSessionsSessionResponse, error)

	// PostRealmTestLDAPConnectionWithBodyWithResponse request with any body
	PostRealmTestLDAPConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmTestLDAPConnectionResponse, error)

	PostRealmTestLDAPConnectionWithResponse(ctx context.Context, realm string, body PostRealmTestLDAPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmTestLDAPConnectionResponse, error)

	// PostRealmTestSMTPConnectionWithBodyWithResponse request with any body
	PostRealmTestSMTPConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmTestSMTPConnectionResponse, error)

	PostRealmTestSMTPConnectionWithResponse(ctx context.Context, realm string, body PostRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmTestSMTPConnectionResponse, error)

	// GetRealmUserStorageIdNameWithResponse request
	GetRealmUserStorageIdNameWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUserStorageIdNameResponse, error)

	// PostRealmUserStorageIdRemoveImportedUsersWithResponse request
	PostRealmUserStorageIdRemoveImportedUsersWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUserStorageIdRemoveImportedUsersResponse, error)

	// PostRealmUserStorageIdSyncWithResponse request
	PostRealmUserStorageIdSyncWithResponse(ctx context.Context, realm string, id string, params *PostRealmUserStorageIdSyncParams, reqEditors ...RequestEditorFn) (*PostRealmUserStorageIdSyncResponse, error)

	// PostRealmUserStorageIdUnlinkUsersWithResponse request
	PostRealmUserStorageIdUnlinkUsersWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUserStorageIdUnlinkUsersResponse, error)

	// PostRealmUserStorageParentIdMappersIdSyncWithResponse request
	PostRealmUserStorageParentIdMappersIdSyncWithResponse(ctx context.Context, realm string, parentId string, id string, params *PostRealmUserStorageParentIdMappersIdSyncParams, reqEditors ...RequestEditorFn) (*PostRealmUserStorageParentIdMappersIdSyncResponse, error)

	// GetRealmUsersWithResponse request
	GetRealmUsersWithResponse(ctx context.Context, realm string, params *GetRealmUsersParams, reqEditors ...RequestEditorFn) (*GetRealmUsersResponse, error)

	// PostRealmUsersWithBodyWithResponse request with any body
	PostRealmUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersResponse, error)

	PostRealmUsersWithResponse(ctx context.Context, realm string, body PostRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersResponse, error)

	// GetRealmUsersManagementPermissionsWithResponse request
	GetRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmUsersManagementPermissionsResponse, error)

	// PutRealmUsersManagementPermissionsWithBodyWithResponse request with any body
	PutRealmUsersManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersManagementPermissionsResponse, error)

	PutRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, body PutRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersManagementPermissionsResponse, error)

	// GetRealmUsersCountWithResponse request
	GetRealmUsersCountWithResponse(ctx context.Context, realm string, params *GetRealmUsersCountParams, reqEditors ...RequestEditorFn) (*GetRealmUsersCountResponse, error)

	// DeleteRealmUsersIdWithResponse request
	DeleteRealmUsersIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdResponse, error)

	// GetRealmUsersIdWithResponse request
	GetRealmUsersIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdResponse, error)

	// PutRealmUsersIdWithBodyWithResponse request with any body
	PutRealmUsersIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResponse, error)

	PutRealmUsersIdWithResponse(ctx context.Context, realm string, id string, body PutRealmUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResponse, error)

	// GetRealmUsersIdConfiguredUserStorageCredentialTypesWithResponse request
	GetRealmUsersIdConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse, error)

	// GetRealmUsersIdConsentsWithResponse request
	GetRealmUsersIdConsentsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdConsentsResponse, error)

	// DeleteRealmUsersIdConsentsClientWithResponse request
	DeleteRealmUsersIdConsentsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdConsentsClientResponse, error)

	// GetRealmUsersIdCredentialsWithResponse request
	GetRealmUsersIdCredentialsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdCredentialsResponse, error)

	// DeleteRealmUsersIdCredentialsCredentialIdWithResponse request
	DeleteRealmUsersIdCredentialsCredentialIdWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdCredentialsCredentialIdResponse, error)

	// PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse request
	PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error)

	// PostRealmUsersIdCredentialsCredentialIdMoveToFirstWithResponse request
	PostRealmUsersIdCredentialsCredentialIdMoveToFirstWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse, error)

	// PutRealmUsersIdCredentialsCredentialIdUserLabelWithBodyWithResponse request with any body
	PutRealmUsersIdCredentialsCredentialIdUserLabelWithBodyWithResponse(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdCredentialsCredentialIdUserLabelResponse, error)

	PutRealmUsersIdCredentialsCredentialIdUserLabelWithTextBodyWithResponse(ctx context.Context, realm string, id string, credentialId string, body PutRealmUsersIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdCredentialsCredentialIdUserLabelResponse, error)

	// PutRealmUsersIdDisableCredentialTypesWithBodyWithResponse request with any body
	PutRealmUsersIdDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdDisableCredentialTypesResponse, error)

	PutRealmUsersIdDisableCredentialTypesWithResponse(ctx context.Context, realm string, id string, body PutRealmUsersIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdDisableCredentialTypesResponse, error)

	// PutRealmUsersIdExecuteActionsEmailWithBodyWithResponse request with any body
	PutRealmUsersIdExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdExecuteActionsEmailResponse, error)

	PutRealmUsersIdExecuteActionsEmailWithResponse(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, body PutRealmUsersIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdExecuteActionsEmailResponse, error)

	// GetRealmUsersIdFederatedIdentityWithResponse request
	GetRealmUsersIdFederatedIdentityWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdFederatedIdentityResponse, error)

	// DeleteRealmUsersIdFederatedIdentityProviderWithResponse request
	DeleteRealmUsersIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdFederatedIdentityProviderResponse, error)

	// PostRealmUsersIdFederatedIdentityProviderWithBodyWithResponse request with any body
	PostRealmUsersIdFederatedIdentityProviderWithBodyWithResponse(ctx context.Context, realm string, id string, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersIdFederatedIdentityProviderResponse, error)

	PostRealmUsersIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, id string, provider string, body PostRealmUsersIdFederatedIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersIdFederatedIdentityProviderResponse, error)

	// GetRealmUsersIdGroupsWithResponse request
	GetRealmUsersIdGroupsWithResponse(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmUsersIdGroupsResponse, error)

	// GetRealmUsersIdGroupsCountWithResponse request
	GetRealmUsersIdGroupsCountWithResponse(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsCountParams, reqEditors ...RequestEditorFn) (*GetRealmUsersIdGroupsCountResponse, error)

	// DeleteRealmUsersIdGroupsGroupIdWithResponse request
	DeleteRealmUsersIdGroupsGroupIdWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdGroupsGroupIdResponse, error)

	// PutRealmUsersIdGroupsGroupIdWithResponse request
	PutRealmUsersIdGroupsGroupIdWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*PutRealmUsersIdGroupsGroupIdResponse, error)

	// PostRealmUsersIdImpersonationWithResponse request
	PostRealmUsersIdImpersonationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdImpersonationResponse, error)

	// PostRealmUsersIdLogoutWithResponse request
	PostRealmUsersIdLogoutWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdLogoutResponse, error)

	// GetRealmUsersIdOfflineSessionsClientIdWithResponse request
	GetRealmUsersIdOfflineSessionsClientIdWithResponse(ctx context.Context, realm string, id string, clientId string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdOfflineSessionsClientIdResponse, error)

	// PutRealmUsersIdResetPasswordWithBodyWithResponse request with any body
	PutRealmUsersIdResetPasswordWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResetPasswordResponse, error)

	PutRealmUsersIdResetPasswordWithResponse(ctx context.Context, realm string, id string, body PutRealmUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResetPasswordResponse, error)

	// GetRealmUsersIdRoleMappingsWithResponse request
	GetRealmUsersIdRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsResponse, error)

	// DeleteRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse request with any body
	DeleteRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsClientsClientResponse, error)

	DeleteRealmUsersIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsClientsClientResponse, error)

	// GetRealmUsersIdRoleMappingsClientsClientWithResponse request
	GetRealmUsersIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsClientsClientResponse, error)

	// PostRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse request with any body
	PostRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsClientsClientResponse, error)

	PostRealmUsersIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsClientsClientResponse, error)

	// GetRealmUsersIdRoleMappingsClientsClientAvailableWithResponse request
	GetRealmUsersIdRoleMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsClientsClientAvailableResponse, error)

	// GetRealmUsersIdRoleMappingsClientsClientCompositeWithResponse request
	GetRealmUsersIdRoleMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsClientsClientCompositeResponse, error)

	// DeleteRealmUsersIdRoleMappingsRealmWithBodyWithResponse request with any body
	DeleteRealmUsersIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsRealmResponse, error)

	DeleteRealmUsersIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsRealmResponse, error)

	// GetRealmUsersIdRoleMappingsRealmWithResponse request
	GetRealmUsersIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsRealmResponse, error)

	// PostRealmUsersIdRoleMappingsRealmWithBodyWithResponse request with any body
	PostRealmUsersIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsRealmResponse, error)

	PostRealmUsersIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsRealmResponse, error)

	// GetRealmUsersIdRoleMappingsRealmAvailableWithResponse request
	GetRealmUsersIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsRealmAvailableResponse, error)

	// GetRealmUsersIdRoleMappingsRealmCompositeWithResponse request
	GetRealmUsersIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsRealmCompositeResponse, error)

	// PutRealmUsersIdSendVerifyEmailWithResponse request
	PutRealmUsersIdSendVerifyEmailWithResponse(ctx context.Context, realm string, id string, params *PutRealmUsersIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutRealmUsersIdSendVerifyEmailResponse, error)

	// GetRealmUsersIdSessionsWithResponse request
	GetRealmUsersIdSessionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdSessionsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ServerInfoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *RealmRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmAdminEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmAdminEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmAdminEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAdminEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]AdminEventRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmAdminEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAdminEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmAttackDetectionBruteForceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmAttackDetectionBruteForceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmAttackDetectionBruteForceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmAttackDetectionBruteForceUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmAttackDetectionBruteForceUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmAttackDetectionBruteForceUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAttackDetectionBruteForceUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmAttackDetectionBruteForceUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAttackDetectionBruteForceUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationAuthenticatorProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationAuthenticatorProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationAuthenticatorProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationClientAuthenticatorProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationClientAuthenticatorProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationClientAuthenticatorProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationConfigDescriptionProviderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *AuthenticatorConfigInfoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationConfigDescriptionProviderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationConfigDescriptionProviderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmAuthenticationConfigIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmAuthenticationConfigIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmAuthenticationConfigIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationConfigIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *AuthenticatorConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationConfigIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationConfigIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmAuthenticationConfigIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmAuthenticationConfigIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmAuthenticationConfigIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmAuthenticationExecutionsExecutionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmAuthenticationExecutionsExecutionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmAuthenticationExecutionsExecutionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationExecutionsExecutionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationExecutionsExecutionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationExecutionsExecutionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationExecutionsExecutionIdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationExecutionsExecutionIdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationExecutionsExecutionIdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]AuthenticationFlowRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationFlowsFlowAliasCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationFlowsFlowAliasCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationFlowsFlowAliasCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationFlowsFlowAliasExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationFlowsFlowAliasExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationFlowsFlowAliasExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmAuthenticationFlowsFlowAliasExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmAuthenticationFlowsFlowAliasExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmAuthenticationFlowsFlowAliasExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmAuthenticationFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmAuthenticationFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmAuthenticationFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *AuthenticationFlowRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmAuthenticationFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmAuthenticationFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmAuthenticationFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationFormActionProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationFormActionProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationFormActionProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationFormProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationFormProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationFormProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationPerClientConfigDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationPerClientConfigDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationPerClientConfigDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationRegisterRequiredActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationRegisterRequiredActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationRegisterRequiredActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationRequiredActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RequiredActionProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationRequiredActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationRequiredActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmAuthenticationRequiredActionsAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmAuthenticationRequiredActionsAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmAuthenticationRequiredActionsAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationRequiredActionsAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *RequiredActionProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationRequiredActionsAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationRequiredActionsAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmAuthenticationRequiredActionsAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmAuthenticationRequiredActionsAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmAuthenticationRequiredActionsAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmAuthenticationUnregisteredRequiredActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmAuthenticationUnregisteredRequiredActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmAuthenticationUnregisteredRequiredActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClearKeysCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClearKeysCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClearKeysCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClearRealmCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClearRealmCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClearRealmCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClearUserCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClearUserCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClearUserCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientDescriptionConverterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmClientDescriptionConverterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientDescriptionConverterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientRegistrationPolicyProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ComponentTypeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientRegistrationPolicyProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientRegistrationPolicyProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientScopesId1ProtocolMappersModelsId2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientScopesId1ProtocolMappersModelsId2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientScopesId1ProtocolMappersModelsId2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesId1ProtocolMappersModelsId2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesId1ProtocolMappersModelsId2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesId1ProtocolMappersModelsId2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientScopesId1ProtocolMappersModelsId2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmClientScopesId1ProtocolMappersModelsId2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientScopesId1ProtocolMappersModelsId2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientScopesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientScopesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientScopesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientScopesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmClientScopesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientScopesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientScopesIdProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientScopesIdProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientScopesIdProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientScopesIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientScopesIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientScopesIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientScopesIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientScopesIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientScopesIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientScopesIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientScopesIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientScopesIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientScopesIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientScopesIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientScopesIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientScopesIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientScopesIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientScopesIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientScopesIdScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientScopesIdScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientScopesIdScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientSessionStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmClientSessionStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientSessionStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientInitialAccessPresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ClientInitialAccessPresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsInitialAccessIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsInitialAccessIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsInitialAccessIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsId1ProtocolMappersModelsId2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsId1ProtocolMappersModelsId2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsId1ProtocolMappersModelsId2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsId1ProtocolMappersModelsId2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsId1ProtocolMappersModelsId2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsId1ProtocolMappersModelsId2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientsId1ProtocolMappersModelsId2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmClientsId1ProtocolMappersModelsId2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientsId1ProtocolMappersModelsId2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmClientsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdCertificatesAttrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdCertificatesAttrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdCertificatesAttrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdCertificatesAttrDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdCertificatesAttrDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdCertificatesAttrDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdCertificatesAttrGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdCertificatesAttrGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdCertificatesAttrGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdCertificatesAttrUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdCertificatesAttrUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdCertificatesAttrUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdCertificatesAttrUploadCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdCertificatesAttrUploadCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdCertificatesAttrUploadCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdDefaultClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdDefaultClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdDefaultClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientsIdDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmClientsIdDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientsIdDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *AccessToken
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdEvaluateScopesProtocolMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdEvaluateScopesProtocolMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdEvaluateScopesProtocolMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdInstallationProvidersProviderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdInstallationProvidersProviderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdInstallationProvidersProviderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientsIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRealmClientsIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientsIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdNodesNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdNodesNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdNodesNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdOfflineSessionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdOfflineSessionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdOfflineSessionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdOfflineSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdOfflineSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdOfflineSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdOptionalClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdOptionalClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdOptionalClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientsIdOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmClientsIdOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientsIdOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdProtocolMappersProtocolProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdProtocolMappersProtocolProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdProtocolMappersProtocolProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdPushRevocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdPushRevocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdPushRevocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdRegistrationAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdRegistrationAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdRegistrationAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientsIdRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmClientsIdRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientsIdRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesRoleNameCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesRoleNameCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesRoleNameCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesRoleNameGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesRoleNameGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesRoleNameGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmClientsIdRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRealmClientsIdRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmClientsIdRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdRolesRoleNameUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdRolesRoleNameUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdRolesRoleNameUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdScopeMappingsClientsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdScopeMappingsClientsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdScopeMappingsClientsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdScopeMappingsClientsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdScopeMappingsClientsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdScopeMappingsClientsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmClientsIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmClientsIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmClientsIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmClientsIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmClientsIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmClientsIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdServiceAccountUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdServiceAccountUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdServiceAccountUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdSessionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdSessionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdSessionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdTestNodesAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdTestNodesAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdTestNodesAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmClientsIdUserSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmClientsIdUserSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmClientsIdUserSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ComponentRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmComponentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmComponentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmComponentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmComponentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ComponentRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmComponentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmComponentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmComponentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmComponentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmComponentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmComponentsIdSubComponentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ComponentTypeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmComponentsIdSubComponentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmComponentsIdSubComponentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmCredentialRegistratorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]string
}

// Status returns HTTPResponse.Status
func (r GetRealmCredentialRegistratorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmCredentialRegistratorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmDefaultDefaultClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmDefaultDefaultClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmDefaultDefaultClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmDefaultDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmDefaultDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmDefaultDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmDefaultGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmDefaultGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmDefaultGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmDefaultGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmDefaultGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmDefaultGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmDefaultGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmDefaultGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmDefaultGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmDefaultOptionalClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmDefaultOptionalClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmDefaultOptionalClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmDefaultOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmDefaultOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmDefaultOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]EventRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmEventsConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *RealmEventsConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmEventsConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmEventsConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmEventsConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmEventsConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmEventsConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupByPathPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupByPathPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupByPathPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmGroupsIdChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmGroupsIdChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmGroupsIdChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmGroupsIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRealmGroupsIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmGroupsIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdRoleMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdRoleMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdRoleMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmGroupsIdRoleMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmGroupsIdRoleMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmGroupsIdRoleMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdRoleMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdRoleMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdRoleMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmGroupsIdRoleMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmGroupsIdRoleMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmGroupsIdRoleMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmGroupsIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmGroupsIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmGroupsIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmGroupsIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmGroupsIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmGroupsIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdRoleMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdRoleMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdRoleMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmGroupsIdRoleMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmGroupsIdRoleMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmGroupsIdRoleMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmIdentityProviderImportConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostRealmIdentityProviderImportConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmIdentityProviderImportConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]IdentityProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmIdentityProviderInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmIdentityProviderInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmIdentityProviderInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmIdentityProviderInstancesAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmIdentityProviderInstancesAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmIdentityProviderInstancesAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderInstancesAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *IdentityProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderInstancesAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderInstancesAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmIdentityProviderInstancesAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmIdentityProviderInstancesAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmIdentityProviderInstancesAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderInstancesAliasExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderInstancesAliasExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderInstancesAliasExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderInstancesAliasMapperTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderInstancesAliasMapperTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderInstancesAliasMapperTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderInstancesAliasMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]IdentityProviderMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderInstancesAliasMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderInstancesAliasMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmIdentityProviderInstancesAliasMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmIdentityProviderInstancesAliasMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmIdentityProviderInstancesAliasMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmIdentityProviderInstancesAliasMappersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmIdentityProviderInstancesAliasMappersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmIdentityProviderInstancesAliasMappersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderInstancesAliasMappersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *IdentityProviderMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderInstancesAliasMappersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderInstancesAliasMappersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmIdentityProviderInstancesAliasMappersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmIdentityProviderInstancesAliasMappersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmIdentityProviderInstancesAliasMappersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmIdentityProviderProvidersProviderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRealmIdentityProviderProvidersProviderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmIdentityProviderProvidersProviderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *KeysMetadataRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmLogoutAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmLogoutAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmLogoutAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmPartialExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *RealmRepresentation
}

// Status returns HTTPResponse.Status
func (r PostRealmPartialExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmPartialExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmPartialImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmPartialImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmPartialImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmPushRevocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmPushRevocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmPushRevocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmRolesByIdRoleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmRolesByIdRoleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmRolesByIdRoleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesByIdRoleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesByIdRoleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesByIdRoleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmRolesByIdRoleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmRolesByIdRoleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmRolesByIdRoleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmRolesByIdRoleIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmRolesByIdRoleIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmRolesByIdRoleIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesByIdRoleIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesByIdRoleIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesByIdRoleIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmRolesByIdRoleIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmRolesByIdRoleIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmRolesByIdRoleIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesByIdRoleIdCompositesClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesByIdRoleIdCompositesClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesByIdRoleIdCompositesClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesByIdRoleIdCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesByIdRoleIdCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesByIdRoleIdCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesByIdRoleIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesByIdRoleIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesByIdRoleIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmRolesByIdRoleIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRealmRolesByIdRoleIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmRolesByIdRoleIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesRoleNameCompositesClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesRoleNameCompositesClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesRoleNameCompositesClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesRoleNameCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesRoleNameCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesRoleNameCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesRoleNameGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesRoleNameGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesRoleNameGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRealmRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmRolesRoleNameUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmRolesRoleNameUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmRolesRoleNameUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmSessionsSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmSessionsSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmSessionsSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmTestLDAPConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmTestLDAPConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmTestLDAPConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmTestSMTPConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmTestSMTPConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmTestSMTPConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUserStorageIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmUserStorageIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUserStorageIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUserStorageIdRemoveImportedUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUserStorageIdRemoveImportedUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUserStorageIdRemoveImportedUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUserStorageIdSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *SynchronizationResult
}

// Status returns HTTPResponse.Status
func (r PostRealmUserStorageIdSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUserStorageIdSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUserStorageIdUnlinkUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUserStorageIdUnlinkUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUserStorageIdUnlinkUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUserStorageParentIdMappersIdSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *SynchronizationResult
}

// Status returns HTTPResponse.Status
func (r PostRealmUserStorageParentIdMappersIdSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUserStorageParentIdMappersIdSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *int32
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]string
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdConsentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdConsentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdConsentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmUsersIdConsentsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmUsersIdConsentsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmUsersIdConsentsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmUsersIdCredentialsCredentialIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmUsersIdCredentialsCredentialIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmUsersIdCredentialsCredentialIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersIdCredentialsCredentialIdUserLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersIdCredentialsCredentialIdUserLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersIdCredentialsCredentialIdUserLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersIdDisableCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersIdDisableCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersIdDisableCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersIdExecuteActionsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersIdExecuteActionsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersIdExecuteActionsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdFederatedIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]FederatedIdentityRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdFederatedIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdFederatedIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmUsersIdFederatedIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmUsersIdFederatedIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmUsersIdFederatedIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersIdFederatedIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersIdFederatedIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersIdFederatedIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdGroupsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdGroupsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdGroupsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmUsersIdGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmUsersIdGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmUsersIdGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersIdGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersIdGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersIdGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersIdImpersonationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersIdImpersonationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersIdImpersonationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersIdLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersIdLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersIdLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdOfflineSessionsClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdOfflineSessionsClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdOfflineSessionsClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersIdResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersIdResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersIdResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdRoleMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdRoleMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdRoleMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmUsersIdRoleMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmUsersIdRoleMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmUsersIdRoleMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdRoleMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdRoleMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdRoleMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersIdRoleMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersIdRoleMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersIdRoleMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdRoleMappingsClientsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdRoleMappingsClientsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdRoleMappingsClientsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdRoleMappingsClientsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdRoleMappingsClientsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdRoleMappingsClientsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRealmUsersIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRealmUsersIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRealmUsersIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRealmUsersIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRealmUsersIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRealmUsersIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdRoleMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdRoleMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdRoleMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdRoleMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdRoleMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdRoleMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRealmUsersIdSendVerifyEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRealmUsersIdSendVerifyEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRealmUsersIdSendVerifyEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRealmUsersIdSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetRealmUsersIdSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRealmUsersIdSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PostWithBodyWithResponse request with arbitrary body returning *PostResponse
func (c *ClientWithResponses) PostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.PostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

func (c *ClientWithResponses) PostWithResponse(ctx context.Context, body PostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.Post(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

// GetIdNameWithResponse request returning *GetIdNameResponse
func (c *ClientWithResponses) GetIdNameWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIdNameResponse, error) {
	rsp, err := c.GetIdName(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdNameResponse(rsp)
}

// DeleteRealmWithResponse request returning *DeleteRealmResponse
func (c *ClientWithResponses) DeleteRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmResponse, error) {
	rsp, err := c.DeleteRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmResponse(rsp)
}

// GetRealmWithResponse request returning *GetRealmResponse
func (c *ClientWithResponses) GetRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmResponse, error) {
	rsp, err := c.GetRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmResponse(rsp)
}

// PutRealmWithBodyWithResponse request with arbitrary body returning *PutRealmResponse
func (c *ClientWithResponses) PutRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmResponse, error) {
	rsp, err := c.PutRealmWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmResponse(rsp)
}

func (c *ClientWithResponses) PutRealmWithResponse(ctx context.Context, realm string, body PutRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmResponse, error) {
	rsp, err := c.PutRealm(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmResponse(rsp)
}

// DeleteRealmAdminEventsWithResponse request returning *DeleteRealmAdminEventsResponse
func (c *ClientWithResponses) DeleteRealmAdminEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmAdminEventsResponse, error) {
	rsp, err := c.DeleteRealmAdminEvents(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmAdminEventsResponse(rsp)
}

// GetRealmAdminEventsWithResponse request returning *GetRealmAdminEventsResponse
func (c *ClientWithResponses) GetRealmAdminEventsWithResponse(ctx context.Context, realm string, params *GetRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*GetRealmAdminEventsResponse, error) {
	rsp, err := c.GetRealmAdminEvents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAdminEventsResponse(rsp)
}

// DeleteRealmAttackDetectionBruteForceUsersWithResponse request returning *DeleteRealmAttackDetectionBruteForceUsersResponse
func (c *ClientWithResponses) DeleteRealmAttackDetectionBruteForceUsersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmAttackDetectionBruteForceUsersResponse, error) {
	rsp, err := c.DeleteRealmAttackDetectionBruteForceUsers(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmAttackDetectionBruteForceUsersResponse(rsp)
}

// DeleteRealmAttackDetectionBruteForceUsersUserIdWithResponse request returning *DeleteRealmAttackDetectionBruteForceUsersUserIdResponse
func (c *ClientWithResponses) DeleteRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	rsp, err := c.DeleteRealmAttackDetectionBruteForceUsersUserId(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmAttackDetectionBruteForceUsersUserIdResponse(rsp)
}

// GetRealmAttackDetectionBruteForceUsersUserIdWithResponse request returning *GetRealmAttackDetectionBruteForceUsersUserIdResponse
func (c *ClientWithResponses) GetRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	rsp, err := c.GetRealmAttackDetectionBruteForceUsersUserId(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAttackDetectionBruteForceUsersUserIdResponse(rsp)
}

// GetRealmAuthenticationAuthenticatorProvidersWithResponse request returning *GetRealmAuthenticationAuthenticatorProvidersResponse
func (c *ClientWithResponses) GetRealmAuthenticationAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationAuthenticatorProvidersResponse, error) {
	rsp, err := c.GetRealmAuthenticationAuthenticatorProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationAuthenticatorProvidersResponse(rsp)
}

// GetRealmAuthenticationClientAuthenticatorProvidersWithResponse request returning *GetRealmAuthenticationClientAuthenticatorProvidersResponse
func (c *ClientWithResponses) GetRealmAuthenticationClientAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationClientAuthenticatorProvidersResponse, error) {
	rsp, err := c.GetRealmAuthenticationClientAuthenticatorProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationClientAuthenticatorProvidersResponse(rsp)
}

// GetRealmAuthenticationConfigDescriptionProviderIdWithResponse request returning *GetRealmAuthenticationConfigDescriptionProviderIdResponse
func (c *ClientWithResponses) GetRealmAuthenticationConfigDescriptionProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationConfigDescriptionProviderIdResponse, error) {
	rsp, err := c.GetRealmAuthenticationConfigDescriptionProviderId(ctx, realm, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationConfigDescriptionProviderIdResponse(rsp)
}

// DeleteRealmAuthenticationConfigIdWithResponse request returning *DeleteRealmAuthenticationConfigIdResponse
func (c *ClientWithResponses) DeleteRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.DeleteRealmAuthenticationConfigId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmAuthenticationConfigIdResponse(rsp)
}

// GetRealmAuthenticationConfigIdWithResponse request returning *GetRealmAuthenticationConfigIdResponse
func (c *ClientWithResponses) GetRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.GetRealmAuthenticationConfigId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationConfigIdResponse(rsp)
}

// PutRealmAuthenticationConfigIdWithBodyWithResponse request with arbitrary body returning *PutRealmAuthenticationConfigIdResponse
func (c *ClientWithResponses) PutRealmAuthenticationConfigIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.PutRealmAuthenticationConfigIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationConfigIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, body PutRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.PutRealmAuthenticationConfigId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationConfigIdResponse(rsp)
}

// PostRealmAuthenticationExecutionsWithBodyWithResponse request with arbitrary body returning *PostRealmAuthenticationExecutionsResponse
func (c *ClientWithResponses) PostRealmAuthenticationExecutionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsResponse, error) {
	rsp, err := c.PostRealmAuthenticationExecutionsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationExecutionsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmAuthenticationExecutionsWithResponse(ctx context.Context, realm string, body PostRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsResponse, error) {
	rsp, err := c.PostRealmAuthenticationExecutions(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationExecutionsResponse(rsp)
}

// DeleteRealmAuthenticationExecutionsExecutionIdWithResponse request returning *DeleteRealmAuthenticationExecutionsExecutionIdResponse
func (c *ClientWithResponses) DeleteRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationExecutionsExecutionIdResponse, error) {
	rsp, err := c.DeleteRealmAuthenticationExecutionsExecutionId(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmAuthenticationExecutionsExecutionIdResponse(rsp)
}

// GetRealmAuthenticationExecutionsExecutionIdWithResponse request returning *GetRealmAuthenticationExecutionsExecutionIdResponse
func (c *ClientWithResponses) GetRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationExecutionsExecutionIdResponse, error) {
	rsp, err := c.GetRealmAuthenticationExecutionsExecutionId(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationExecutionsExecutionIdResponse(rsp)
}

// PostRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse request with arbitrary body returning *PostRealmAuthenticationExecutionsExecutionIdConfigResponse
func (c *ClientWithResponses) PostRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdConfigResponse, error) {
	rsp, err := c.PostRealmAuthenticationExecutionsExecutionIdConfigWithBody(ctx, realm, executionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationExecutionsExecutionIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostRealmAuthenticationExecutionsExecutionIdConfigWithResponse(ctx context.Context, realm string, executionId string, body PostRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdConfigResponse, error) {
	rsp, err := c.PostRealmAuthenticationExecutionsExecutionIdConfig(ctx, realm, executionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationExecutionsExecutionIdConfigResponse(rsp)
}

// PostRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse request returning *PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse
func (c *ClientWithResponses) PostRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse, error) {
	rsp, err := c.PostRealmAuthenticationExecutionsExecutionIdLowerPriority(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse(rsp)
}

// PostRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse request returning *PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse
func (c *ClientWithResponses) PostRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse, error) {
	rsp, err := c.PostRealmAuthenticationExecutionsExecutionIdRaisePriority(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse(rsp)
}

// GetRealmAuthenticationFlowsWithResponse request returning *GetRealmAuthenticationFlowsResponse
func (c *ClientWithResponses) GetRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFlowsResponse, error) {
	rsp, err := c.GetRealmAuthenticationFlows(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationFlowsResponse(rsp)
}

// PostRealmAuthenticationFlowsWithBodyWithResponse request with arbitrary body returning *PostRealmAuthenticationFlowsResponse
func (c *ClientWithResponses) PostRealmAuthenticationFlowsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlowsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, body PostRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlows(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsResponse(rsp)
}

// PostRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse request with arbitrary body returning *PostRealmAuthenticationFlowsFlowAliasCopyResponse
func (c *ClientWithResponses) PostRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasCopyResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlowsFlowAliasCopyWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsFlowAliasCopyResponse(rsp)
}

func (c *ClientWithResponses) PostRealmAuthenticationFlowsFlowAliasCopyWithResponse(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasCopyResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlowsFlowAliasCopy(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsFlowAliasCopyResponse(rsp)
}

// GetRealmAuthenticationFlowsFlowAliasExecutionsWithResponse request returning *GetRealmAuthenticationFlowsFlowAliasExecutionsResponse
func (c *ClientWithResponses) GetRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	rsp, err := c.GetRealmAuthenticationFlowsFlowAliasExecutions(ctx, realm, flowAlias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp)
}

// PutRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse request with arbitrary body returning *PutRealmAuthenticationFlowsFlowAliasExecutionsResponse
func (c *ClientWithResponses) PutRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	rsp, err := c.PutRealmAuthenticationFlowsFlowAliasExecutionsWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, body PutRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	rsp, err := c.PutRealmAuthenticationFlowsFlowAliasExecutions(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp)
}

// PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse request with arbitrary body returning *PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse
func (c *ClientWithResponses) PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(rsp)
}

func (c *ClientWithResponses) PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithResponse(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlowsFlowAliasExecutionsExecution(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(rsp)
}

// PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse request with arbitrary body returning *PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse
func (c *ClientWithResponses) PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(rsp)
}

func (c *ClientWithResponses) PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithResponse(ctx context.Context, realm string, flowAlias string, body PostRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error) {
	rsp, err := c.PostRealmAuthenticationFlowsFlowAliasExecutionsFlow(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(rsp)
}

// DeleteRealmAuthenticationFlowsIdWithResponse request returning *DeleteRealmAuthenticationFlowsIdResponse
func (c *ClientWithResponses) DeleteRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.DeleteRealmAuthenticationFlowsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmAuthenticationFlowsIdResponse(rsp)
}

// GetRealmAuthenticationFlowsIdWithResponse request returning *GetRealmAuthenticationFlowsIdResponse
func (c *ClientWithResponses) GetRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.GetRealmAuthenticationFlowsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationFlowsIdResponse(rsp)
}

// PutRealmAuthenticationFlowsIdWithBodyWithResponse request with arbitrary body returning *PutRealmAuthenticationFlowsIdResponse
func (c *ClientWithResponses) PutRealmAuthenticationFlowsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.PutRealmAuthenticationFlowsIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationFlowsIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.PutRealmAuthenticationFlowsId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationFlowsIdResponse(rsp)
}

// GetRealmAuthenticationFormActionProvidersWithResponse request returning *GetRealmAuthenticationFormActionProvidersResponse
func (c *ClientWithResponses) GetRealmAuthenticationFormActionProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFormActionProvidersResponse, error) {
	rsp, err := c.GetRealmAuthenticationFormActionProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationFormActionProvidersResponse(rsp)
}

// GetRealmAuthenticationFormProvidersWithResponse request returning *GetRealmAuthenticationFormProvidersResponse
func (c *ClientWithResponses) GetRealmAuthenticationFormProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationFormProvidersResponse, error) {
	rsp, err := c.GetRealmAuthenticationFormProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationFormProvidersResponse(rsp)
}

// GetRealmAuthenticationPerClientConfigDescriptionWithResponse request returning *GetRealmAuthenticationPerClientConfigDescriptionResponse
func (c *ClientWithResponses) GetRealmAuthenticationPerClientConfigDescriptionWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationPerClientConfigDescriptionResponse, error) {
	rsp, err := c.GetRealmAuthenticationPerClientConfigDescription(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationPerClientConfigDescriptionResponse(rsp)
}

// PostRealmAuthenticationRegisterRequiredActionWithBodyWithResponse request with arbitrary body returning *PostRealmAuthenticationRegisterRequiredActionResponse
func (c *ClientWithResponses) PostRealmAuthenticationRegisterRequiredActionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRegisterRequiredActionResponse, error) {
	rsp, err := c.PostRealmAuthenticationRegisterRequiredActionWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationRegisterRequiredActionResponse(rsp)
}

func (c *ClientWithResponses) PostRealmAuthenticationRegisterRequiredActionWithResponse(ctx context.Context, realm string, body PostRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRegisterRequiredActionResponse, error) {
	rsp, err := c.PostRealmAuthenticationRegisterRequiredAction(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationRegisterRequiredActionResponse(rsp)
}

// GetRealmAuthenticationRequiredActionsWithResponse request returning *GetRealmAuthenticationRequiredActionsResponse
func (c *ClientWithResponses) GetRealmAuthenticationRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationRequiredActionsResponse, error) {
	rsp, err := c.GetRealmAuthenticationRequiredActions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationRequiredActionsResponse(rsp)
}

// DeleteRealmAuthenticationRequiredActionsAliasWithResponse request returning *DeleteRealmAuthenticationRequiredActionsAliasResponse
func (c *ClientWithResponses) DeleteRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.DeleteRealmAuthenticationRequiredActionsAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

// GetRealmAuthenticationRequiredActionsAliasWithResponse request returning *GetRealmAuthenticationRequiredActionsAliasResponse
func (c *ClientWithResponses) GetRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.GetRealmAuthenticationRequiredActionsAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

// PutRealmAuthenticationRequiredActionsAliasWithBodyWithResponse request with arbitrary body returning *PutRealmAuthenticationRequiredActionsAliasResponse
func (c *ClientWithResponses) PutRealmAuthenticationRequiredActionsAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.PutRealmAuthenticationRequiredActionsAliasWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

func (c *ClientWithResponses) PutRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, body PutRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.PutRealmAuthenticationRequiredActionsAlias(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

// PostRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse request returning *PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse
func (c *ClientWithResponses) PostRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse, error) {
	rsp, err := c.PostRealmAuthenticationRequiredActionsAliasLowerPriority(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse(rsp)
}

// PostRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse request returning *PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse
func (c *ClientWithResponses) PostRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse, error) {
	rsp, err := c.PostRealmAuthenticationRequiredActionsAliasRaisePriority(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse(rsp)
}

// GetRealmAuthenticationUnregisteredRequiredActionsWithResponse request returning *GetRealmAuthenticationUnregisteredRequiredActionsResponse
func (c *ClientWithResponses) GetRealmAuthenticationUnregisteredRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmAuthenticationUnregisteredRequiredActionsResponse, error) {
	rsp, err := c.GetRealmAuthenticationUnregisteredRequiredActions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmAuthenticationUnregisteredRequiredActionsResponse(rsp)
}

// PostRealmClearKeysCacheWithResponse request returning *PostRealmClearKeysCacheResponse
func (c *ClientWithResponses) PostRealmClearKeysCacheWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmClearKeysCacheResponse, error) {
	rsp, err := c.PostRealmClearKeysCache(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClearKeysCacheResponse(rsp)
}

// PostRealmClearRealmCacheWithResponse request returning *PostRealmClearRealmCacheResponse
func (c *ClientWithResponses) PostRealmClearRealmCacheWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmClearRealmCacheResponse, error) {
	rsp, err := c.PostRealmClearRealmCache(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClearRealmCacheResponse(rsp)
}

// PostRealmClearUserCacheWithResponse request returning *PostRealmClearUserCacheResponse
func (c *ClientWithResponses) PostRealmClearUserCacheWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmClearUserCacheResponse, error) {
	rsp, err := c.PostRealmClearUserCache(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClearUserCacheResponse(rsp)
}

// PostRealmClientDescriptionConverterWithBodyWithResponse request with arbitrary body returning *PostRealmClientDescriptionConverterResponse
func (c *ClientWithResponses) PostRealmClientDescriptionConverterWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientDescriptionConverterResponse, error) {
	rsp, err := c.PostRealmClientDescriptionConverterWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientDescriptionConverterResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientDescriptionConverterWithTextBodyWithResponse(ctx context.Context, realm string, body PostRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientDescriptionConverterResponse, error) {
	rsp, err := c.PostRealmClientDescriptionConverterWithTextBody(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientDescriptionConverterResponse(rsp)
}

// GetRealmClientRegistrationPolicyProvidersWithResponse request returning *GetRealmClientRegistrationPolicyProvidersResponse
func (c *ClientWithResponses) GetRealmClientRegistrationPolicyProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientRegistrationPolicyProvidersResponse, error) {
	rsp, err := c.GetRealmClientRegistrationPolicyProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientRegistrationPolicyProvidersResponse(rsp)
}

// GetRealmClientScopesWithResponse request returning *GetRealmClientScopesResponse
func (c *ClientWithResponses) GetRealmClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesResponse, error) {
	rsp, err := c.GetRealmClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesResponse(rsp)
}

// PostRealmClientScopesWithBodyWithResponse request with arbitrary body returning *PostRealmClientScopesResponse
func (c *ClientWithResponses) PostRealmClientScopesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesResponse, error) {
	rsp, err := c.PostRealmClientScopesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientScopesWithResponse(ctx context.Context, realm string, body PostRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesResponse, error) {
	rsp, err := c.PostRealmClientScopes(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesResponse(rsp)
}

// DeleteRealmClientScopesId1ProtocolMappersModelsId2WithResponse request returning *DeleteRealmClientScopesId1ProtocolMappersModelsId2Response
func (c *ClientWithResponses) DeleteRealmClientScopesId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.DeleteRealmClientScopesId1ProtocolMappersModelsId2(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientScopesId1ProtocolMappersModelsId2Response(rsp)
}

// GetRealmClientScopesId1ProtocolMappersModelsId2WithResponse request returning *GetRealmClientScopesId1ProtocolMappersModelsId2Response
func (c *ClientWithResponses) GetRealmClientScopesId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.GetRealmClientScopesId1ProtocolMappersModelsId2(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesId1ProtocolMappersModelsId2Response(rsp)
}

// PutRealmClientScopesId1ProtocolMappersModelsId2WithBodyWithResponse request with arbitrary body returning *PutRealmClientScopesId1ProtocolMappersModelsId2Response
func (c *ClientWithResponses) PutRealmClientScopesId1ProtocolMappersModelsId2WithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientScopesId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.PutRealmClientScopesId1ProtocolMappersModelsId2WithBody(ctx, realm, id1, id2, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientScopesId1ProtocolMappersModelsId2Response(rsp)
}

func (c *ClientWithResponses) PutRealmClientScopesId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientScopesId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientScopesId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.PutRealmClientScopesId1ProtocolMappersModelsId2(ctx, realm, id1, id2, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientScopesId1ProtocolMappersModelsId2Response(rsp)
}

// DeleteRealmClientScopesIdWithResponse request returning *DeleteRealmClientScopesIdResponse
func (c *ClientWithResponses) DeleteRealmClientScopesIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdResponse, error) {
	rsp, err := c.DeleteRealmClientScopesId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientScopesIdResponse(rsp)
}

// GetRealmClientScopesIdWithResponse request returning *GetRealmClientScopesIdResponse
func (c *ClientWithResponses) GetRealmClientScopesIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdResponse, error) {
	rsp, err := c.GetRealmClientScopesId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdResponse(rsp)
}

// PutRealmClientScopesIdWithBodyWithResponse request with arbitrary body returning *PutRealmClientScopesIdResponse
func (c *ClientWithResponses) PutRealmClientScopesIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientScopesIdResponse, error) {
	rsp, err := c.PutRealmClientScopesIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientScopesIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmClientScopesIdWithResponse(ctx context.Context, realm string, id string, body PutRealmClientScopesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientScopesIdResponse, error) {
	rsp, err := c.PutRealmClientScopesId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientScopesIdResponse(rsp)
}

// PostRealmClientScopesIdProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostRealmClientScopesIdProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostRealmClientScopesIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostRealmClientScopesIdProtocolMappersAddModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientScopesIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostRealmClientScopesIdProtocolMappersAddModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdProtocolMappersAddModelsResponse(rsp)
}

// GetRealmClientScopesIdProtocolMappersModelsWithResponse request returning *GetRealmClientScopesIdProtocolMappersModelsResponse
func (c *ClientWithResponses) GetRealmClientScopesIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdProtocolMappersModelsResponse, error) {
	rsp, err := c.GetRealmClientScopesIdProtocolMappersModels(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdProtocolMappersModelsResponse(rsp)
}

// PostRealmClientScopesIdProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostRealmClientScopesIdProtocolMappersModelsResponse
func (c *ClientWithResponses) PostRealmClientScopesIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostRealmClientScopesIdProtocolMappersModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientScopesIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientScopesIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostRealmClientScopesIdProtocolMappersModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdProtocolMappersModelsResponse(rsp)
}

// GetRealmClientScopesIdProtocolMappersProtocolProtocolWithResponse request returning *GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse
func (c *ClientWithResponses) GetRealmClientScopesIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse, error) {
	rsp, err := c.GetRealmClientScopesIdProtocolMappersProtocolProtocol(ctx, realm, id, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdProtocolMappersProtocolProtocolResponse(rsp)
}

// GetRealmClientScopesIdScopeMappingsWithResponse request returning *GetRealmClientScopesIdScopeMappingsResponse
func (c *ClientWithResponses) GetRealmClientScopesIdScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsResponse, error) {
	rsp, err := c.GetRealmClientScopesIdScopeMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdScopeMappingsResponse(rsp)
}

// DeleteRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *DeleteRealmClientScopesIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) DeleteRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmClientScopesIdScopeMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientScopesIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmClientScopesIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmClientScopesIdScopeMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientScopesIdScopeMappingsClientsClientResponse(rsp)
}

// GetRealmClientScopesIdScopeMappingsClientsClientWithResponse request returning *GetRealmClientScopesIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) GetRealmClientScopesIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.GetRealmClientScopesIdScopeMappingsClientsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdScopeMappingsClientsClientResponse(rsp)
}

// PostRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *PostRealmClientScopesIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) PostRealmClientScopesIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmClientScopesIdScopeMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientScopesIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmClientScopesIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmClientScopesIdScopeMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdScopeMappingsClientsClientResponse(rsp)
}

// GetRealmClientScopesIdScopeMappingsClientsClientAvailableWithResponse request returning *GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse
func (c *ClientWithResponses) GetRealmClientScopesIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse, error) {
	rsp, err := c.GetRealmClientScopesIdScopeMappingsClientsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse(rsp)
}

// GetRealmClientScopesIdScopeMappingsClientsClientCompositeWithResponse request returning *GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse
func (c *ClientWithResponses) GetRealmClientScopesIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse, error) {
	rsp, err := c.GetRealmClientScopesIdScopeMappingsClientsClientComposite(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse(rsp)
}

// DeleteRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteRealmClientScopesIdScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmClientScopesIdScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientScopesIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmClientScopesIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientScopesIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmClientScopesIdScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientScopesIdScopeMappingsRealmResponse(rsp)
}

// GetRealmClientScopesIdScopeMappingsRealmWithResponse request returning *GetRealmClientScopesIdScopeMappingsRealmResponse
func (c *ClientWithResponses) GetRealmClientScopesIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsRealmResponse, error) {
	rsp, err := c.GetRealmClientScopesIdScopeMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdScopeMappingsRealmResponse(rsp)
}

// PostRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostRealmClientScopesIdScopeMappingsRealmResponse
func (c *ClientWithResponses) PostRealmClientScopesIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostRealmClientScopesIdScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientScopesIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmClientScopesIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientScopesIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostRealmClientScopesIdScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientScopesIdScopeMappingsRealmResponse(rsp)
}

// GetRealmClientScopesIdScopeMappingsRealmAvailableWithResponse request returning *GetRealmClientScopesIdScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetRealmClientScopesIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetRealmClientScopesIdScopeMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdScopeMappingsRealmAvailableResponse(rsp)
}

// GetRealmClientScopesIdScopeMappingsRealmCompositeWithResponse request returning *GetRealmClientScopesIdScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetRealmClientScopesIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientScopesIdScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetRealmClientScopesIdScopeMappingsRealmComposite(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientScopesIdScopeMappingsRealmCompositeResponse(rsp)
}

// GetRealmClientSessionStatsWithResponse request returning *GetRealmClientSessionStatsResponse
func (c *ClientWithResponses) GetRealmClientSessionStatsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientSessionStatsResponse, error) {
	rsp, err := c.GetRealmClientSessionStats(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientSessionStatsResponse(rsp)
}

// GetRealmClientsWithResponse request returning *GetRealmClientsResponse
func (c *ClientWithResponses) GetRealmClientsWithResponse(ctx context.Context, realm string, params *GetRealmClientsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsResponse, error) {
	rsp, err := c.GetRealmClients(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsResponse(rsp)
}

// PostRealmClientsWithBodyWithResponse request with arbitrary body returning *PostRealmClientsResponse
func (c *ClientWithResponses) PostRealmClientsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsResponse, error) {
	rsp, err := c.PostRealmClientsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsWithResponse(ctx context.Context, realm string, body PostRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsResponse, error) {
	rsp, err := c.PostRealmClients(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsResponse(rsp)
}

// GetRealmClientsInitialAccessWithResponse request returning *GetRealmClientsInitialAccessResponse
func (c *ClientWithResponses) GetRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmClientsInitialAccessResponse, error) {
	rsp, err := c.GetRealmClientsInitialAccess(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsInitialAccessResponse(rsp)
}

// PostRealmClientsInitialAccessWithBodyWithResponse request with arbitrary body returning *PostRealmClientsInitialAccessResponse
func (c *ClientWithResponses) PostRealmClientsInitialAccessWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsInitialAccessResponse, error) {
	rsp, err := c.PostRealmClientsInitialAccessWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsInitialAccessResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, body PostRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsInitialAccessResponse, error) {
	rsp, err := c.PostRealmClientsInitialAccess(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsInitialAccessResponse(rsp)
}

// DeleteRealmClientsInitialAccessIdWithResponse request returning *DeleteRealmClientsInitialAccessIdResponse
func (c *ClientWithResponses) DeleteRealmClientsInitialAccessIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsInitialAccessIdResponse, error) {
	rsp, err := c.DeleteRealmClientsInitialAccessId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsInitialAccessIdResponse(rsp)
}

// DeleteRealmClientsId1ProtocolMappersModelsId2WithResponse request returning *DeleteRealmClientsId1ProtocolMappersModelsId2Response
func (c *ClientWithResponses) DeleteRealmClientsId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.DeleteRealmClientsId1ProtocolMappersModelsId2(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsId1ProtocolMappersModelsId2Response(rsp)
}

// GetRealmClientsId1ProtocolMappersModelsId2WithResponse request returning *GetRealmClientsId1ProtocolMappersModelsId2Response
func (c *ClientWithResponses) GetRealmClientsId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, reqEditors ...RequestEditorFn) (*GetRealmClientsId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.GetRealmClientsId1ProtocolMappersModelsId2(ctx, realm, id1, id2, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsId1ProtocolMappersModelsId2Response(rsp)
}

// PutRealmClientsId1ProtocolMappersModelsId2WithBodyWithResponse request with arbitrary body returning *PutRealmClientsId1ProtocolMappersModelsId2Response
func (c *ClientWithResponses) PutRealmClientsId1ProtocolMappersModelsId2WithBodyWithResponse(ctx context.Context, realm string, id1 string, id2 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.PutRealmClientsId1ProtocolMappersModelsId2WithBody(ctx, realm, id1, id2, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsId1ProtocolMappersModelsId2Response(rsp)
}

func (c *ClientWithResponses) PutRealmClientsId1ProtocolMappersModelsId2WithResponse(ctx context.Context, realm string, id1 string, id2 string, body PutRealmClientsId1ProtocolMappersModelsId2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsId1ProtocolMappersModelsId2Response, error) {
	rsp, err := c.PutRealmClientsId1ProtocolMappersModelsId2(ctx, realm, id1, id2, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsId1ProtocolMappersModelsId2Response(rsp)
}

// DeleteRealmClientsIdWithResponse request returning *DeleteRealmClientsIdResponse
func (c *ClientWithResponses) DeleteRealmClientsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdResponse, error) {
	rsp, err := c.DeleteRealmClientsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdResponse(rsp)
}

// GetRealmClientsIdWithResponse request returning *GetRealmClientsIdResponse
func (c *ClientWithResponses) GetRealmClientsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdResponse, error) {
	rsp, err := c.GetRealmClientsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdResponse(rsp)
}

// PutRealmClientsIdWithBodyWithResponse request with arbitrary body returning *PutRealmClientsIdResponse
func (c *ClientWithResponses) PutRealmClientsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdResponse, error) {
	rsp, err := c.PutRealmClientsIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmClientsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmClientsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdResponse, error) {
	rsp, err := c.PutRealmClientsId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdResponse(rsp)
}

// GetRealmClientsIdCertificatesAttrWithResponse request returning *GetRealmClientsIdCertificatesAttrResponse
func (c *ClientWithResponses) GetRealmClientsIdCertificatesAttrWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdCertificatesAttrResponse, error) {
	rsp, err := c.GetRealmClientsIdCertificatesAttr(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdCertificatesAttrResponse(rsp)
}

// PostRealmClientsIdCertificatesAttrDownloadWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdCertificatesAttrDownloadResponse
func (c *ClientWithResponses) PostRealmClientsIdCertificatesAttrDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrDownloadResponse, error) {
	rsp, err := c.PostRealmClientsIdCertificatesAttrDownloadWithBody(ctx, realm, id, attr, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdCertificatesAttrDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdCertificatesAttrDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrDownloadResponse, error) {
	rsp, err := c.PostRealmClientsIdCertificatesAttrDownload(ctx, realm, id, attr, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdCertificatesAttrDownloadResponse(rsp)
}

// PostRealmClientsIdCertificatesAttrGenerateWithResponse request returning *PostRealmClientsIdCertificatesAttrGenerateResponse
func (c *ClientWithResponses) PostRealmClientsIdCertificatesAttrGenerateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrGenerateResponse, error) {
	rsp, err := c.PostRealmClientsIdCertificatesAttrGenerate(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdCertificatesAttrGenerateResponse(rsp)
}

// PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse
func (c *ClientWithResponses) PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBodyWithResponse(ctx context.Context, realm string, id string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse, error) {
	rsp, err := c.PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithBody(ctx, realm, id, attr, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithResponse(ctx context.Context, realm string, id string, attr string, body PostRealmClientsIdCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse, error) {
	rsp, err := c.PostRealmClientsIdCertificatesAttrGenerateAndDownload(ctx, realm, id, attr, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse(rsp)
}

// PostRealmClientsIdCertificatesAttrUploadWithResponse request returning *PostRealmClientsIdCertificatesAttrUploadResponse
func (c *ClientWithResponses) PostRealmClientsIdCertificatesAttrUploadWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrUploadResponse, error) {
	rsp, err := c.PostRealmClientsIdCertificatesAttrUpload(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdCertificatesAttrUploadResponse(rsp)
}

// PostRealmClientsIdCertificatesAttrUploadCertificateWithResponse request returning *PostRealmClientsIdCertificatesAttrUploadCertificateResponse
func (c *ClientWithResponses) PostRealmClientsIdCertificatesAttrUploadCertificateWithResponse(ctx context.Context, realm string, id string, attr string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdCertificatesAttrUploadCertificateResponse, error) {
	rsp, err := c.PostRealmClientsIdCertificatesAttrUploadCertificate(ctx, realm, id, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdCertificatesAttrUploadCertificateResponse(rsp)
}

// GetRealmClientsIdClientSecretWithResponse request returning *GetRealmClientsIdClientSecretResponse
func (c *ClientWithResponses) GetRealmClientsIdClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdClientSecretResponse, error) {
	rsp, err := c.GetRealmClientsIdClientSecret(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdClientSecretResponse(rsp)
}

// PostRealmClientsIdClientSecretWithResponse request returning *PostRealmClientsIdClientSecretResponse
func (c *ClientWithResponses) PostRealmClientsIdClientSecretWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdClientSecretResponse, error) {
	rsp, err := c.PostRealmClientsIdClientSecret(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdClientSecretResponse(rsp)
}

// GetRealmClientsIdDefaultClientScopesWithResponse request returning *GetRealmClientsIdDefaultClientScopesResponse
func (c *ClientWithResponses) GetRealmClientsIdDefaultClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdDefaultClientScopesResponse, error) {
	rsp, err := c.GetRealmClientsIdDefaultClientScopes(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdDefaultClientScopesResponse(rsp)
}

// DeleteRealmClientsIdDefaultClientScopesClientScopeIdWithResponse request returning *DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteRealmClientsIdDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteRealmClientsIdDefaultClientScopesClientScopeId(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse(rsp)
}

// PutRealmClientsIdDefaultClientScopesClientScopeIdWithResponse request returning *PutRealmClientsIdDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutRealmClientsIdDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmClientsIdDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutRealmClientsIdDefaultClientScopesClientScopeId(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdDefaultClientScopesClientScopeIdResponse(rsp)
}

// GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenWithResponse request returning *GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse
func (c *ClientWithResponses) GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse, error) {
	rsp, err := c.GetRealmClientsIdEvaluateScopesGenerateExampleAccessToken(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse(rsp)
}

// GetRealmClientsIdEvaluateScopesProtocolMappersWithResponse request returning *GetRealmClientsIdEvaluateScopesProtocolMappersResponse
func (c *ClientWithResponses) GetRealmClientsIdEvaluateScopesProtocolMappersWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesProtocolMappersResponse, error) {
	rsp, err := c.GetRealmClientsIdEvaluateScopesProtocolMappers(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdEvaluateScopesProtocolMappersResponse(rsp)
}

// GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse request returning *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse
func (c *ClientWithResponses) GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse, error) {
	rsp, err := c.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGranted(ctx, realm, id, roleContainerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse(rsp)
}

// GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse request returning *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse
func (c *ClientWithResponses) GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse(ctx context.Context, realm string, id string, roleContainerId string, params *GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse, error) {
	rsp, err := c.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGranted(ctx, realm, id, roleContainerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse(rsp)
}

// GetRealmClientsIdInstallationProvidersProviderIdWithResponse request returning *GetRealmClientsIdInstallationProvidersProviderIdResponse
func (c *ClientWithResponses) GetRealmClientsIdInstallationProvidersProviderIdWithResponse(ctx context.Context, realm string, id string, providerId string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdInstallationProvidersProviderIdResponse, error) {
	rsp, err := c.GetRealmClientsIdInstallationProvidersProviderId(ctx, realm, id, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdInstallationProvidersProviderIdResponse(rsp)
}

// GetRealmClientsIdManagementPermissionsWithResponse request returning *GetRealmClientsIdManagementPermissionsResponse
func (c *ClientWithResponses) GetRealmClientsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdManagementPermissionsResponse, error) {
	rsp, err := c.GetRealmClientsIdManagementPermissions(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdManagementPermissionsResponse(rsp)
}

// PutRealmClientsIdManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRealmClientsIdManagementPermissionsResponse
func (c *ClientWithResponses) PutRealmClientsIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmClientsIdManagementPermissionsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmClientsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutRealmClientsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmClientsIdManagementPermissions(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdManagementPermissionsResponse(rsp)
}

// PostRealmClientsIdNodesWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdNodesResponse
func (c *ClientWithResponses) PostRealmClientsIdNodesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdNodesResponse, error) {
	rsp, err := c.PostRealmClientsIdNodesWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdNodesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdNodesWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdNodesResponse, error) {
	rsp, err := c.PostRealmClientsIdNodes(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdNodesResponse(rsp)
}

// DeleteRealmClientsIdNodesNodeWithResponse request returning *DeleteRealmClientsIdNodesNodeResponse
func (c *ClientWithResponses) DeleteRealmClientsIdNodesNodeWithResponse(ctx context.Context, realm string, id string, node string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdNodesNodeResponse, error) {
	rsp, err := c.DeleteRealmClientsIdNodesNode(ctx, realm, id, node, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdNodesNodeResponse(rsp)
}

// GetRealmClientsIdOfflineSessionCountWithResponse request returning *GetRealmClientsIdOfflineSessionCountResponse
func (c *ClientWithResponses) GetRealmClientsIdOfflineSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdOfflineSessionCountResponse, error) {
	rsp, err := c.GetRealmClientsIdOfflineSessionCount(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdOfflineSessionCountResponse(rsp)
}

// GetRealmClientsIdOfflineSessionsWithResponse request returning *GetRealmClientsIdOfflineSessionsResponse
func (c *ClientWithResponses) GetRealmClientsIdOfflineSessionsWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdOfflineSessionsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdOfflineSessionsResponse, error) {
	rsp, err := c.GetRealmClientsIdOfflineSessions(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdOfflineSessionsResponse(rsp)
}

// GetRealmClientsIdOptionalClientScopesWithResponse request returning *GetRealmClientsIdOptionalClientScopesResponse
func (c *ClientWithResponses) GetRealmClientsIdOptionalClientScopesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdOptionalClientScopesResponse, error) {
	rsp, err := c.GetRealmClientsIdOptionalClientScopes(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdOptionalClientScopesResponse(rsp)
}

// DeleteRealmClientsIdOptionalClientScopesClientScopeIdWithResponse request returning *DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteRealmClientsIdOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteRealmClientsIdOptionalClientScopesClientScopeId(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse(rsp)
}

// PutRealmClientsIdOptionalClientScopesClientScopeIdWithResponse request returning *PutRealmClientsIdOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutRealmClientsIdOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, id string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmClientsIdOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutRealmClientsIdOptionalClientScopesClientScopeId(ctx, realm, id, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdOptionalClientScopesClientScopeIdResponse(rsp)
}

// PostRealmClientsIdProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostRealmClientsIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostRealmClientsIdProtocolMappersAddModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostRealmClientsIdProtocolMappersAddModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdProtocolMappersAddModelsResponse(rsp)
}

// GetRealmClientsIdProtocolMappersModelsWithResponse request returning *GetRealmClientsIdProtocolMappersModelsResponse
func (c *ClientWithResponses) GetRealmClientsIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdProtocolMappersModelsResponse, error) {
	rsp, err := c.GetRealmClientsIdProtocolMappersModels(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdProtocolMappersModelsResponse(rsp)
}

// PostRealmClientsIdProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdProtocolMappersModelsResponse
func (c *ClientWithResponses) PostRealmClientsIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostRealmClientsIdProtocolMappersModelsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostRealmClientsIdProtocolMappersModels(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdProtocolMappersModelsResponse(rsp)
}

// GetRealmClientsIdProtocolMappersProtocolProtocolWithResponse request returning *GetRealmClientsIdProtocolMappersProtocolProtocolResponse
func (c *ClientWithResponses) GetRealmClientsIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, id string, protocol string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdProtocolMappersProtocolProtocolResponse, error) {
	rsp, err := c.GetRealmClientsIdProtocolMappersProtocolProtocol(ctx, realm, id, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdProtocolMappersProtocolProtocolResponse(rsp)
}

// PostRealmClientsIdPushRevocationWithResponse request returning *PostRealmClientsIdPushRevocationResponse
func (c *ClientWithResponses) PostRealmClientsIdPushRevocationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdPushRevocationResponse, error) {
	rsp, err := c.PostRealmClientsIdPushRevocation(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdPushRevocationResponse(rsp)
}

// PostRealmClientsIdRegistrationAccessTokenWithResponse request returning *PostRealmClientsIdRegistrationAccessTokenResponse
func (c *ClientWithResponses) PostRealmClientsIdRegistrationAccessTokenWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRegistrationAccessTokenResponse, error) {
	rsp, err := c.PostRealmClientsIdRegistrationAccessToken(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdRegistrationAccessTokenResponse(rsp)
}

// GetRealmClientsIdRolesWithResponse request returning *GetRealmClientsIdRolesResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdRolesParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesResponse, error) {
	rsp, err := c.GetRealmClientsIdRoles(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesResponse(rsp)
}

// PostRealmClientsIdRolesWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdRolesResponse
func (c *ClientWithResponses) PostRealmClientsIdRolesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesResponse, error) {
	rsp, err := c.PostRealmClientsIdRolesWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdRolesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdRolesWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesResponse, error) {
	rsp, err := c.PostRealmClientsIdRoles(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdRolesResponse(rsp)
}

// DeleteRealmClientsIdRolesRoleNameWithResponse request returning *DeleteRealmClientsIdRolesRoleNameResponse
func (c *ClientWithResponses) DeleteRealmClientsIdRolesRoleNameWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdRolesRoleNameResponse, error) {
	rsp, err := c.DeleteRealmClientsIdRolesRoleName(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdRolesRoleNameResponse(rsp)
}

// GetRealmClientsIdRolesRoleNameWithResponse request returning *GetRealmClientsIdRolesRoleNameResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesRoleNameWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameResponse, error) {
	rsp, err := c.GetRealmClientsIdRolesRoleName(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesRoleNameResponse(rsp)
}

// PutRealmClientsIdRolesRoleNameWithBodyWithResponse request with arbitrary body returning *PutRealmClientsIdRolesRoleNameResponse
func (c *ClientWithResponses) PutRealmClientsIdRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameResponse, error) {
	rsp, err := c.PutRealmClientsIdRolesRoleNameWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdRolesRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PutRealmClientsIdRolesRoleNameWithResponse(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameResponse, error) {
	rsp, err := c.PutRealmClientsIdRolesRoleName(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdRolesRoleNameResponse(rsp)
}

// DeleteRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *DeleteRealmClientsIdRolesRoleNameCompositesResponse
func (c *ClientWithResponses) DeleteRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteRealmClientsIdRolesRoleNameCompositesWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmClientsIdRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body DeleteRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteRealmClientsIdRolesRoleNameComposites(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdRolesRoleNameCompositesResponse(rsp)
}

// GetRealmClientsIdRolesRoleNameCompositesWithResponse request returning *GetRealmClientsIdRolesRoleNameCompositesResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameCompositesResponse, error) {
	rsp, err := c.GetRealmClientsIdRolesRoleNameComposites(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesRoleNameCompositesResponse(rsp)
}

// PostRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdRolesRoleNameCompositesResponse
func (c *ClientWithResponses) PostRealmClientsIdRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostRealmClientsIdRolesRoleNameCompositesWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, id string, roleName string, body PostRealmClientsIdRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostRealmClientsIdRolesRoleNameComposites(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdRolesRoleNameCompositesResponse(rsp)
}

// GetRealmClientsIdRolesRoleNameCompositesClientsClientWithResponse request returning *GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesRoleNameCompositesClientsClientWithResponse(ctx context.Context, realm string, id string, roleName string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse, error) {
	rsp, err := c.GetRealmClientsIdRolesRoleNameCompositesClientsClient(ctx, realm, id, roleName, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesRoleNameCompositesClientsClientResponse(rsp)
}

// GetRealmClientsIdRolesRoleNameCompositesRealmWithResponse request returning *GetRealmClientsIdRolesRoleNameCompositesRealmResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameCompositesRealmResponse, error) {
	rsp, err := c.GetRealmClientsIdRolesRoleNameCompositesRealm(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesRoleNameCompositesRealmResponse(rsp)
}

// GetRealmClientsIdRolesRoleNameGroupsWithResponse request returning *GetRealmClientsIdRolesRoleNameGroupsResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameGroupsResponse, error) {
	rsp, err := c.GetRealmClientsIdRolesRoleNameGroups(ctx, realm, id, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesRoleNameGroupsResponse(rsp)
}

// GetRealmClientsIdRolesRoleNameManagementPermissionsWithResponse request returning *GetRealmClientsIdRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.GetRealmClientsIdRolesRoleNameManagementPermissions(ctx, realm, id, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesRoleNameManagementPermissionsResponse(rsp)
}

// PutRealmClientsIdRolesRoleNameManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRealmClientsIdRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) PutRealmClientsIdRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmClientsIdRolesRoleNameManagementPermissionsWithBody(ctx, realm, id, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdRolesRoleNameManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmClientsIdRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, id string, roleName string, body PutRealmClientsIdRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmClientsIdRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmClientsIdRolesRoleNameManagementPermissions(ctx, realm, id, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmClientsIdRolesRoleNameManagementPermissionsResponse(rsp)
}

// GetRealmClientsIdRolesRoleNameUsersWithResponse request returning *GetRealmClientsIdRolesRoleNameUsersResponse
func (c *ClientWithResponses) GetRealmClientsIdRolesRoleNameUsersWithResponse(ctx context.Context, realm string, id string, roleName string, params *GetRealmClientsIdRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdRolesRoleNameUsersResponse, error) {
	rsp, err := c.GetRealmClientsIdRolesRoleNameUsers(ctx, realm, id, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdRolesRoleNameUsersResponse(rsp)
}

// GetRealmClientsIdScopeMappingsWithResponse request returning *GetRealmClientsIdScopeMappingsResponse
func (c *ClientWithResponses) GetRealmClientsIdScopeMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsResponse, error) {
	rsp, err := c.GetRealmClientsIdScopeMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdScopeMappingsResponse(rsp)
}

// DeleteRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *DeleteRealmClientsIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) DeleteRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmClientsIdScopeMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmClientsIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmClientsIdScopeMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdScopeMappingsClientsClientResponse(rsp)
}

// GetRealmClientsIdScopeMappingsClientsClientWithResponse request returning *GetRealmClientsIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) GetRealmClientsIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.GetRealmClientsIdScopeMappingsClientsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdScopeMappingsClientsClientResponse(rsp)
}

// PostRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) PostRealmClientsIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmClientsIdScopeMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmClientsIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmClientsIdScopeMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdScopeMappingsClientsClientResponse(rsp)
}

// GetRealmClientsIdScopeMappingsClientsClientAvailableWithResponse request returning *GetRealmClientsIdScopeMappingsClientsClientAvailableResponse
func (c *ClientWithResponses) GetRealmClientsIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsClientsClientAvailableResponse, error) {
	rsp, err := c.GetRealmClientsIdScopeMappingsClientsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdScopeMappingsClientsClientAvailableResponse(rsp)
}

// GetRealmClientsIdScopeMappingsClientsClientCompositeWithResponse request returning *GetRealmClientsIdScopeMappingsClientsClientCompositeResponse
func (c *ClientWithResponses) GetRealmClientsIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsClientsClientCompositeResponse, error) {
	rsp, err := c.GetRealmClientsIdScopeMappingsClientsClientComposite(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdScopeMappingsClientsClientCompositeResponse(rsp)
}

// DeleteRealmClientsIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteRealmClientsIdScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteRealmClientsIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmClientsIdScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmClientsIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmClientsIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmClientsIdScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmClientsIdScopeMappingsRealmResponse(rsp)
}

// GetRealmClientsIdScopeMappingsRealmWithResponse request returning *GetRealmClientsIdScopeMappingsRealmResponse
func (c *ClientWithResponses) GetRealmClientsIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsRealmResponse, error) {
	rsp, err := c.GetRealmClientsIdScopeMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdScopeMappingsRealmResponse(rsp)
}

// PostRealmClientsIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostRealmClientsIdScopeMappingsRealmResponse
func (c *ClientWithResponses) PostRealmClientsIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostRealmClientsIdScopeMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostRealmClientsIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmClientsIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmClientsIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostRealmClientsIdScopeMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmClientsIdScopeMappingsRealmResponse(rsp)
}

// GetRealmClientsIdScopeMappingsRealmAvailableWithResponse request returning *GetRealmClientsIdScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetRealmClientsIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetRealmClientsIdScopeMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdScopeMappingsRealmAvailableResponse(rsp)
}

// GetRealmClientsIdScopeMappingsRealmCompositeWithResponse request returning *GetRealmClientsIdScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetRealmClientsIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetRealmClientsIdScopeMappingsRealmComposite(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdScopeMappingsRealmCompositeResponse(rsp)
}

// GetRealmClientsIdServiceAccountUserWithResponse request returning *GetRealmClientsIdServiceAccountUserResponse
func (c *ClientWithResponses) GetRealmClientsIdServiceAccountUserWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdServiceAccountUserResponse, error) {
	rsp, err := c.GetRealmClientsIdServiceAccountUser(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdServiceAccountUserResponse(rsp)
}

// GetRealmClientsIdSessionCountWithResponse request returning *GetRealmClientsIdSessionCountResponse
func (c *ClientWithResponses) GetRealmClientsIdSessionCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdSessionCountResponse, error) {
	rsp, err := c.GetRealmClientsIdSessionCount(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdSessionCountResponse(rsp)
}

// GetRealmClientsIdTestNodesAvailableWithResponse request returning *GetRealmClientsIdTestNodesAvailableResponse
func (c *ClientWithResponses) GetRealmClientsIdTestNodesAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmClientsIdTestNodesAvailableResponse, error) {
	rsp, err := c.GetRealmClientsIdTestNodesAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdTestNodesAvailableResponse(rsp)
}

// GetRealmClientsIdUserSessionsWithResponse request returning *GetRealmClientsIdUserSessionsResponse
func (c *ClientWithResponses) GetRealmClientsIdUserSessionsWithResponse(ctx context.Context, realm string, id string, params *GetRealmClientsIdUserSessionsParams, reqEditors ...RequestEditorFn) (*GetRealmClientsIdUserSessionsResponse, error) {
	rsp, err := c.GetRealmClientsIdUserSessions(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmClientsIdUserSessionsResponse(rsp)
}

// GetRealmComponentsWithResponse request returning *GetRealmComponentsResponse
func (c *ClientWithResponses) GetRealmComponentsWithResponse(ctx context.Context, realm string, params *GetRealmComponentsParams, reqEditors ...RequestEditorFn) (*GetRealmComponentsResponse, error) {
	rsp, err := c.GetRealmComponents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmComponentsResponse(rsp)
}

// PostRealmComponentsWithBodyWithResponse request with arbitrary body returning *PostRealmComponentsResponse
func (c *ClientWithResponses) PostRealmComponentsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmComponentsResponse, error) {
	rsp, err := c.PostRealmComponentsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmComponentsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmComponentsWithResponse(ctx context.Context, realm string, body PostRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmComponentsResponse, error) {
	rsp, err := c.PostRealmComponents(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmComponentsResponse(rsp)
}

// DeleteRealmComponentsIdWithResponse request returning *DeleteRealmComponentsIdResponse
func (c *ClientWithResponses) DeleteRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmComponentsIdResponse, error) {
	rsp, err := c.DeleteRealmComponentsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmComponentsIdResponse(rsp)
}

// GetRealmComponentsIdWithResponse request returning *GetRealmComponentsIdResponse
func (c *ClientWithResponses) GetRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmComponentsIdResponse, error) {
	rsp, err := c.GetRealmComponentsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmComponentsIdResponse(rsp)
}

// PutRealmComponentsIdWithBodyWithResponse request with arbitrary body returning *PutRealmComponentsIdResponse
func (c *ClientWithResponses) PutRealmComponentsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmComponentsIdResponse, error) {
	rsp, err := c.PutRealmComponentsIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmComponentsIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmComponentsIdResponse, error) {
	rsp, err := c.PutRealmComponentsId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmComponentsIdResponse(rsp)
}

// GetRealmComponentsIdSubComponentTypesWithResponse request returning *GetRealmComponentsIdSubComponentTypesResponse
func (c *ClientWithResponses) GetRealmComponentsIdSubComponentTypesWithResponse(ctx context.Context, realm string, id string, params *GetRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*GetRealmComponentsIdSubComponentTypesResponse, error) {
	rsp, err := c.GetRealmComponentsIdSubComponentTypes(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmComponentsIdSubComponentTypesResponse(rsp)
}

// GetRealmCredentialRegistratorsWithResponse request returning *GetRealmCredentialRegistratorsResponse
func (c *ClientWithResponses) GetRealmCredentialRegistratorsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmCredentialRegistratorsResponse, error) {
	rsp, err := c.GetRealmCredentialRegistrators(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmCredentialRegistratorsResponse(rsp)
}

// GetRealmDefaultDefaultClientScopesWithResponse request returning *GetRealmDefaultDefaultClientScopesResponse
func (c *ClientWithResponses) GetRealmDefaultDefaultClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmDefaultDefaultClientScopesResponse, error) {
	rsp, err := c.GetRealmDefaultDefaultClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmDefaultDefaultClientScopesResponse(rsp)
}

// DeleteRealmDefaultDefaultClientScopesClientScopeIdWithResponse request returning *DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteRealmDefaultDefaultClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp)
}

// PutRealmDefaultDefaultClientScopesClientScopeIdWithResponse request returning *PutRealmDefaultDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutRealmDefaultDefaultClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp)
}

// GetRealmDefaultGroupsWithResponse request returning *GetRealmDefaultGroupsResponse
func (c *ClientWithResponses) GetRealmDefaultGroupsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmDefaultGroupsResponse, error) {
	rsp, err := c.GetRealmDefaultGroups(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmDefaultGroupsResponse(rsp)
}

// DeleteRealmDefaultGroupsGroupIdWithResponse request returning *DeleteRealmDefaultGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteRealmDefaultGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteRealmDefaultGroupsGroupId(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmDefaultGroupsGroupIdResponse(rsp)
}

// PutRealmDefaultGroupsGroupIdWithResponse request returning *PutRealmDefaultGroupsGroupIdResponse
func (c *ClientWithResponses) PutRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*PutRealmDefaultGroupsGroupIdResponse, error) {
	rsp, err := c.PutRealmDefaultGroupsGroupId(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmDefaultGroupsGroupIdResponse(rsp)
}

// GetRealmDefaultOptionalClientScopesWithResponse request returning *GetRealmDefaultOptionalClientScopesResponse
func (c *ClientWithResponses) GetRealmDefaultOptionalClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmDefaultOptionalClientScopesResponse, error) {
	rsp, err := c.GetRealmDefaultOptionalClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmDefaultOptionalClientScopesResponse(rsp)
}

// DeleteRealmDefaultOptionalClientScopesClientScopeIdWithResponse request returning *DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteRealmDefaultOptionalClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp)
}

// PutRealmDefaultOptionalClientScopesClientScopeIdWithResponse request returning *PutRealmDefaultOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutRealmDefaultOptionalClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp)
}

// DeleteRealmEventsWithResponse request returning *DeleteRealmEventsResponse
func (c *ClientWithResponses) DeleteRealmEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteRealmEventsResponse, error) {
	rsp, err := c.DeleteRealmEvents(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmEventsResponse(rsp)
}

// GetRealmEventsWithResponse request returning *GetRealmEventsResponse
func (c *ClientWithResponses) GetRealmEventsWithResponse(ctx context.Context, realm string, params *GetRealmEventsParams, reqEditors ...RequestEditorFn) (*GetRealmEventsResponse, error) {
	rsp, err := c.GetRealmEvents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmEventsResponse(rsp)
}

// GetRealmEventsConfigWithResponse request returning *GetRealmEventsConfigResponse
func (c *ClientWithResponses) GetRealmEventsConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmEventsConfigResponse, error) {
	rsp, err := c.GetRealmEventsConfig(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmEventsConfigResponse(rsp)
}

// PutRealmEventsConfigWithBodyWithResponse request with arbitrary body returning *PutRealmEventsConfigResponse
func (c *ClientWithResponses) PutRealmEventsConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmEventsConfigResponse, error) {
	rsp, err := c.PutRealmEventsConfigWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmEventsConfigResponse(rsp)
}

func (c *ClientWithResponses) PutRealmEventsConfigWithResponse(ctx context.Context, realm string, body PutRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmEventsConfigResponse, error) {
	rsp, err := c.PutRealmEventsConfig(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmEventsConfigResponse(rsp)
}

// GetRealmGroupByPathPathWithResponse request returning *GetRealmGroupByPathPathResponse
func (c *ClientWithResponses) GetRealmGroupByPathPathWithResponse(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*GetRealmGroupByPathPathResponse, error) {
	rsp, err := c.GetRealmGroupByPathPath(ctx, realm, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupByPathPathResponse(rsp)
}

// GetRealmGroupsWithResponse request returning *GetRealmGroupsResponse
func (c *ClientWithResponses) GetRealmGroupsWithResponse(ctx context.Context, realm string, params *GetRealmGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmGroupsResponse, error) {
	rsp, err := c.GetRealmGroups(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsResponse(rsp)
}

// PostRealmGroupsWithBodyWithResponse request with arbitrary body returning *PostRealmGroupsResponse
func (c *ClientWithResponses) PostRealmGroupsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsResponse, error) {
	rsp, err := c.PostRealmGroupsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostRealmGroupsWithResponse(ctx context.Context, realm string, body PostRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsResponse, error) {
	rsp, err := c.PostRealmGroups(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsResponse(rsp)
}

// GetRealmGroupsCountWithResponse request returning *GetRealmGroupsCountResponse
func (c *ClientWithResponses) GetRealmGroupsCountWithResponse(ctx context.Context, realm string, params *GetRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*GetRealmGroupsCountResponse, error) {
	rsp, err := c.GetRealmGroupsCount(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsCountResponse(rsp)
}

// DeleteRealmGroupsIdWithResponse request returning *DeleteRealmGroupsIdResponse
func (c *ClientWithResponses) DeleteRealmGroupsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdResponse, error) {
	rsp, err := c.DeleteRealmGroupsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmGroupsIdResponse(rsp)
}

// GetRealmGroupsIdWithResponse request returning *GetRealmGroupsIdResponse
func (c *ClientWithResponses) GetRealmGroupsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdResponse, error) {
	rsp, err := c.GetRealmGroupsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdResponse(rsp)
}

// PutRealmGroupsIdWithBodyWithResponse request with arbitrary body returning *PutRealmGroupsIdResponse
func (c *ClientWithResponses) PutRealmGroupsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdResponse, error) {
	rsp, err := c.PutRealmGroupsIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmGroupsIdWithResponse(ctx context.Context, realm string, id string, body PutRealmGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdResponse, error) {
	rsp, err := c.PutRealmGroupsId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmGroupsIdResponse(rsp)
}

// PostRealmGroupsIdChildrenWithBodyWithResponse request with arbitrary body returning *PostRealmGroupsIdChildrenResponse
func (c *ClientWithResponses) PostRealmGroupsIdChildrenWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdChildrenResponse, error) {
	rsp, err := c.PostRealmGroupsIdChildrenWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsIdChildrenResponse(rsp)
}

func (c *ClientWithResponses) PostRealmGroupsIdChildrenWithResponse(ctx context.Context, realm string, id string, body PostRealmGroupsIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdChildrenResponse, error) {
	rsp, err := c.PostRealmGroupsIdChildren(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsIdChildrenResponse(rsp)
}

// GetRealmGroupsIdManagementPermissionsWithResponse request returning *GetRealmGroupsIdManagementPermissionsResponse
func (c *ClientWithResponses) GetRealmGroupsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdManagementPermissionsResponse, error) {
	rsp, err := c.GetRealmGroupsIdManagementPermissions(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdManagementPermissionsResponse(rsp)
}

// PutRealmGroupsIdManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRealmGroupsIdManagementPermissionsResponse
func (c *ClientWithResponses) PutRealmGroupsIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmGroupsIdManagementPermissionsWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmGroupsIdManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmGroupsIdManagementPermissionsWithResponse(ctx context.Context, realm string, id string, body PutRealmGroupsIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmGroupsIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmGroupsIdManagementPermissions(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmGroupsIdManagementPermissionsResponse(rsp)
}

// GetRealmGroupsIdMembersWithResponse request returning *GetRealmGroupsIdMembersResponse
func (c *ClientWithResponses) GetRealmGroupsIdMembersWithResponse(ctx context.Context, realm string, id string, params *GetRealmGroupsIdMembersParams, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdMembersResponse, error) {
	rsp, err := c.GetRealmGroupsIdMembers(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdMembersResponse(rsp)
}

// GetRealmGroupsIdRoleMappingsWithResponse request returning *GetRealmGroupsIdRoleMappingsResponse
func (c *ClientWithResponses) GetRealmGroupsIdRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsResponse, error) {
	rsp, err := c.GetRealmGroupsIdRoleMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdRoleMappingsResponse(rsp)
}

// DeleteRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *DeleteRealmGroupsIdRoleMappingsClientsClientResponse
func (c *ClientWithResponses) DeleteRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmGroupsIdRoleMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmGroupsIdRoleMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmGroupsIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmGroupsIdRoleMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmGroupsIdRoleMappingsClientsClientResponse(rsp)
}

// GetRealmGroupsIdRoleMappingsClientsClientWithResponse request returning *GetRealmGroupsIdRoleMappingsClientsClientResponse
func (c *ClientWithResponses) GetRealmGroupsIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.GetRealmGroupsIdRoleMappingsClientsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdRoleMappingsClientsClientResponse(rsp)
}

// PostRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *PostRealmGroupsIdRoleMappingsClientsClientResponse
func (c *ClientWithResponses) PostRealmGroupsIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmGroupsIdRoleMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsIdRoleMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) PostRealmGroupsIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmGroupsIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmGroupsIdRoleMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsIdRoleMappingsClientsClientResponse(rsp)
}

// GetRealmGroupsIdRoleMappingsClientsClientAvailableWithResponse request returning *GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse
func (c *ClientWithResponses) GetRealmGroupsIdRoleMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse, error) {
	rsp, err := c.GetRealmGroupsIdRoleMappingsClientsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdRoleMappingsClientsClientAvailableResponse(rsp)
}

// GetRealmGroupsIdRoleMappingsClientsClientCompositeWithResponse request returning *GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse
func (c *ClientWithResponses) GetRealmGroupsIdRoleMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse, error) {
	rsp, err := c.GetRealmGroupsIdRoleMappingsClientsClientComposite(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdRoleMappingsClientsClientCompositeResponse(rsp)
}

// DeleteRealmGroupsIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteRealmGroupsIdRoleMappingsRealmResponse
func (c *ClientWithResponses) DeleteRealmGroupsIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmGroupsIdRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmGroupsIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmGroupsIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmGroupsIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmGroupsIdRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmGroupsIdRoleMappingsRealmResponse(rsp)
}

// GetRealmGroupsIdRoleMappingsRealmWithResponse request returning *GetRealmGroupsIdRoleMappingsRealmResponse
func (c *ClientWithResponses) GetRealmGroupsIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsRealmResponse, error) {
	rsp, err := c.GetRealmGroupsIdRoleMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdRoleMappingsRealmResponse(rsp)
}

// PostRealmGroupsIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostRealmGroupsIdRoleMappingsRealmResponse
func (c *ClientWithResponses) PostRealmGroupsIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostRealmGroupsIdRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostRealmGroupsIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmGroupsIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmGroupsIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostRealmGroupsIdRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmGroupsIdRoleMappingsRealmResponse(rsp)
}

// GetRealmGroupsIdRoleMappingsRealmAvailableWithResponse request returning *GetRealmGroupsIdRoleMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetRealmGroupsIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetRealmGroupsIdRoleMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdRoleMappingsRealmAvailableResponse(rsp)
}

// GetRealmGroupsIdRoleMappingsRealmCompositeWithResponse request returning *GetRealmGroupsIdRoleMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetRealmGroupsIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmGroupsIdRoleMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetRealmGroupsIdRoleMappingsRealmComposite(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmGroupsIdRoleMappingsRealmCompositeResponse(rsp)
}

// PostRealmIdentityProviderImportConfigWithResponse request returning *PostRealmIdentityProviderImportConfigResponse
func (c *ClientWithResponses) PostRealmIdentityProviderImportConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderImportConfigResponse, error) {
	rsp, err := c.PostRealmIdentityProviderImportConfig(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmIdentityProviderImportConfigResponse(rsp)
}

// GetRealmIdentityProviderInstancesWithResponse request returning *GetRealmIdentityProviderInstancesResponse
func (c *ClientWithResponses) GetRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesResponse, error) {
	rsp, err := c.GetRealmIdentityProviderInstances(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderInstancesResponse(rsp)
}

// PostRealmIdentityProviderInstancesWithBodyWithResponse request with arbitrary body returning *PostRealmIdentityProviderInstancesResponse
func (c *ClientWithResponses) PostRealmIdentityProviderInstancesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesResponse, error) {
	rsp, err := c.PostRealmIdentityProviderInstancesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmIdentityProviderInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, body PostRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesResponse, error) {
	rsp, err := c.PostRealmIdentityProviderInstances(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmIdentityProviderInstancesResponse(rsp)
}

// DeleteRealmIdentityProviderInstancesAliasWithResponse request returning *DeleteRealmIdentityProviderInstancesAliasResponse
func (c *ClientWithResponses) DeleteRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.DeleteRealmIdentityProviderInstancesAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmIdentityProviderInstancesAliasResponse(rsp)
}

// GetRealmIdentityProviderInstancesAliasWithResponse request returning *GetRealmIdentityProviderInstancesAliasResponse
func (c *ClientWithResponses) GetRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.GetRealmIdentityProviderInstancesAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderInstancesAliasResponse(rsp)
}

// PutRealmIdentityProviderInstancesAliasWithBodyWithResponse request with arbitrary body returning *PutRealmIdentityProviderInstancesAliasResponse
func (c *ClientWithResponses) PutRealmIdentityProviderInstancesAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.PutRealmIdentityProviderInstancesAliasWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmIdentityProviderInstancesAliasResponse(rsp)
}

func (c *ClientWithResponses) PutRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.PutRealmIdentityProviderInstancesAlias(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmIdentityProviderInstancesAliasResponse(rsp)
}

// GetRealmIdentityProviderInstancesAliasExportWithResponse request returning *GetRealmIdentityProviderInstancesAliasExportResponse
func (c *ClientWithResponses) GetRealmIdentityProviderInstancesAliasExportWithResponse(ctx context.Context, realm string, alias string, params *GetRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasExportResponse, error) {
	rsp, err := c.GetRealmIdentityProviderInstancesAliasExport(ctx, realm, alias, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderInstancesAliasExportResponse(rsp)
}

// GetRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse request returning *GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse
func (c *ClientWithResponses) GetRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	rsp, err := c.GetRealmIdentityProviderInstancesAliasManagementPermissions(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp)
}

// PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse
func (c *ClientWithResponses) PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmIdentityProviderInstancesAliasManagementPermissionsWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, body PutRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmIdentityProviderInstancesAliasManagementPermissions(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp)
}

// GetRealmIdentityProviderInstancesAliasMapperTypesWithResponse request returning *GetRealmIdentityProviderInstancesAliasMapperTypesResponse
func (c *ClientWithResponses) GetRealmIdentityProviderInstancesAliasMapperTypesWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasMapperTypesResponse, error) {
	rsp, err := c.GetRealmIdentityProviderInstancesAliasMapperTypes(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderInstancesAliasMapperTypesResponse(rsp)
}

// GetRealmIdentityProviderInstancesAliasMappersWithResponse request returning *GetRealmIdentityProviderInstancesAliasMappersResponse
func (c *ClientWithResponses) GetRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasMappersResponse, error) {
	rsp, err := c.GetRealmIdentityProviderInstancesAliasMappers(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderInstancesAliasMappersResponse(rsp)
}

// PostRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse request with arbitrary body returning *PostRealmIdentityProviderInstancesAliasMappersResponse
func (c *ClientWithResponses) PostRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesAliasMappersResponse, error) {
	rsp, err := c.PostRealmIdentityProviderInstancesAliasMappersWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmIdentityProviderInstancesAliasMappersResponse(rsp)
}

func (c *ClientWithResponses) PostRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, body PostRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmIdentityProviderInstancesAliasMappersResponse, error) {
	rsp, err := c.PostRealmIdentityProviderInstancesAliasMappers(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmIdentityProviderInstancesAliasMappersResponse(rsp)
}

// DeleteRealmIdentityProviderInstancesAliasMappersIdWithResponse request returning *DeleteRealmIdentityProviderInstancesAliasMappersIdResponse
func (c *ClientWithResponses) DeleteRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.DeleteRealmIdentityProviderInstancesAliasMappersId(ctx, realm, alias, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

// GetRealmIdentityProviderInstancesAliasMappersIdWithResponse request returning *GetRealmIdentityProviderInstancesAliasMappersIdResponse
func (c *ClientWithResponses) GetRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.GetRealmIdentityProviderInstancesAliasMappersId(ctx, realm, alias, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

// PutRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse request with arbitrary body returning *PutRealmIdentityProviderInstancesAliasMappersIdResponse
func (c *ClientWithResponses) PutRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.PutRealmIdentityProviderInstancesAliasMappersIdWithBody(ctx, realm, alias, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, body PutRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.PutRealmIdentityProviderInstancesAliasMappersId(ctx, realm, alias, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

// GetRealmIdentityProviderProvidersProviderIdWithResponse request returning *GetRealmIdentityProviderProvidersProviderIdResponse
func (c *ClientWithResponses) GetRealmIdentityProviderProvidersProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetRealmIdentityProviderProvidersProviderIdResponse, error) {
	rsp, err := c.GetRealmIdentityProviderProvidersProviderId(ctx, realm, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmIdentityProviderProvidersProviderIdResponse(rsp)
}

// GetRealmKeysWithResponse request returning *GetRealmKeysResponse
func (c *ClientWithResponses) GetRealmKeysWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmKeysResponse, error) {
	rsp, err := c.GetRealmKeys(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmKeysResponse(rsp)
}

// PostRealmLogoutAllWithResponse request returning *PostRealmLogoutAllResponse
func (c *ClientWithResponses) PostRealmLogoutAllWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmLogoutAllResponse, error) {
	rsp, err := c.PostRealmLogoutAll(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmLogoutAllResponse(rsp)
}

// PostRealmPartialExportWithResponse request returning *PostRealmPartialExportResponse
func (c *ClientWithResponses) PostRealmPartialExportWithResponse(ctx context.Context, realm string, params *PostRealmPartialExportParams, reqEditors ...RequestEditorFn) (*PostRealmPartialExportResponse, error) {
	rsp, err := c.PostRealmPartialExport(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmPartialExportResponse(rsp)
}

// PostRealmPartialImportWithBodyWithResponse request with arbitrary body returning *PostRealmPartialImportResponse
func (c *ClientWithResponses) PostRealmPartialImportWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmPartialImportResponse, error) {
	rsp, err := c.PostRealmPartialImportWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmPartialImportResponse(rsp)
}

func (c *ClientWithResponses) PostRealmPartialImportWithResponse(ctx context.Context, realm string, body PostRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmPartialImportResponse, error) {
	rsp, err := c.PostRealmPartialImport(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmPartialImportResponse(rsp)
}

// PostRealmPushRevocationWithResponse request returning *PostRealmPushRevocationResponse
func (c *ClientWithResponses) PostRealmPushRevocationWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostRealmPushRevocationResponse, error) {
	rsp, err := c.PostRealmPushRevocation(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmPushRevocationResponse(rsp)
}

// GetRealmRolesWithResponse request returning *GetRealmRolesResponse
func (c *ClientWithResponses) GetRealmRolesWithResponse(ctx context.Context, realm string, params *GetRealmRolesParams, reqEditors ...RequestEditorFn) (*GetRealmRolesResponse, error) {
	rsp, err := c.GetRealmRoles(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesResponse(rsp)
}

// PostRealmRolesWithBodyWithResponse request with arbitrary body returning *PostRealmRolesResponse
func (c *ClientWithResponses) PostRealmRolesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmRolesResponse, error) {
	rsp, err := c.PostRealmRolesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmRolesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmRolesWithResponse(ctx context.Context, realm string, body PostRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmRolesResponse, error) {
	rsp, err := c.PostRealmRoles(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmRolesResponse(rsp)
}

// DeleteRealmRolesByIdRoleIdWithResponse request returning *DeleteRealmRolesByIdRoleIdResponse
func (c *ClientWithResponses) DeleteRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*DeleteRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.DeleteRealmRolesByIdRoleId(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmRolesByIdRoleIdResponse(rsp)
}

// GetRealmRolesByIdRoleIdWithResponse request returning *GetRealmRolesByIdRoleIdResponse
func (c *ClientWithResponses) GetRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.GetRealmRolesByIdRoleId(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesByIdRoleIdResponse(rsp)
}

// PutRealmRolesByIdRoleIdWithBodyWithResponse request with arbitrary body returning *PutRealmRolesByIdRoleIdResponse
func (c *ClientWithResponses) PutRealmRolesByIdRoleIdWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.PutRealmRolesByIdRoleIdWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesByIdRoleIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.PutRealmRolesByIdRoleId(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesByIdRoleIdResponse(rsp)
}

// DeleteRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with arbitrary body returning *DeleteRealmRolesByIdRoleIdCompositesResponse
func (c *ClientWithResponses) DeleteRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.DeleteRealmRolesByIdRoleIdCompositesWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmRolesByIdRoleIdCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body DeleteRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.DeleteRealmRolesByIdRoleIdComposites(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmRolesByIdRoleIdCompositesResponse(rsp)
}

// GetRealmRolesByIdRoleIdCompositesWithResponse request returning *GetRealmRolesByIdRoleIdCompositesResponse
func (c *ClientWithResponses) GetRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.GetRealmRolesByIdRoleIdComposites(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesByIdRoleIdCompositesResponse(rsp)
}

// PostRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with arbitrary body returning *PostRealmRolesByIdRoleIdCompositesResponse
func (c *ClientWithResponses) PostRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.PostRealmRolesByIdRoleIdCompositesWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmRolesByIdRoleIdCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body PostRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.PostRealmRolesByIdRoleIdComposites(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmRolesByIdRoleIdCompositesResponse(rsp)
}

// GetRealmRolesByIdRoleIdCompositesClientsClientWithResponse request returning *GetRealmRolesByIdRoleIdCompositesClientsClientResponse
func (c *ClientWithResponses) GetRealmRolesByIdRoleIdCompositesClientsClientWithResponse(ctx context.Context, realm string, roleId string, client string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdCompositesClientsClientResponse, error) {
	rsp, err := c.GetRealmRolesByIdRoleIdCompositesClientsClient(ctx, realm, roleId, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesByIdRoleIdCompositesClientsClientResponse(rsp)
}

// GetRealmRolesByIdRoleIdCompositesRealmWithResponse request returning *GetRealmRolesByIdRoleIdCompositesRealmResponse
func (c *ClientWithResponses) GetRealmRolesByIdRoleIdCompositesRealmWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdCompositesRealmResponse, error) {
	rsp, err := c.GetRealmRolesByIdRoleIdCompositesRealm(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesByIdRoleIdCompositesRealmResponse(rsp)
}

// GetRealmRolesByIdRoleIdManagementPermissionsWithResponse request returning *GetRealmRolesByIdRoleIdManagementPermissionsResponse
func (c *ClientWithResponses) GetRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	rsp, err := c.GetRealmRolesByIdRoleIdManagementPermissions(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesByIdRoleIdManagementPermissionsResponse(rsp)
}

// PutRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRealmRolesByIdRoleIdManagementPermissionsResponse
func (c *ClientWithResponses) PutRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmRolesByIdRoleIdManagementPermissionsWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesByIdRoleIdManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, body PutRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmRolesByIdRoleIdManagementPermissions(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesByIdRoleIdManagementPermissionsResponse(rsp)
}

// DeleteRealmRolesRoleNameWithResponse request returning *DeleteRealmRolesRoleNameResponse
func (c *ClientWithResponses) DeleteRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*DeleteRealmRolesRoleNameResponse, error) {
	rsp, err := c.DeleteRealmRolesRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmRolesRoleNameResponse(rsp)
}

// GetRealmRolesRoleNameWithResponse request returning *GetRealmRolesRoleNameResponse
func (c *ClientWithResponses) GetRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameResponse, error) {
	rsp, err := c.GetRealmRolesRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesRoleNameResponse(rsp)
}

// PutRealmRolesRoleNameWithBodyWithResponse request with arbitrary body returning *PutRealmRolesRoleNameResponse
func (c *ClientWithResponses) PutRealmRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameResponse, error) {
	rsp, err := c.PutRealmRolesRoleNameWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PutRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameResponse, error) {
	rsp, err := c.PutRealmRolesRoleName(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesRoleNameResponse(rsp)
}

// DeleteRealmRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *DeleteRealmRolesRoleNameCompositesResponse
func (c *ClientWithResponses) DeleteRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteRealmRolesRoleNameCompositesWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body DeleteRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteRealmRolesRoleNameComposites(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmRolesRoleNameCompositesResponse(rsp)
}

// GetRealmRolesRoleNameCompositesWithResponse request returning *GetRealmRolesRoleNameCompositesResponse
func (c *ClientWithResponses) GetRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.GetRealmRolesRoleNameComposites(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesRoleNameCompositesResponse(rsp)
}

// PostRealmRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *PostRealmRolesRoleNameCompositesResponse
func (c *ClientWithResponses) PostRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostRealmRolesRoleNameCompositesWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body PostRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostRealmRolesRoleNameComposites(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmRolesRoleNameCompositesResponse(rsp)
}

// GetRealmRolesRoleNameCompositesClientsClientWithResponse request returning *GetRealmRolesRoleNameCompositesClientsClientResponse
func (c *ClientWithResponses) GetRealmRolesRoleNameCompositesClientsClientWithResponse(ctx context.Context, realm string, roleName string, client string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameCompositesClientsClientResponse, error) {
	rsp, err := c.GetRealmRolesRoleNameCompositesClientsClient(ctx, realm, roleName, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesRoleNameCompositesClientsClientResponse(rsp)
}

// GetRealmRolesRoleNameCompositesRealmWithResponse request returning *GetRealmRolesRoleNameCompositesRealmResponse
func (c *ClientWithResponses) GetRealmRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameCompositesRealmResponse, error) {
	rsp, err := c.GetRealmRolesRoleNameCompositesRealm(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesRoleNameCompositesRealmResponse(rsp)
}

// GetRealmRolesRoleNameGroupsWithResponse request returning *GetRealmRolesRoleNameGroupsResponse
func (c *ClientWithResponses) GetRealmRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameGroupsResponse, error) {
	rsp, err := c.GetRealmRolesRoleNameGroups(ctx, realm, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesRoleNameGroupsResponse(rsp)
}

// GetRealmRolesRoleNameManagementPermissionsWithResponse request returning *GetRealmRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) GetRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.GetRealmRolesRoleNameManagementPermissions(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesRoleNameManagementPermissionsResponse(rsp)
}

// PutRealmRolesRoleNameManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRealmRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) PutRealmRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmRolesRoleNameManagementPermissionsWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesRoleNameManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, body PutRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmRolesRoleNameManagementPermissions(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmRolesRoleNameManagementPermissionsResponse(rsp)
}

// GetRealmRolesRoleNameUsersWithResponse request returning *GetRealmRolesRoleNameUsersResponse
func (c *ClientWithResponses) GetRealmRolesRoleNameUsersWithResponse(ctx context.Context, realm string, roleName string, params *GetRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetRealmRolesRoleNameUsersResponse, error) {
	rsp, err := c.GetRealmRolesRoleNameUsers(ctx, realm, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmRolesRoleNameUsersResponse(rsp)
}

// DeleteRealmSessionsSessionWithResponse request returning *DeleteRealmSessionsSessionResponse
func (c *ClientWithResponses) DeleteRealmSessionsSessionWithResponse(ctx context.Context, realm string, session string, reqEditors ...RequestEditorFn) (*DeleteRealmSessionsSessionResponse, error) {
	rsp, err := c.DeleteRealmSessionsSession(ctx, realm, session, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmSessionsSessionResponse(rsp)
}

// PostRealmTestLDAPConnectionWithBodyWithResponse request with arbitrary body returning *PostRealmTestLDAPConnectionResponse
func (c *ClientWithResponses) PostRealmTestLDAPConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmTestLDAPConnectionResponse, error) {
	rsp, err := c.PostRealmTestLDAPConnectionWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmTestLDAPConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostRealmTestLDAPConnectionWithResponse(ctx context.Context, realm string, body PostRealmTestLDAPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmTestLDAPConnectionResponse, error) {
	rsp, err := c.PostRealmTestLDAPConnection(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmTestLDAPConnectionResponse(rsp)
}

// PostRealmTestSMTPConnectionWithBodyWithResponse request with arbitrary body returning *PostRealmTestSMTPConnectionResponse
func (c *ClientWithResponses) PostRealmTestSMTPConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmTestSMTPConnectionResponse, error) {
	rsp, err := c.PostRealmTestSMTPConnectionWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmTestSMTPConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostRealmTestSMTPConnectionWithResponse(ctx context.Context, realm string, body PostRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmTestSMTPConnectionResponse, error) {
	rsp, err := c.PostRealmTestSMTPConnection(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmTestSMTPConnectionResponse(rsp)
}

// GetRealmUserStorageIdNameWithResponse request returning *GetRealmUserStorageIdNameResponse
func (c *ClientWithResponses) GetRealmUserStorageIdNameWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUserStorageIdNameResponse, error) {
	rsp, err := c.GetRealmUserStorageIdName(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUserStorageIdNameResponse(rsp)
}

// PostRealmUserStorageIdRemoveImportedUsersWithResponse request returning *PostRealmUserStorageIdRemoveImportedUsersResponse
func (c *ClientWithResponses) PostRealmUserStorageIdRemoveImportedUsersWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUserStorageIdRemoveImportedUsersResponse, error) {
	rsp, err := c.PostRealmUserStorageIdRemoveImportedUsers(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUserStorageIdRemoveImportedUsersResponse(rsp)
}

// PostRealmUserStorageIdSyncWithResponse request returning *PostRealmUserStorageIdSyncResponse
func (c *ClientWithResponses) PostRealmUserStorageIdSyncWithResponse(ctx context.Context, realm string, id string, params *PostRealmUserStorageIdSyncParams, reqEditors ...RequestEditorFn) (*PostRealmUserStorageIdSyncResponse, error) {
	rsp, err := c.PostRealmUserStorageIdSync(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUserStorageIdSyncResponse(rsp)
}

// PostRealmUserStorageIdUnlinkUsersWithResponse request returning *PostRealmUserStorageIdUnlinkUsersResponse
func (c *ClientWithResponses) PostRealmUserStorageIdUnlinkUsersWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUserStorageIdUnlinkUsersResponse, error) {
	rsp, err := c.PostRealmUserStorageIdUnlinkUsers(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUserStorageIdUnlinkUsersResponse(rsp)
}

// PostRealmUserStorageParentIdMappersIdSyncWithResponse request returning *PostRealmUserStorageParentIdMappersIdSyncResponse
func (c *ClientWithResponses) PostRealmUserStorageParentIdMappersIdSyncWithResponse(ctx context.Context, realm string, parentId string, id string, params *PostRealmUserStorageParentIdMappersIdSyncParams, reqEditors ...RequestEditorFn) (*PostRealmUserStorageParentIdMappersIdSyncResponse, error) {
	rsp, err := c.PostRealmUserStorageParentIdMappersIdSync(ctx, realm, parentId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUserStorageParentIdMappersIdSyncResponse(rsp)
}

// GetRealmUsersWithResponse request returning *GetRealmUsersResponse
func (c *ClientWithResponses) GetRealmUsersWithResponse(ctx context.Context, realm string, params *GetRealmUsersParams, reqEditors ...RequestEditorFn) (*GetRealmUsersResponse, error) {
	rsp, err := c.GetRealmUsers(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersResponse(rsp)
}

// PostRealmUsersWithBodyWithResponse request with arbitrary body returning *PostRealmUsersResponse
func (c *ClientWithResponses) PostRealmUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersResponse, error) {
	rsp, err := c.PostRealmUsersWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersResponse(rsp)
}

func (c *ClientWithResponses) PostRealmUsersWithResponse(ctx context.Context, realm string, body PostRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersResponse, error) {
	rsp, err := c.PostRealmUsers(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersResponse(rsp)
}

// GetRealmUsersManagementPermissionsWithResponse request returning *GetRealmUsersManagementPermissionsResponse
func (c *ClientWithResponses) GetRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetRealmUsersManagementPermissionsResponse, error) {
	rsp, err := c.GetRealmUsersManagementPermissions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersManagementPermissionsResponse(rsp)
}

// PutRealmUsersManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutRealmUsersManagementPermissionsResponse
func (c *ClientWithResponses) PutRealmUsersManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmUsersManagementPermissionsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, body PutRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersManagementPermissionsResponse, error) {
	rsp, err := c.PutRealmUsersManagementPermissions(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersManagementPermissionsResponse(rsp)
}

// GetRealmUsersCountWithResponse request returning *GetRealmUsersCountResponse
func (c *ClientWithResponses) GetRealmUsersCountWithResponse(ctx context.Context, realm string, params *GetRealmUsersCountParams, reqEditors ...RequestEditorFn) (*GetRealmUsersCountResponse, error) {
	rsp, err := c.GetRealmUsersCount(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersCountResponse(rsp)
}

// DeleteRealmUsersIdWithResponse request returning *DeleteRealmUsersIdResponse
func (c *ClientWithResponses) DeleteRealmUsersIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdResponse, error) {
	rsp, err := c.DeleteRealmUsersId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdResponse(rsp)
}

// GetRealmUsersIdWithResponse request returning *GetRealmUsersIdResponse
func (c *ClientWithResponses) GetRealmUsersIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdResponse, error) {
	rsp, err := c.GetRealmUsersId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdResponse(rsp)
}

// PutRealmUsersIdWithBodyWithResponse request with arbitrary body returning *PutRealmUsersIdResponse
func (c *ClientWithResponses) PutRealmUsersIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResponse, error) {
	rsp, err := c.PutRealmUsersIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutRealmUsersIdWithResponse(ctx context.Context, realm string, id string, body PutRealmUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResponse, error) {
	rsp, err := c.PutRealmUsersId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdResponse(rsp)
}

// GetRealmUsersIdConfiguredUserStorageCredentialTypesWithResponse request returning *GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse
func (c *ClientWithResponses) GetRealmUsersIdConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse, error) {
	rsp, err := c.GetRealmUsersIdConfiguredUserStorageCredentialTypes(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdConfiguredUserStorageCredentialTypesResponse(rsp)
}

// GetRealmUsersIdConsentsWithResponse request returning *GetRealmUsersIdConsentsResponse
func (c *ClientWithResponses) GetRealmUsersIdConsentsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdConsentsResponse, error) {
	rsp, err := c.GetRealmUsersIdConsents(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdConsentsResponse(rsp)
}

// DeleteRealmUsersIdConsentsClientWithResponse request returning *DeleteRealmUsersIdConsentsClientResponse
func (c *ClientWithResponses) DeleteRealmUsersIdConsentsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdConsentsClientResponse, error) {
	rsp, err := c.DeleteRealmUsersIdConsentsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdConsentsClientResponse(rsp)
}

// GetRealmUsersIdCredentialsWithResponse request returning *GetRealmUsersIdCredentialsResponse
func (c *ClientWithResponses) GetRealmUsersIdCredentialsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdCredentialsResponse, error) {
	rsp, err := c.GetRealmUsersIdCredentials(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdCredentialsResponse(rsp)
}

// DeleteRealmUsersIdCredentialsCredentialIdWithResponse request returning *DeleteRealmUsersIdCredentialsCredentialIdResponse
func (c *ClientWithResponses) DeleteRealmUsersIdCredentialsCredentialIdWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdCredentialsCredentialIdResponse, error) {
	rsp, err := c.DeleteRealmUsersIdCredentialsCredentialId(ctx, realm, id, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdCredentialsCredentialIdResponse(rsp)
}

// PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse request returning *PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse
func (c *ClientWithResponses) PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse(ctx context.Context, realm string, id string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error) {
	rsp, err := c.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx, realm, id, credentialId, newPreviousCredentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse(rsp)
}

// PostRealmUsersIdCredentialsCredentialIdMoveToFirstWithResponse request returning *PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse
func (c *ClientWithResponses) PostRealmUsersIdCredentialsCredentialIdMoveToFirstWithResponse(ctx context.Context, realm string, id string, credentialId string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse, error) {
	rsp, err := c.PostRealmUsersIdCredentialsCredentialIdMoveToFirst(ctx, realm, id, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse(rsp)
}

// PutRealmUsersIdCredentialsCredentialIdUserLabelWithBodyWithResponse request with arbitrary body returning *PutRealmUsersIdCredentialsCredentialIdUserLabelResponse
func (c *ClientWithResponses) PutRealmUsersIdCredentialsCredentialIdUserLabelWithBodyWithResponse(ctx context.Context, realm string, id string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdCredentialsCredentialIdUserLabelResponse, error) {
	rsp, err := c.PutRealmUsersIdCredentialsCredentialIdUserLabelWithBody(ctx, realm, id, credentialId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdCredentialsCredentialIdUserLabelResponse(rsp)
}

func (c *ClientWithResponses) PutRealmUsersIdCredentialsCredentialIdUserLabelWithTextBodyWithResponse(ctx context.Context, realm string, id string, credentialId string, body PutRealmUsersIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdCredentialsCredentialIdUserLabelResponse, error) {
	rsp, err := c.PutRealmUsersIdCredentialsCredentialIdUserLabelWithTextBody(ctx, realm, id, credentialId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdCredentialsCredentialIdUserLabelResponse(rsp)
}

// PutRealmUsersIdDisableCredentialTypesWithBodyWithResponse request with arbitrary body returning *PutRealmUsersIdDisableCredentialTypesResponse
func (c *ClientWithResponses) PutRealmUsersIdDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdDisableCredentialTypesResponse, error) {
	rsp, err := c.PutRealmUsersIdDisableCredentialTypesWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdDisableCredentialTypesResponse(rsp)
}

func (c *ClientWithResponses) PutRealmUsersIdDisableCredentialTypesWithResponse(ctx context.Context, realm string, id string, body PutRealmUsersIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdDisableCredentialTypesResponse, error) {
	rsp, err := c.PutRealmUsersIdDisableCredentialTypes(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdDisableCredentialTypesResponse(rsp)
}

// PutRealmUsersIdExecuteActionsEmailWithBodyWithResponse request with arbitrary body returning *PutRealmUsersIdExecuteActionsEmailResponse
func (c *ClientWithResponses) PutRealmUsersIdExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdExecuteActionsEmailResponse, error) {
	rsp, err := c.PutRealmUsersIdExecuteActionsEmailWithBody(ctx, realm, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdExecuteActionsEmailResponse(rsp)
}

func (c *ClientWithResponses) PutRealmUsersIdExecuteActionsEmailWithResponse(ctx context.Context, realm string, id string, params *PutRealmUsersIdExecuteActionsEmailParams, body PutRealmUsersIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdExecuteActionsEmailResponse, error) {
	rsp, err := c.PutRealmUsersIdExecuteActionsEmail(ctx, realm, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdExecuteActionsEmailResponse(rsp)
}

// GetRealmUsersIdFederatedIdentityWithResponse request returning *GetRealmUsersIdFederatedIdentityResponse
func (c *ClientWithResponses) GetRealmUsersIdFederatedIdentityWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdFederatedIdentityResponse, error) {
	rsp, err := c.GetRealmUsersIdFederatedIdentity(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdFederatedIdentityResponse(rsp)
}

// DeleteRealmUsersIdFederatedIdentityProviderWithResponse request returning *DeleteRealmUsersIdFederatedIdentityProviderResponse
func (c *ClientWithResponses) DeleteRealmUsersIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, id string, provider string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdFederatedIdentityProviderResponse, error) {
	rsp, err := c.DeleteRealmUsersIdFederatedIdentityProvider(ctx, realm, id, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdFederatedIdentityProviderResponse(rsp)
}

// PostRealmUsersIdFederatedIdentityProviderWithBodyWithResponse request with arbitrary body returning *PostRealmUsersIdFederatedIdentityProviderResponse
func (c *ClientWithResponses) PostRealmUsersIdFederatedIdentityProviderWithBodyWithResponse(ctx context.Context, realm string, id string, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersIdFederatedIdentityProviderResponse, error) {
	rsp, err := c.PostRealmUsersIdFederatedIdentityProviderWithBody(ctx, realm, id, provider, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdFederatedIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) PostRealmUsersIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, id string, provider string, body PostRealmUsersIdFederatedIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersIdFederatedIdentityProviderResponse, error) {
	rsp, err := c.PostRealmUsersIdFederatedIdentityProvider(ctx, realm, id, provider, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdFederatedIdentityProviderResponse(rsp)
}

// GetRealmUsersIdGroupsWithResponse request returning *GetRealmUsersIdGroupsResponse
func (c *ClientWithResponses) GetRealmUsersIdGroupsWithResponse(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsParams, reqEditors ...RequestEditorFn) (*GetRealmUsersIdGroupsResponse, error) {
	rsp, err := c.GetRealmUsersIdGroups(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdGroupsResponse(rsp)
}

// GetRealmUsersIdGroupsCountWithResponse request returning *GetRealmUsersIdGroupsCountResponse
func (c *ClientWithResponses) GetRealmUsersIdGroupsCountWithResponse(ctx context.Context, realm string, id string, params *GetRealmUsersIdGroupsCountParams, reqEditors ...RequestEditorFn) (*GetRealmUsersIdGroupsCountResponse, error) {
	rsp, err := c.GetRealmUsersIdGroupsCount(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdGroupsCountResponse(rsp)
}

// DeleteRealmUsersIdGroupsGroupIdWithResponse request returning *DeleteRealmUsersIdGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteRealmUsersIdGroupsGroupIdWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteRealmUsersIdGroupsGroupId(ctx, realm, id, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdGroupsGroupIdResponse(rsp)
}

// PutRealmUsersIdGroupsGroupIdWithResponse request returning *PutRealmUsersIdGroupsGroupIdResponse
func (c *ClientWithResponses) PutRealmUsersIdGroupsGroupIdWithResponse(ctx context.Context, realm string, id string, groupId string, reqEditors ...RequestEditorFn) (*PutRealmUsersIdGroupsGroupIdResponse, error) {
	rsp, err := c.PutRealmUsersIdGroupsGroupId(ctx, realm, id, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdGroupsGroupIdResponse(rsp)
}

// PostRealmUsersIdImpersonationWithResponse request returning *PostRealmUsersIdImpersonationResponse
func (c *ClientWithResponses) PostRealmUsersIdImpersonationWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdImpersonationResponse, error) {
	rsp, err := c.PostRealmUsersIdImpersonation(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdImpersonationResponse(rsp)
}

// PostRealmUsersIdLogoutWithResponse request returning *PostRealmUsersIdLogoutResponse
func (c *ClientWithResponses) PostRealmUsersIdLogoutWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*PostRealmUsersIdLogoutResponse, error) {
	rsp, err := c.PostRealmUsersIdLogout(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdLogoutResponse(rsp)
}

// GetRealmUsersIdOfflineSessionsClientIdWithResponse request returning *GetRealmUsersIdOfflineSessionsClientIdResponse
func (c *ClientWithResponses) GetRealmUsersIdOfflineSessionsClientIdWithResponse(ctx context.Context, realm string, id string, clientId string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdOfflineSessionsClientIdResponse, error) {
	rsp, err := c.GetRealmUsersIdOfflineSessionsClientId(ctx, realm, id, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdOfflineSessionsClientIdResponse(rsp)
}

// PutRealmUsersIdResetPasswordWithBodyWithResponse request with arbitrary body returning *PutRealmUsersIdResetPasswordResponse
func (c *ClientWithResponses) PutRealmUsersIdResetPasswordWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResetPasswordResponse, error) {
	rsp, err := c.PutRealmUsersIdResetPasswordWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutRealmUsersIdResetPasswordWithResponse(ctx context.Context, realm string, id string, body PutRealmUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRealmUsersIdResetPasswordResponse, error) {
	rsp, err := c.PutRealmUsersIdResetPassword(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdResetPasswordResponse(rsp)
}

// GetRealmUsersIdRoleMappingsWithResponse request returning *GetRealmUsersIdRoleMappingsResponse
func (c *ClientWithResponses) GetRealmUsersIdRoleMappingsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsResponse, error) {
	rsp, err := c.GetRealmUsersIdRoleMappings(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdRoleMappingsResponse(rsp)
}

// DeleteRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *DeleteRealmUsersIdRoleMappingsClientsClientResponse
func (c *ClientWithResponses) DeleteRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmUsersIdRoleMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdRoleMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmUsersIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body DeleteRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteRealmUsersIdRoleMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdRoleMappingsClientsClientResponse(rsp)
}

// GetRealmUsersIdRoleMappingsClientsClientWithResponse request returning *GetRealmUsersIdRoleMappingsClientsClientResponse
func (c *ClientWithResponses) GetRealmUsersIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.GetRealmUsersIdRoleMappingsClientsClient(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdRoleMappingsClientsClientResponse(rsp)
}

// PostRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *PostRealmUsersIdRoleMappingsClientsClientResponse
func (c *ClientWithResponses) PostRealmUsersIdRoleMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, id string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmUsersIdRoleMappingsClientsClientWithBody(ctx, realm, id, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdRoleMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) PostRealmUsersIdRoleMappingsClientsClientWithResponse(ctx context.Context, realm string, id string, client string, body PostRealmUsersIdRoleMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsClientsClientResponse, error) {
	rsp, err := c.PostRealmUsersIdRoleMappingsClientsClient(ctx, realm, id, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdRoleMappingsClientsClientResponse(rsp)
}

// GetRealmUsersIdRoleMappingsClientsClientAvailableWithResponse request returning *GetRealmUsersIdRoleMappingsClientsClientAvailableResponse
func (c *ClientWithResponses) GetRealmUsersIdRoleMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsClientsClientAvailableResponse, error) {
	rsp, err := c.GetRealmUsersIdRoleMappingsClientsClientAvailable(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdRoleMappingsClientsClientAvailableResponse(rsp)
}

// GetRealmUsersIdRoleMappingsClientsClientCompositeWithResponse request returning *GetRealmUsersIdRoleMappingsClientsClientCompositeResponse
func (c *ClientWithResponses) GetRealmUsersIdRoleMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, id string, client string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsClientsClientCompositeResponse, error) {
	rsp, err := c.GetRealmUsersIdRoleMappingsClientsClientComposite(ctx, realm, id, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdRoleMappingsClientsClientCompositeResponse(rsp)
}

// DeleteRealmUsersIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteRealmUsersIdRoleMappingsRealmResponse
func (c *ClientWithResponses) DeleteRealmUsersIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmUsersIdRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteRealmUsersIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body DeleteRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRealmUsersIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteRealmUsersIdRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRealmUsersIdRoleMappingsRealmResponse(rsp)
}

// GetRealmUsersIdRoleMappingsRealmWithResponse request returning *GetRealmUsersIdRoleMappingsRealmResponse
func (c *ClientWithResponses) GetRealmUsersIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsRealmResponse, error) {
	rsp, err := c.GetRealmUsersIdRoleMappingsRealm(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdRoleMappingsRealmResponse(rsp)
}

// PostRealmUsersIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostRealmUsersIdRoleMappingsRealmResponse
func (c *ClientWithResponses) PostRealmUsersIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostRealmUsersIdRoleMappingsRealmWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostRealmUsersIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, id string, body PostRealmUsersIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRealmUsersIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostRealmUsersIdRoleMappingsRealm(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRealmUsersIdRoleMappingsRealmResponse(rsp)
}

// GetRealmUsersIdRoleMappingsRealmAvailableWithResponse request returning *GetRealmUsersIdRoleMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetRealmUsersIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetRealmUsersIdRoleMappingsRealmAvailable(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdRoleMappingsRealmAvailableResponse(rsp)
}

// GetRealmUsersIdRoleMappingsRealmCompositeWithResponse request returning *GetRealmUsersIdRoleMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetRealmUsersIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdRoleMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetRealmUsersIdRoleMappingsRealmComposite(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdRoleMappingsRealmCompositeResponse(rsp)
}

// PutRealmUsersIdSendVerifyEmailWithResponse request returning *PutRealmUsersIdSendVerifyEmailResponse
func (c *ClientWithResponses) PutRealmUsersIdSendVerifyEmailWithResponse(ctx context.Context, realm string, id string, params *PutRealmUsersIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutRealmUsersIdSendVerifyEmailResponse, error) {
	rsp, err := c.PutRealmUsersIdSendVerifyEmail(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRealmUsersIdSendVerifyEmailResponse(rsp)
}

// GetRealmUsersIdSessionsWithResponse request returning *GetRealmUsersIdSessionsResponse
func (c *ClientWithResponses) GetRealmUsersIdSessionsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetRealmUsersIdSessionsResponse, error) {
	rsp, err := c.GetRealmUsersIdSessions(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRealmUsersIdSessionsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ServerInfoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostResponse parses an HTTP response from a PostWithResponse call
func ParsePostResponse(rsp *http.Response) (*PostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdNameResponse parses an HTTP response from a GetIdNameWithResponse call
func ParseGetIdNameResponse(rsp *http.Response) (*GetIdNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmResponse parses an HTTP response from a DeleteRealmWithResponse call
func ParseDeleteRealmResponse(rsp *http.Response) (*DeleteRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmResponse parses an HTTP response from a GetRealmWithResponse call
func ParseGetRealmResponse(rsp *http.Response) (*GetRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest RealmRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmResponse parses an HTTP response from a PutRealmWithResponse call
func ParsePutRealmResponse(rsp *http.Response) (*PutRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmAdminEventsResponse parses an HTTP response from a DeleteRealmAdminEventsWithResponse call
func ParseDeleteRealmAdminEventsResponse(rsp *http.Response) (*DeleteRealmAdminEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmAdminEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAdminEventsResponse parses an HTTP response from a GetRealmAdminEventsWithResponse call
func ParseGetRealmAdminEventsResponse(rsp *http.Response) (*GetRealmAdminEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAdminEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []AdminEventRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmAttackDetectionBruteForceUsersResponse parses an HTTP response from a DeleteRealmAttackDetectionBruteForceUsersWithResponse call
func ParseDeleteRealmAttackDetectionBruteForceUsersResponse(rsp *http.Response) (*DeleteRealmAttackDetectionBruteForceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmAttackDetectionBruteForceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmAttackDetectionBruteForceUsersUserIdResponse parses an HTTP response from a DeleteRealmAttackDetectionBruteForceUsersUserIdWithResponse call
func ParseDeleteRealmAttackDetectionBruteForceUsersUserIdResponse(rsp *http.Response) (*DeleteRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmAttackDetectionBruteForceUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAttackDetectionBruteForceUsersUserIdResponse parses an HTTP response from a GetRealmAttackDetectionBruteForceUsersUserIdWithResponse call
func ParseGetRealmAttackDetectionBruteForceUsersUserIdResponse(rsp *http.Response) (*GetRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAttackDetectionBruteForceUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmAuthenticationAuthenticatorProvidersResponse parses an HTTP response from a GetRealmAuthenticationAuthenticatorProvidersWithResponse call
func ParseGetRealmAuthenticationAuthenticatorProvidersResponse(rsp *http.Response) (*GetRealmAuthenticationAuthenticatorProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationAuthenticatorProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmAuthenticationClientAuthenticatorProvidersResponse parses an HTTP response from a GetRealmAuthenticationClientAuthenticatorProvidersWithResponse call
func ParseGetRealmAuthenticationClientAuthenticatorProvidersResponse(rsp *http.Response) (*GetRealmAuthenticationClientAuthenticatorProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationClientAuthenticatorProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmAuthenticationConfigDescriptionProviderIdResponse parses an HTTP response from a GetRealmAuthenticationConfigDescriptionProviderIdWithResponse call
func ParseGetRealmAuthenticationConfigDescriptionProviderIdResponse(rsp *http.Response) (*GetRealmAuthenticationConfigDescriptionProviderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationConfigDescriptionProviderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest AuthenticatorConfigInfoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmAuthenticationConfigIdResponse parses an HTTP response from a DeleteRealmAuthenticationConfigIdWithResponse call
func ParseDeleteRealmAuthenticationConfigIdResponse(rsp *http.Response) (*DeleteRealmAuthenticationConfigIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmAuthenticationConfigIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationConfigIdResponse parses an HTTP response from a GetRealmAuthenticationConfigIdWithResponse call
func ParseGetRealmAuthenticationConfigIdResponse(rsp *http.Response) (*GetRealmAuthenticationConfigIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationConfigIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest AuthenticatorConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmAuthenticationConfigIdResponse parses an HTTP response from a PutRealmAuthenticationConfigIdWithResponse call
func ParsePutRealmAuthenticationConfigIdResponse(rsp *http.Response) (*PutRealmAuthenticationConfigIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmAuthenticationConfigIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationExecutionsResponse parses an HTTP response from a PostRealmAuthenticationExecutionsWithResponse call
func ParsePostRealmAuthenticationExecutionsResponse(rsp *http.Response) (*PostRealmAuthenticationExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmAuthenticationExecutionsExecutionIdResponse parses an HTTP response from a DeleteRealmAuthenticationExecutionsExecutionIdWithResponse call
func ParseDeleteRealmAuthenticationExecutionsExecutionIdResponse(rsp *http.Response) (*DeleteRealmAuthenticationExecutionsExecutionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmAuthenticationExecutionsExecutionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationExecutionsExecutionIdResponse parses an HTTP response from a GetRealmAuthenticationExecutionsExecutionIdWithResponse call
func ParseGetRealmAuthenticationExecutionsExecutionIdResponse(rsp *http.Response) (*GetRealmAuthenticationExecutionsExecutionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationExecutionsExecutionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationExecutionsExecutionIdConfigResponse parses an HTTP response from a PostRealmAuthenticationExecutionsExecutionIdConfigWithResponse call
func ParsePostRealmAuthenticationExecutionsExecutionIdConfigResponse(rsp *http.Response) (*PostRealmAuthenticationExecutionsExecutionIdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationExecutionsExecutionIdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse parses an HTTP response from a PostRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse call
func ParsePostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse(rsp *http.Response) (*PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse parses an HTTP response from a PostRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse call
func ParsePostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse(rsp *http.Response) (*PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationFlowsResponse parses an HTTP response from a GetRealmAuthenticationFlowsWithResponse call
func ParseGetRealmAuthenticationFlowsResponse(rsp *http.Response) (*GetRealmAuthenticationFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []AuthenticationFlowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmAuthenticationFlowsResponse parses an HTTP response from a PostRealmAuthenticationFlowsWithResponse call
func ParsePostRealmAuthenticationFlowsResponse(rsp *http.Response) (*PostRealmAuthenticationFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationFlowsFlowAliasCopyResponse parses an HTTP response from a PostRealmAuthenticationFlowsFlowAliasCopyWithResponse call
func ParsePostRealmAuthenticationFlowsFlowAliasCopyResponse(rsp *http.Response) (*PostRealmAuthenticationFlowsFlowAliasCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationFlowsFlowAliasCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationFlowsFlowAliasExecutionsResponse parses an HTTP response from a GetRealmAuthenticationFlowsFlowAliasExecutionsWithResponse call
func ParseGetRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp *http.Response) (*GetRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationFlowsFlowAliasExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmAuthenticationFlowsFlowAliasExecutionsResponse parses an HTTP response from a PutRealmAuthenticationFlowsFlowAliasExecutionsWithResponse call
func ParsePutRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp *http.Response) (*PutRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmAuthenticationFlowsFlowAliasExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse parses an HTTP response from a PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithResponse call
func ParsePostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(rsp *http.Response) (*PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse parses an HTTP response from a PostRealmAuthenticationFlowsFlowAliasExecutionsFlowWithResponse call
func ParsePostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(rsp *http.Response) (*PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmAuthenticationFlowsIdResponse parses an HTTP response from a DeleteRealmAuthenticationFlowsIdWithResponse call
func ParseDeleteRealmAuthenticationFlowsIdResponse(rsp *http.Response) (*DeleteRealmAuthenticationFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmAuthenticationFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationFlowsIdResponse parses an HTTP response from a GetRealmAuthenticationFlowsIdWithResponse call
func ParseGetRealmAuthenticationFlowsIdResponse(rsp *http.Response) (*GetRealmAuthenticationFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest AuthenticationFlowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmAuthenticationFlowsIdResponse parses an HTTP response from a PutRealmAuthenticationFlowsIdWithResponse call
func ParsePutRealmAuthenticationFlowsIdResponse(rsp *http.Response) (*PutRealmAuthenticationFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmAuthenticationFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationFormActionProvidersResponse parses an HTTP response from a GetRealmAuthenticationFormActionProvidersWithResponse call
func ParseGetRealmAuthenticationFormActionProvidersResponse(rsp *http.Response) (*GetRealmAuthenticationFormActionProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationFormActionProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmAuthenticationFormProvidersResponse parses an HTTP response from a GetRealmAuthenticationFormProvidersWithResponse call
func ParseGetRealmAuthenticationFormProvidersResponse(rsp *http.Response) (*GetRealmAuthenticationFormProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationFormProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmAuthenticationPerClientConfigDescriptionResponse parses an HTTP response from a GetRealmAuthenticationPerClientConfigDescriptionWithResponse call
func ParseGetRealmAuthenticationPerClientConfigDescriptionResponse(rsp *http.Response) (*GetRealmAuthenticationPerClientConfigDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationPerClientConfigDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmAuthenticationRegisterRequiredActionResponse parses an HTTP response from a PostRealmAuthenticationRegisterRequiredActionWithResponse call
func ParsePostRealmAuthenticationRegisterRequiredActionResponse(rsp *http.Response) (*PostRealmAuthenticationRegisterRequiredActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationRegisterRequiredActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationRequiredActionsResponse parses an HTTP response from a GetRealmAuthenticationRequiredActionsWithResponse call
func ParseGetRealmAuthenticationRequiredActionsResponse(rsp *http.Response) (*GetRealmAuthenticationRequiredActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationRequiredActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RequiredActionProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmAuthenticationRequiredActionsAliasResponse parses an HTTP response from a DeleteRealmAuthenticationRequiredActionsAliasWithResponse call
func ParseDeleteRealmAuthenticationRequiredActionsAliasResponse(rsp *http.Response) (*DeleteRealmAuthenticationRequiredActionsAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmAuthenticationRequiredActionsAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationRequiredActionsAliasResponse parses an HTTP response from a GetRealmAuthenticationRequiredActionsAliasWithResponse call
func ParseGetRealmAuthenticationRequiredActionsAliasResponse(rsp *http.Response) (*GetRealmAuthenticationRequiredActionsAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationRequiredActionsAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest RequiredActionProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmAuthenticationRequiredActionsAliasResponse parses an HTTP response from a PutRealmAuthenticationRequiredActionsAliasWithResponse call
func ParsePutRealmAuthenticationRequiredActionsAliasResponse(rsp *http.Response) (*PutRealmAuthenticationRequiredActionsAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmAuthenticationRequiredActionsAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse parses an HTTP response from a PostRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse call
func ParsePostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse(rsp *http.Response) (*PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse parses an HTTP response from a PostRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse call
func ParsePostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse(rsp *http.Response) (*PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmAuthenticationUnregisteredRequiredActionsResponse parses an HTTP response from a GetRealmAuthenticationUnregisteredRequiredActionsWithResponse call
func ParseGetRealmAuthenticationUnregisteredRequiredActionsResponse(rsp *http.Response) (*GetRealmAuthenticationUnregisteredRequiredActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmAuthenticationUnregisteredRequiredActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClearKeysCacheResponse parses an HTTP response from a PostRealmClearKeysCacheWithResponse call
func ParsePostRealmClearKeysCacheResponse(rsp *http.Response) (*PostRealmClearKeysCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClearKeysCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmClearRealmCacheResponse parses an HTTP response from a PostRealmClearRealmCacheWithResponse call
func ParsePostRealmClearRealmCacheResponse(rsp *http.Response) (*PostRealmClearRealmCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClearRealmCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmClearUserCacheResponse parses an HTTP response from a PostRealmClearUserCacheWithResponse call
func ParsePostRealmClearUserCacheResponse(rsp *http.Response) (*PostRealmClearUserCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClearUserCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmClientDescriptionConverterResponse parses an HTTP response from a PostRealmClientDescriptionConverterWithResponse call
func ParsePostRealmClientDescriptionConverterResponse(rsp *http.Response) (*PostRealmClientDescriptionConverterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientDescriptionConverterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientRegistrationPolicyProvidersResponse parses an HTTP response from a GetRealmClientRegistrationPolicyProvidersWithResponse call
func ParseGetRealmClientRegistrationPolicyProvidersResponse(rsp *http.Response) (*GetRealmClientRegistrationPolicyProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientRegistrationPolicyProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ComponentTypeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientScopesResponse parses an HTTP response from a GetRealmClientScopesWithResponse call
func ParseGetRealmClientScopesResponse(rsp *http.Response) (*GetRealmClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientScopesResponse parses an HTTP response from a PostRealmClientScopesWithResponse call
func ParsePostRealmClientScopesResponse(rsp *http.Response) (*PostRealmClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmClientScopesId1ProtocolMappersModelsId2Response parses an HTTP response from a DeleteRealmClientScopesId1ProtocolMappersModelsId2WithResponse call
func ParseDeleteRealmClientScopesId1ProtocolMappersModelsId2Response(rsp *http.Response) (*DeleteRealmClientScopesId1ProtocolMappersModelsId2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientScopesId1ProtocolMappersModelsId2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesId1ProtocolMappersModelsId2Response parses an HTTP response from a GetRealmClientScopesId1ProtocolMappersModelsId2WithResponse call
func ParseGetRealmClientScopesId1ProtocolMappersModelsId2Response(rsp *http.Response) (*GetRealmClientScopesId1ProtocolMappersModelsId2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesId1ProtocolMappersModelsId2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmClientScopesId1ProtocolMappersModelsId2Response parses an HTTP response from a PutRealmClientScopesId1ProtocolMappersModelsId2WithResponse call
func ParsePutRealmClientScopesId1ProtocolMappersModelsId2Response(rsp *http.Response) (*PutRealmClientScopesId1ProtocolMappersModelsId2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientScopesId1ProtocolMappersModelsId2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmClientScopesIdResponse parses an HTTP response from a DeleteRealmClientScopesIdWithResponse call
func ParseDeleteRealmClientScopesIdResponse(rsp *http.Response) (*DeleteRealmClientScopesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientScopesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesIdResponse parses an HTTP response from a GetRealmClientScopesIdWithResponse call
func ParseGetRealmClientScopesIdResponse(rsp *http.Response) (*GetRealmClientScopesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmClientScopesIdResponse parses an HTTP response from a PutRealmClientScopesIdWithResponse call
func ParsePutRealmClientScopesIdResponse(rsp *http.Response) (*PutRealmClientScopesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientScopesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmClientScopesIdProtocolMappersAddModelsResponse parses an HTTP response from a PostRealmClientScopesIdProtocolMappersAddModelsWithResponse call
func ParsePostRealmClientScopesIdProtocolMappersAddModelsResponse(rsp *http.Response) (*PostRealmClientScopesIdProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientScopesIdProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesIdProtocolMappersModelsResponse parses an HTTP response from a GetRealmClientScopesIdProtocolMappersModelsWithResponse call
func ParseGetRealmClientScopesIdProtocolMappersModelsResponse(rsp *http.Response) (*GetRealmClientScopesIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientScopesIdProtocolMappersModelsResponse parses an HTTP response from a PostRealmClientScopesIdProtocolMappersModelsWithResponse call
func ParsePostRealmClientScopesIdProtocolMappersModelsResponse(rsp *http.Response) (*PostRealmClientScopesIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientScopesIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesIdProtocolMappersProtocolProtocolResponse parses an HTTP response from a GetRealmClientScopesIdProtocolMappersProtocolProtocolWithResponse call
func ParseGetRealmClientScopesIdProtocolMappersProtocolProtocolResponse(rsp *http.Response) (*GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientScopesIdScopeMappingsResponse parses an HTTP response from a GetRealmClientScopesIdScopeMappingsWithResponse call
func ParseGetRealmClientScopesIdScopeMappingsResponse(rsp *http.Response) (*GetRealmClientScopesIdScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmClientScopesIdScopeMappingsClientsClientResponse parses an HTTP response from a DeleteRealmClientScopesIdScopeMappingsClientsClientWithResponse call
func ParseDeleteRealmClientScopesIdScopeMappingsClientsClientResponse(rsp *http.Response) (*DeleteRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientScopesIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesIdScopeMappingsClientsClientResponse parses an HTTP response from a GetRealmClientScopesIdScopeMappingsClientsClientWithResponse call
func ParseGetRealmClientScopesIdScopeMappingsClientsClientResponse(rsp *http.Response) (*GetRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientScopesIdScopeMappingsClientsClientResponse parses an HTTP response from a PostRealmClientScopesIdScopeMappingsClientsClientWithResponse call
func ParsePostRealmClientScopesIdScopeMappingsClientsClientResponse(rsp *http.Response) (*PostRealmClientScopesIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientScopesIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse parses an HTTP response from a GetRealmClientScopesIdScopeMappingsClientsClientAvailableWithResponse call
func ParseGetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse(rsp *http.Response) (*GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse parses an HTTP response from a GetRealmClientScopesIdScopeMappingsClientsClientCompositeWithResponse call
func ParseGetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse(rsp *http.Response) (*GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmClientScopesIdScopeMappingsRealmResponse parses an HTTP response from a DeleteRealmClientScopesIdScopeMappingsRealmWithResponse call
func ParseDeleteRealmClientScopesIdScopeMappingsRealmResponse(rsp *http.Response) (*DeleteRealmClientScopesIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientScopesIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesIdScopeMappingsRealmResponse parses an HTTP response from a GetRealmClientScopesIdScopeMappingsRealmWithResponse call
func ParseGetRealmClientScopesIdScopeMappingsRealmResponse(rsp *http.Response) (*GetRealmClientScopesIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientScopesIdScopeMappingsRealmResponse parses an HTTP response from a PostRealmClientScopesIdScopeMappingsRealmWithResponse call
func ParsePostRealmClientScopesIdScopeMappingsRealmResponse(rsp *http.Response) (*PostRealmClientScopesIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientScopesIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientScopesIdScopeMappingsRealmAvailableResponse parses an HTTP response from a GetRealmClientScopesIdScopeMappingsRealmAvailableWithResponse call
func ParseGetRealmClientScopesIdScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetRealmClientScopesIdScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientScopesIdScopeMappingsRealmCompositeResponse parses an HTTP response from a GetRealmClientScopesIdScopeMappingsRealmCompositeWithResponse call
func ParseGetRealmClientScopesIdScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetRealmClientScopesIdScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientScopesIdScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientSessionStatsResponse parses an HTTP response from a GetRealmClientSessionStatsWithResponse call
func ParseGetRealmClientSessionStatsResponse(rsp *http.Response) (*GetRealmClientSessionStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientSessionStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsResponse parses an HTTP response from a GetRealmClientsWithResponse call
func ParseGetRealmClientsResponse(rsp *http.Response) (*GetRealmClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsResponse parses an HTTP response from a PostRealmClientsWithResponse call
func ParsePostRealmClientsResponse(rsp *http.Response) (*PostRealmClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsInitialAccessResponse parses an HTTP response from a GetRealmClientsInitialAccessWithResponse call
func ParseGetRealmClientsInitialAccessResponse(rsp *http.Response) (*GetRealmClientsInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientInitialAccessPresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsInitialAccessResponse parses an HTTP response from a PostRealmClientsInitialAccessWithResponse call
func ParsePostRealmClientsInitialAccessResponse(rsp *http.Response) (*PostRealmClientsInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ClientInitialAccessPresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmClientsInitialAccessIdResponse parses an HTTP response from a DeleteRealmClientsInitialAccessIdWithResponse call
func ParseDeleteRealmClientsInitialAccessIdResponse(rsp *http.Response) (*DeleteRealmClientsInitialAccessIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsInitialAccessIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmClientsId1ProtocolMappersModelsId2Response parses an HTTP response from a DeleteRealmClientsId1ProtocolMappersModelsId2WithResponse call
func ParseDeleteRealmClientsId1ProtocolMappersModelsId2Response(rsp *http.Response) (*DeleteRealmClientsId1ProtocolMappersModelsId2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsId1ProtocolMappersModelsId2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsId1ProtocolMappersModelsId2Response parses an HTTP response from a GetRealmClientsId1ProtocolMappersModelsId2WithResponse call
func ParseGetRealmClientsId1ProtocolMappersModelsId2Response(rsp *http.Response) (*GetRealmClientsId1ProtocolMappersModelsId2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsId1ProtocolMappersModelsId2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmClientsId1ProtocolMappersModelsId2Response parses an HTTP response from a PutRealmClientsId1ProtocolMappersModelsId2WithResponse call
func ParsePutRealmClientsId1ProtocolMappersModelsId2Response(rsp *http.Response) (*PutRealmClientsId1ProtocolMappersModelsId2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientsId1ProtocolMappersModelsId2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmClientsIdResponse parses an HTTP response from a DeleteRealmClientsIdWithResponse call
func ParseDeleteRealmClientsIdResponse(rsp *http.Response) (*DeleteRealmClientsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdResponse parses an HTTP response from a GetRealmClientsIdWithResponse call
func ParseGetRealmClientsIdResponse(rsp *http.Response) (*GetRealmClientsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmClientsIdResponse parses an HTTP response from a PutRealmClientsIdWithResponse call
func ParsePutRealmClientsIdResponse(rsp *http.Response) (*PutRealmClientsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdCertificatesAttrResponse parses an HTTP response from a GetRealmClientsIdCertificatesAttrWithResponse call
func ParseGetRealmClientsIdCertificatesAttrResponse(rsp *http.Response) (*GetRealmClientsIdCertificatesAttrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdCertificatesAttrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdCertificatesAttrDownloadResponse parses an HTTP response from a PostRealmClientsIdCertificatesAttrDownloadWithResponse call
func ParsePostRealmClientsIdCertificatesAttrDownloadResponse(rsp *http.Response) (*PostRealmClientsIdCertificatesAttrDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdCertificatesAttrDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmClientsIdCertificatesAttrGenerateResponse parses an HTTP response from a PostRealmClientsIdCertificatesAttrGenerateWithResponse call
func ParsePostRealmClientsIdCertificatesAttrGenerateResponse(rsp *http.Response) (*PostRealmClientsIdCertificatesAttrGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdCertificatesAttrGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse parses an HTTP response from a PostRealmClientsIdCertificatesAttrGenerateAndDownloadWithResponse call
func ParsePostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse(rsp *http.Response) (*PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmClientsIdCertificatesAttrUploadResponse parses an HTTP response from a PostRealmClientsIdCertificatesAttrUploadWithResponse call
func ParsePostRealmClientsIdCertificatesAttrUploadResponse(rsp *http.Response) (*PostRealmClientsIdCertificatesAttrUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdCertificatesAttrUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdCertificatesAttrUploadCertificateResponse parses an HTTP response from a PostRealmClientsIdCertificatesAttrUploadCertificateWithResponse call
func ParsePostRealmClientsIdCertificatesAttrUploadCertificateResponse(rsp *http.Response) (*PostRealmClientsIdCertificatesAttrUploadCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdCertificatesAttrUploadCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdClientSecretResponse parses an HTTP response from a GetRealmClientsIdClientSecretWithResponse call
func ParseGetRealmClientsIdClientSecretResponse(rsp *http.Response) (*GetRealmClientsIdClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdClientSecretResponse parses an HTTP response from a PostRealmClientsIdClientSecretWithResponse call
func ParsePostRealmClientsIdClientSecretResponse(rsp *http.Response) (*PostRealmClientsIdClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdDefaultClientScopesResponse parses an HTTP response from a GetRealmClientsIdDefaultClientScopesWithResponse call
func ParseGetRealmClientsIdDefaultClientScopesResponse(rsp *http.Response) (*GetRealmClientsIdDefaultClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdDefaultClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse parses an HTTP response from a DeleteRealmClientsIdDefaultClientScopesClientScopeIdWithResponse call
func ParseDeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmClientsIdDefaultClientScopesClientScopeIdResponse parses an HTTP response from a PutRealmClientsIdDefaultClientScopesClientScopeIdWithResponse call
func ParsePutRealmClientsIdDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*PutRealmClientsIdDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientsIdDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse parses an HTTP response from a GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenWithResponse call
func ParseGetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse(rsp *http.Response) (*GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdEvaluateScopesProtocolMappersResponse parses an HTTP response from a GetRealmClientsIdEvaluateScopesProtocolMappersWithResponse call
func ParseGetRealmClientsIdEvaluateScopesProtocolMappersResponse(rsp *http.Response) (*GetRealmClientsIdEvaluateScopesProtocolMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdEvaluateScopesProtocolMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse parses an HTTP response from a GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse call
func ParseGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse(rsp *http.Response) (*GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse parses an HTTP response from a GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse call
func ParseGetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse(rsp *http.Response) (*GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdInstallationProvidersProviderIdResponse parses an HTTP response from a GetRealmClientsIdInstallationProvidersProviderIdWithResponse call
func ParseGetRealmClientsIdInstallationProvidersProviderIdResponse(rsp *http.Response) (*GetRealmClientsIdInstallationProvidersProviderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdInstallationProvidersProviderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdManagementPermissionsResponse parses an HTTP response from a GetRealmClientsIdManagementPermissionsWithResponse call
func ParseGetRealmClientsIdManagementPermissionsResponse(rsp *http.Response) (*GetRealmClientsIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmClientsIdManagementPermissionsResponse parses an HTTP response from a PutRealmClientsIdManagementPermissionsWithResponse call
func ParsePutRealmClientsIdManagementPermissionsResponse(rsp *http.Response) (*PutRealmClientsIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientsIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdNodesResponse parses an HTTP response from a PostRealmClientsIdNodesWithResponse call
func ParsePostRealmClientsIdNodesResponse(rsp *http.Response) (*PostRealmClientsIdNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmClientsIdNodesNodeResponse parses an HTTP response from a DeleteRealmClientsIdNodesNodeWithResponse call
func ParseDeleteRealmClientsIdNodesNodeResponse(rsp *http.Response) (*DeleteRealmClientsIdNodesNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdNodesNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdOfflineSessionCountResponse parses an HTTP response from a GetRealmClientsIdOfflineSessionCountWithResponse call
func ParseGetRealmClientsIdOfflineSessionCountResponse(rsp *http.Response) (*GetRealmClientsIdOfflineSessionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdOfflineSessionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdOfflineSessionsResponse parses an HTTP response from a GetRealmClientsIdOfflineSessionsWithResponse call
func ParseGetRealmClientsIdOfflineSessionsResponse(rsp *http.Response) (*GetRealmClientsIdOfflineSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdOfflineSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdOptionalClientScopesResponse parses an HTTP response from a GetRealmClientsIdOptionalClientScopesWithResponse call
func ParseGetRealmClientsIdOptionalClientScopesResponse(rsp *http.Response) (*GetRealmClientsIdOptionalClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdOptionalClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse parses an HTTP response from a DeleteRealmClientsIdOptionalClientScopesClientScopeIdWithResponse call
func ParseDeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmClientsIdOptionalClientScopesClientScopeIdResponse parses an HTTP response from a PutRealmClientsIdOptionalClientScopesClientScopeIdWithResponse call
func ParsePutRealmClientsIdOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*PutRealmClientsIdOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientsIdOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmClientsIdProtocolMappersAddModelsResponse parses an HTTP response from a PostRealmClientsIdProtocolMappersAddModelsWithResponse call
func ParsePostRealmClientsIdProtocolMappersAddModelsResponse(rsp *http.Response) (*PostRealmClientsIdProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdProtocolMappersModelsResponse parses an HTTP response from a GetRealmClientsIdProtocolMappersModelsWithResponse call
func ParseGetRealmClientsIdProtocolMappersModelsResponse(rsp *http.Response) (*GetRealmClientsIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdProtocolMappersModelsResponse parses an HTTP response from a PostRealmClientsIdProtocolMappersModelsWithResponse call
func ParsePostRealmClientsIdProtocolMappersModelsResponse(rsp *http.Response) (*PostRealmClientsIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdProtocolMappersProtocolProtocolResponse parses an HTTP response from a GetRealmClientsIdProtocolMappersProtocolProtocolWithResponse call
func ParseGetRealmClientsIdProtocolMappersProtocolProtocolResponse(rsp *http.Response) (*GetRealmClientsIdProtocolMappersProtocolProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdProtocolMappersProtocolProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdPushRevocationResponse parses an HTTP response from a PostRealmClientsIdPushRevocationWithResponse call
func ParsePostRealmClientsIdPushRevocationResponse(rsp *http.Response) (*PostRealmClientsIdPushRevocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdPushRevocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdRegistrationAccessTokenResponse parses an HTTP response from a PostRealmClientsIdRegistrationAccessTokenWithResponse call
func ParsePostRealmClientsIdRegistrationAccessTokenResponse(rsp *http.Response) (*PostRealmClientsIdRegistrationAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdRegistrationAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdRolesResponse parses an HTTP response from a GetRealmClientsIdRolesWithResponse call
func ParseGetRealmClientsIdRolesResponse(rsp *http.Response) (*GetRealmClientsIdRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdRolesResponse parses an HTTP response from a PostRealmClientsIdRolesWithResponse call
func ParsePostRealmClientsIdRolesResponse(rsp *http.Response) (*PostRealmClientsIdRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmClientsIdRolesRoleNameResponse parses an HTTP response from a DeleteRealmClientsIdRolesRoleNameWithResponse call
func ParseDeleteRealmClientsIdRolesRoleNameResponse(rsp *http.Response) (*DeleteRealmClientsIdRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdRolesRoleNameResponse parses an HTTP response from a GetRealmClientsIdRolesRoleNameWithResponse call
func ParseGetRealmClientsIdRolesRoleNameResponse(rsp *http.Response) (*GetRealmClientsIdRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmClientsIdRolesRoleNameResponse parses an HTTP response from a PutRealmClientsIdRolesRoleNameWithResponse call
func ParsePutRealmClientsIdRolesRoleNameResponse(rsp *http.Response) (*PutRealmClientsIdRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientsIdRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmClientsIdRolesRoleNameCompositesResponse parses an HTTP response from a DeleteRealmClientsIdRolesRoleNameCompositesWithResponse call
func ParseDeleteRealmClientsIdRolesRoleNameCompositesResponse(rsp *http.Response) (*DeleteRealmClientsIdRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdRolesRoleNameCompositesResponse parses an HTTP response from a GetRealmClientsIdRolesRoleNameCompositesWithResponse call
func ParseGetRealmClientsIdRolesRoleNameCompositesResponse(rsp *http.Response) (*GetRealmClientsIdRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdRolesRoleNameCompositesResponse parses an HTTP response from a PostRealmClientsIdRolesRoleNameCompositesWithResponse call
func ParsePostRealmClientsIdRolesRoleNameCompositesResponse(rsp *http.Response) (*PostRealmClientsIdRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdRolesRoleNameCompositesClientsClientResponse parses an HTTP response from a GetRealmClientsIdRolesRoleNameCompositesClientsClientWithResponse call
func ParseGetRealmClientsIdRolesRoleNameCompositesClientsClientResponse(rsp *http.Response) (*GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdRolesRoleNameCompositesRealmResponse parses an HTTP response from a GetRealmClientsIdRolesRoleNameCompositesRealmWithResponse call
func ParseGetRealmClientsIdRolesRoleNameCompositesRealmResponse(rsp *http.Response) (*GetRealmClientsIdRolesRoleNameCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesRoleNameCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdRolesRoleNameGroupsResponse parses an HTTP response from a GetRealmClientsIdRolesRoleNameGroupsWithResponse call
func ParseGetRealmClientsIdRolesRoleNameGroupsResponse(rsp *http.Response) (*GetRealmClientsIdRolesRoleNameGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesRoleNameGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdRolesRoleNameManagementPermissionsResponse parses an HTTP response from a GetRealmClientsIdRolesRoleNameManagementPermissionsWithResponse call
func ParseGetRealmClientsIdRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*GetRealmClientsIdRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmClientsIdRolesRoleNameManagementPermissionsResponse parses an HTTP response from a PutRealmClientsIdRolesRoleNameManagementPermissionsWithResponse call
func ParsePutRealmClientsIdRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*PutRealmClientsIdRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmClientsIdRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdRolesRoleNameUsersResponse parses an HTTP response from a GetRealmClientsIdRolesRoleNameUsersWithResponse call
func ParseGetRealmClientsIdRolesRoleNameUsersResponse(rsp *http.Response) (*GetRealmClientsIdRolesRoleNameUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdRolesRoleNameUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdScopeMappingsResponse parses an HTTP response from a GetRealmClientsIdScopeMappingsWithResponse call
func ParseGetRealmClientsIdScopeMappingsResponse(rsp *http.Response) (*GetRealmClientsIdScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmClientsIdScopeMappingsClientsClientResponse parses an HTTP response from a DeleteRealmClientsIdScopeMappingsClientsClientWithResponse call
func ParseDeleteRealmClientsIdScopeMappingsClientsClientResponse(rsp *http.Response) (*DeleteRealmClientsIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdScopeMappingsClientsClientResponse parses an HTTP response from a GetRealmClientsIdScopeMappingsClientsClientWithResponse call
func ParseGetRealmClientsIdScopeMappingsClientsClientResponse(rsp *http.Response) (*GetRealmClientsIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdScopeMappingsClientsClientResponse parses an HTTP response from a PostRealmClientsIdScopeMappingsClientsClientWithResponse call
func ParsePostRealmClientsIdScopeMappingsClientsClientResponse(rsp *http.Response) (*PostRealmClientsIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdScopeMappingsClientsClientAvailableResponse parses an HTTP response from a GetRealmClientsIdScopeMappingsClientsClientAvailableWithResponse call
func ParseGetRealmClientsIdScopeMappingsClientsClientAvailableResponse(rsp *http.Response) (*GetRealmClientsIdScopeMappingsClientsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdScopeMappingsClientsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdScopeMappingsClientsClientCompositeResponse parses an HTTP response from a GetRealmClientsIdScopeMappingsClientsClientCompositeWithResponse call
func ParseGetRealmClientsIdScopeMappingsClientsClientCompositeResponse(rsp *http.Response) (*GetRealmClientsIdScopeMappingsClientsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdScopeMappingsClientsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmClientsIdScopeMappingsRealmResponse parses an HTTP response from a DeleteRealmClientsIdScopeMappingsRealmWithResponse call
func ParseDeleteRealmClientsIdScopeMappingsRealmResponse(rsp *http.Response) (*DeleteRealmClientsIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmClientsIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdScopeMappingsRealmResponse parses an HTTP response from a GetRealmClientsIdScopeMappingsRealmWithResponse call
func ParseGetRealmClientsIdScopeMappingsRealmResponse(rsp *http.Response) (*GetRealmClientsIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmClientsIdScopeMappingsRealmResponse parses an HTTP response from a PostRealmClientsIdScopeMappingsRealmWithResponse call
func ParsePostRealmClientsIdScopeMappingsRealmResponse(rsp *http.Response) (*PostRealmClientsIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmClientsIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmClientsIdScopeMappingsRealmAvailableResponse parses an HTTP response from a GetRealmClientsIdScopeMappingsRealmAvailableWithResponse call
func ParseGetRealmClientsIdScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetRealmClientsIdScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdScopeMappingsRealmCompositeResponse parses an HTTP response from a GetRealmClientsIdScopeMappingsRealmCompositeWithResponse call
func ParseGetRealmClientsIdScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetRealmClientsIdScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdServiceAccountUserResponse parses an HTTP response from a GetRealmClientsIdServiceAccountUserWithResponse call
func ParseGetRealmClientsIdServiceAccountUserResponse(rsp *http.Response) (*GetRealmClientsIdServiceAccountUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdServiceAccountUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdSessionCountResponse parses an HTTP response from a GetRealmClientsIdSessionCountWithResponse call
func ParseGetRealmClientsIdSessionCountResponse(rsp *http.Response) (*GetRealmClientsIdSessionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdSessionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdTestNodesAvailableResponse parses an HTTP response from a GetRealmClientsIdTestNodesAvailableWithResponse call
func ParseGetRealmClientsIdTestNodesAvailableResponse(rsp *http.Response) (*GetRealmClientsIdTestNodesAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdTestNodesAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmClientsIdUserSessionsResponse parses an HTTP response from a GetRealmClientsIdUserSessionsWithResponse call
func ParseGetRealmClientsIdUserSessionsResponse(rsp *http.Response) (*GetRealmClientsIdUserSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmClientsIdUserSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmComponentsResponse parses an HTTP response from a GetRealmComponentsWithResponse call
func ParseGetRealmComponentsResponse(rsp *http.Response) (*GetRealmComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ComponentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmComponentsResponse parses an HTTP response from a PostRealmComponentsWithResponse call
func ParsePostRealmComponentsResponse(rsp *http.Response) (*PostRealmComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmComponentsIdResponse parses an HTTP response from a DeleteRealmComponentsIdWithResponse call
func ParseDeleteRealmComponentsIdResponse(rsp *http.Response) (*DeleteRealmComponentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmComponentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmComponentsIdResponse parses an HTTP response from a GetRealmComponentsIdWithResponse call
func ParseGetRealmComponentsIdResponse(rsp *http.Response) (*GetRealmComponentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmComponentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ComponentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmComponentsIdResponse parses an HTTP response from a PutRealmComponentsIdWithResponse call
func ParsePutRealmComponentsIdResponse(rsp *http.Response) (*PutRealmComponentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmComponentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmComponentsIdSubComponentTypesResponse parses an HTTP response from a GetRealmComponentsIdSubComponentTypesWithResponse call
func ParseGetRealmComponentsIdSubComponentTypesResponse(rsp *http.Response) (*GetRealmComponentsIdSubComponentTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmComponentsIdSubComponentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ComponentTypeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmCredentialRegistratorsResponse parses an HTTP response from a GetRealmCredentialRegistratorsWithResponse call
func ParseGetRealmCredentialRegistratorsResponse(rsp *http.Response) (*GetRealmCredentialRegistratorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmCredentialRegistratorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmDefaultDefaultClientScopesResponse parses an HTTP response from a GetRealmDefaultDefaultClientScopesWithResponse call
func ParseGetRealmDefaultDefaultClientScopesResponse(rsp *http.Response) (*GetRealmDefaultDefaultClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmDefaultDefaultClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmDefaultDefaultClientScopesClientScopeIdResponse parses an HTTP response from a DeleteRealmDefaultDefaultClientScopesClientScopeIdWithResponse call
func ParseDeleteRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmDefaultDefaultClientScopesClientScopeIdResponse parses an HTTP response from a PutRealmDefaultDefaultClientScopesClientScopeIdWithResponse call
func ParsePutRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*PutRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmDefaultDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmDefaultGroupsResponse parses an HTTP response from a GetRealmDefaultGroupsWithResponse call
func ParseGetRealmDefaultGroupsResponse(rsp *http.Response) (*GetRealmDefaultGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmDefaultGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmDefaultGroupsGroupIdResponse parses an HTTP response from a DeleteRealmDefaultGroupsGroupIdWithResponse call
func ParseDeleteRealmDefaultGroupsGroupIdResponse(rsp *http.Response) (*DeleteRealmDefaultGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmDefaultGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmDefaultGroupsGroupIdResponse parses an HTTP response from a PutRealmDefaultGroupsGroupIdWithResponse call
func ParsePutRealmDefaultGroupsGroupIdResponse(rsp *http.Response) (*PutRealmDefaultGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmDefaultGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmDefaultOptionalClientScopesResponse parses an HTTP response from a GetRealmDefaultOptionalClientScopesWithResponse call
func ParseGetRealmDefaultOptionalClientScopesResponse(rsp *http.Response) (*GetRealmDefaultOptionalClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmDefaultOptionalClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmDefaultOptionalClientScopesClientScopeIdResponse parses an HTTP response from a DeleteRealmDefaultOptionalClientScopesClientScopeIdWithResponse call
func ParseDeleteRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmDefaultOptionalClientScopesClientScopeIdResponse parses an HTTP response from a PutRealmDefaultOptionalClientScopesClientScopeIdWithResponse call
func ParsePutRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*PutRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmDefaultOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmEventsResponse parses an HTTP response from a DeleteRealmEventsWithResponse call
func ParseDeleteRealmEventsResponse(rsp *http.Response) (*DeleteRealmEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmEventsResponse parses an HTTP response from a GetRealmEventsWithResponse call
func ParseGetRealmEventsResponse(rsp *http.Response) (*GetRealmEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []EventRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmEventsConfigResponse parses an HTTP response from a GetRealmEventsConfigWithResponse call
func ParseGetRealmEventsConfigResponse(rsp *http.Response) (*GetRealmEventsConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmEventsConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest RealmEventsConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmEventsConfigResponse parses an HTTP response from a PutRealmEventsConfigWithResponse call
func ParsePutRealmEventsConfigResponse(rsp *http.Response) (*PutRealmEventsConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmEventsConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupByPathPathResponse parses an HTTP response from a GetRealmGroupByPathPathWithResponse call
func ParseGetRealmGroupByPathPathResponse(rsp *http.Response) (*GetRealmGroupByPathPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupByPathPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmGroupsResponse parses an HTTP response from a GetRealmGroupsWithResponse call
func ParseGetRealmGroupsResponse(rsp *http.Response) (*GetRealmGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmGroupsResponse parses an HTTP response from a PostRealmGroupsWithResponse call
func ParsePostRealmGroupsResponse(rsp *http.Response) (*PostRealmGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupsCountResponse parses an HTTP response from a GetRealmGroupsCountWithResponse call
func ParseGetRealmGroupsCountResponse(rsp *http.Response) (*GetRealmGroupsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmGroupsIdResponse parses an HTTP response from a DeleteRealmGroupsIdWithResponse call
func ParseDeleteRealmGroupsIdResponse(rsp *http.Response) (*DeleteRealmGroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupsIdResponse parses an HTTP response from a GetRealmGroupsIdWithResponse call
func ParseGetRealmGroupsIdResponse(rsp *http.Response) (*GetRealmGroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmGroupsIdResponse parses an HTTP response from a PutRealmGroupsIdWithResponse call
func ParsePutRealmGroupsIdResponse(rsp *http.Response) (*PutRealmGroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmGroupsIdChildrenResponse parses an HTTP response from a PostRealmGroupsIdChildrenWithResponse call
func ParsePostRealmGroupsIdChildrenResponse(rsp *http.Response) (*PostRealmGroupsIdChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmGroupsIdChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupsIdManagementPermissionsResponse parses an HTTP response from a GetRealmGroupsIdManagementPermissionsWithResponse call
func ParseGetRealmGroupsIdManagementPermissionsResponse(rsp *http.Response) (*GetRealmGroupsIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmGroupsIdManagementPermissionsResponse parses an HTTP response from a PutRealmGroupsIdManagementPermissionsWithResponse call
func ParsePutRealmGroupsIdManagementPermissionsResponse(rsp *http.Response) (*PutRealmGroupsIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmGroupsIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmGroupsIdMembersResponse parses an HTTP response from a GetRealmGroupsIdMembersWithResponse call
func ParseGetRealmGroupsIdMembersResponse(rsp *http.Response) (*GetRealmGroupsIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmGroupsIdRoleMappingsResponse parses an HTTP response from a GetRealmGroupsIdRoleMappingsWithResponse call
func ParseGetRealmGroupsIdRoleMappingsResponse(rsp *http.Response) (*GetRealmGroupsIdRoleMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdRoleMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmGroupsIdRoleMappingsClientsClientResponse parses an HTTP response from a DeleteRealmGroupsIdRoleMappingsClientsClientWithResponse call
func ParseDeleteRealmGroupsIdRoleMappingsClientsClientResponse(rsp *http.Response) (*DeleteRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmGroupsIdRoleMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupsIdRoleMappingsClientsClientResponse parses an HTTP response from a GetRealmGroupsIdRoleMappingsClientsClientWithResponse call
func ParseGetRealmGroupsIdRoleMappingsClientsClientResponse(rsp *http.Response) (*GetRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdRoleMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmGroupsIdRoleMappingsClientsClientResponse parses an HTTP response from a PostRealmGroupsIdRoleMappingsClientsClientWithResponse call
func ParsePostRealmGroupsIdRoleMappingsClientsClientResponse(rsp *http.Response) (*PostRealmGroupsIdRoleMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmGroupsIdRoleMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupsIdRoleMappingsClientsClientAvailableResponse parses an HTTP response from a GetRealmGroupsIdRoleMappingsClientsClientAvailableWithResponse call
func ParseGetRealmGroupsIdRoleMappingsClientsClientAvailableResponse(rsp *http.Response) (*GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmGroupsIdRoleMappingsClientsClientCompositeResponse parses an HTTP response from a GetRealmGroupsIdRoleMappingsClientsClientCompositeWithResponse call
func ParseGetRealmGroupsIdRoleMappingsClientsClientCompositeResponse(rsp *http.Response) (*GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmGroupsIdRoleMappingsRealmResponse parses an HTTP response from a DeleteRealmGroupsIdRoleMappingsRealmWithResponse call
func ParseDeleteRealmGroupsIdRoleMappingsRealmResponse(rsp *http.Response) (*DeleteRealmGroupsIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmGroupsIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupsIdRoleMappingsRealmResponse parses an HTTP response from a GetRealmGroupsIdRoleMappingsRealmWithResponse call
func ParseGetRealmGroupsIdRoleMappingsRealmResponse(rsp *http.Response) (*GetRealmGroupsIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmGroupsIdRoleMappingsRealmResponse parses an HTTP response from a PostRealmGroupsIdRoleMappingsRealmWithResponse call
func ParsePostRealmGroupsIdRoleMappingsRealmResponse(rsp *http.Response) (*PostRealmGroupsIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmGroupsIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmGroupsIdRoleMappingsRealmAvailableResponse parses an HTTP response from a GetRealmGroupsIdRoleMappingsRealmAvailableWithResponse call
func ParseGetRealmGroupsIdRoleMappingsRealmAvailableResponse(rsp *http.Response) (*GetRealmGroupsIdRoleMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdRoleMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmGroupsIdRoleMappingsRealmCompositeResponse parses an HTTP response from a GetRealmGroupsIdRoleMappingsRealmCompositeWithResponse call
func ParseGetRealmGroupsIdRoleMappingsRealmCompositeResponse(rsp *http.Response) (*GetRealmGroupsIdRoleMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmGroupsIdRoleMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmIdentityProviderImportConfigResponse parses an HTTP response from a PostRealmIdentityProviderImportConfigWithResponse call
func ParsePostRealmIdentityProviderImportConfigResponse(rsp *http.Response) (*PostRealmIdentityProviderImportConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmIdentityProviderImportConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmIdentityProviderInstancesResponse parses an HTTP response from a GetRealmIdentityProviderInstancesWithResponse call
func ParseGetRealmIdentityProviderInstancesResponse(rsp *http.Response) (*GetRealmIdentityProviderInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []IdentityProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmIdentityProviderInstancesResponse parses an HTTP response from a PostRealmIdentityProviderInstancesWithResponse call
func ParsePostRealmIdentityProviderInstancesResponse(rsp *http.Response) (*PostRealmIdentityProviderInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmIdentityProviderInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmIdentityProviderInstancesAliasResponse parses an HTTP response from a DeleteRealmIdentityProviderInstancesAliasWithResponse call
func ParseDeleteRealmIdentityProviderInstancesAliasResponse(rsp *http.Response) (*DeleteRealmIdentityProviderInstancesAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmIdentityProviderInstancesAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmIdentityProviderInstancesAliasResponse parses an HTTP response from a GetRealmIdentityProviderInstancesAliasWithResponse call
func ParseGetRealmIdentityProviderInstancesAliasResponse(rsp *http.Response) (*GetRealmIdentityProviderInstancesAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderInstancesAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest IdentityProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmIdentityProviderInstancesAliasResponse parses an HTTP response from a PutRealmIdentityProviderInstancesAliasWithResponse call
func ParsePutRealmIdentityProviderInstancesAliasResponse(rsp *http.Response) (*PutRealmIdentityProviderInstancesAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmIdentityProviderInstancesAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmIdentityProviderInstancesAliasExportResponse parses an HTTP response from a GetRealmIdentityProviderInstancesAliasExportWithResponse call
func ParseGetRealmIdentityProviderInstancesAliasExportResponse(rsp *http.Response) (*GetRealmIdentityProviderInstancesAliasExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderInstancesAliasExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmIdentityProviderInstancesAliasManagementPermissionsResponse parses an HTTP response from a GetRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse call
func ParseGetRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp *http.Response) (*GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmIdentityProviderInstancesAliasManagementPermissionsResponse parses an HTTP response from a PutRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse call
func ParsePutRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp *http.Response) (*PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmIdentityProviderInstancesAliasMapperTypesResponse parses an HTTP response from a GetRealmIdentityProviderInstancesAliasMapperTypesWithResponse call
func ParseGetRealmIdentityProviderInstancesAliasMapperTypesResponse(rsp *http.Response) (*GetRealmIdentityProviderInstancesAliasMapperTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderInstancesAliasMapperTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmIdentityProviderInstancesAliasMappersResponse parses an HTTP response from a GetRealmIdentityProviderInstancesAliasMappersWithResponse call
func ParseGetRealmIdentityProviderInstancesAliasMappersResponse(rsp *http.Response) (*GetRealmIdentityProviderInstancesAliasMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderInstancesAliasMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []IdentityProviderMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmIdentityProviderInstancesAliasMappersResponse parses an HTTP response from a PostRealmIdentityProviderInstancesAliasMappersWithResponse call
func ParsePostRealmIdentityProviderInstancesAliasMappersResponse(rsp *http.Response) (*PostRealmIdentityProviderInstancesAliasMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmIdentityProviderInstancesAliasMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmIdentityProviderInstancesAliasMappersIdResponse parses an HTTP response from a DeleteRealmIdentityProviderInstancesAliasMappersIdWithResponse call
func ParseDeleteRealmIdentityProviderInstancesAliasMappersIdResponse(rsp *http.Response) (*DeleteRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmIdentityProviderInstancesAliasMappersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmIdentityProviderInstancesAliasMappersIdResponse parses an HTTP response from a GetRealmIdentityProviderInstancesAliasMappersIdWithResponse call
func ParseGetRealmIdentityProviderInstancesAliasMappersIdResponse(rsp *http.Response) (*GetRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderInstancesAliasMappersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest IdentityProviderMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmIdentityProviderInstancesAliasMappersIdResponse parses an HTTP response from a PutRealmIdentityProviderInstancesAliasMappersIdWithResponse call
func ParsePutRealmIdentityProviderInstancesAliasMappersIdResponse(rsp *http.Response) (*PutRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmIdentityProviderInstancesAliasMappersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmIdentityProviderProvidersProviderIdResponse parses an HTTP response from a GetRealmIdentityProviderProvidersProviderIdWithResponse call
func ParseGetRealmIdentityProviderProvidersProviderIdResponse(rsp *http.Response) (*GetRealmIdentityProviderProvidersProviderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmIdentityProviderProvidersProviderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmKeysResponse parses an HTTP response from a GetRealmKeysWithResponse call
func ParseGetRealmKeysResponse(rsp *http.Response) (*GetRealmKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest KeysMetadataRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmLogoutAllResponse parses an HTTP response from a PostRealmLogoutAllWithResponse call
func ParsePostRealmLogoutAllResponse(rsp *http.Response) (*PostRealmLogoutAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmLogoutAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmPartialExportResponse parses an HTTP response from a PostRealmPartialExportWithResponse call
func ParsePostRealmPartialExportResponse(rsp *http.Response) (*PostRealmPartialExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmPartialExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest RealmRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmPartialImportResponse parses an HTTP response from a PostRealmPartialImportWithResponse call
func ParsePostRealmPartialImportResponse(rsp *http.Response) (*PostRealmPartialImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmPartialImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmPushRevocationResponse parses an HTTP response from a PostRealmPushRevocationWithResponse call
func ParsePostRealmPushRevocationResponse(rsp *http.Response) (*PostRealmPushRevocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmPushRevocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmRolesResponse parses an HTTP response from a GetRealmRolesWithResponse call
func ParseGetRealmRolesResponse(rsp *http.Response) (*GetRealmRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmRolesResponse parses an HTTP response from a PostRealmRolesWithResponse call
func ParsePostRealmRolesResponse(rsp *http.Response) (*PostRealmRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmRolesByIdRoleIdResponse parses an HTTP response from a DeleteRealmRolesByIdRoleIdWithResponse call
func ParseDeleteRealmRolesByIdRoleIdResponse(rsp *http.Response) (*DeleteRealmRolesByIdRoleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmRolesByIdRoleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmRolesByIdRoleIdResponse parses an HTTP response from a GetRealmRolesByIdRoleIdWithResponse call
func ParseGetRealmRolesByIdRoleIdResponse(rsp *http.Response) (*GetRealmRolesByIdRoleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesByIdRoleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmRolesByIdRoleIdResponse parses an HTTP response from a PutRealmRolesByIdRoleIdWithResponse call
func ParsePutRealmRolesByIdRoleIdResponse(rsp *http.Response) (*PutRealmRolesByIdRoleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmRolesByIdRoleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmRolesByIdRoleIdCompositesResponse parses an HTTP response from a DeleteRealmRolesByIdRoleIdCompositesWithResponse call
func ParseDeleteRealmRolesByIdRoleIdCompositesResponse(rsp *http.Response) (*DeleteRealmRolesByIdRoleIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmRolesByIdRoleIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmRolesByIdRoleIdCompositesResponse parses an HTTP response from a GetRealmRolesByIdRoleIdCompositesWithResponse call
func ParseGetRealmRolesByIdRoleIdCompositesResponse(rsp *http.Response) (*GetRealmRolesByIdRoleIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesByIdRoleIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmRolesByIdRoleIdCompositesResponse parses an HTTP response from a PostRealmRolesByIdRoleIdCompositesWithResponse call
func ParsePostRealmRolesByIdRoleIdCompositesResponse(rsp *http.Response) (*PostRealmRolesByIdRoleIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmRolesByIdRoleIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmRolesByIdRoleIdCompositesClientsClientResponse parses an HTTP response from a GetRealmRolesByIdRoleIdCompositesClientsClientWithResponse call
func ParseGetRealmRolesByIdRoleIdCompositesClientsClientResponse(rsp *http.Response) (*GetRealmRolesByIdRoleIdCompositesClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesByIdRoleIdCompositesClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmRolesByIdRoleIdCompositesRealmResponse parses an HTTP response from a GetRealmRolesByIdRoleIdCompositesRealmWithResponse call
func ParseGetRealmRolesByIdRoleIdCompositesRealmResponse(rsp *http.Response) (*GetRealmRolesByIdRoleIdCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesByIdRoleIdCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmRolesByIdRoleIdManagementPermissionsResponse parses an HTTP response from a GetRealmRolesByIdRoleIdManagementPermissionsWithResponse call
func ParseGetRealmRolesByIdRoleIdManagementPermissionsResponse(rsp *http.Response) (*GetRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesByIdRoleIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmRolesByIdRoleIdManagementPermissionsResponse parses an HTTP response from a PutRealmRolesByIdRoleIdManagementPermissionsWithResponse call
func ParsePutRealmRolesByIdRoleIdManagementPermissionsResponse(rsp *http.Response) (*PutRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmRolesByIdRoleIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmRolesRoleNameResponse parses an HTTP response from a DeleteRealmRolesRoleNameWithResponse call
func ParseDeleteRealmRolesRoleNameResponse(rsp *http.Response) (*DeleteRealmRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmRolesRoleNameResponse parses an HTTP response from a GetRealmRolesRoleNameWithResponse call
func ParseGetRealmRolesRoleNameResponse(rsp *http.Response) (*GetRealmRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmRolesRoleNameResponse parses an HTTP response from a PutRealmRolesRoleNameWithResponse call
func ParsePutRealmRolesRoleNameResponse(rsp *http.Response) (*PutRealmRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRealmRolesRoleNameCompositesResponse parses an HTTP response from a DeleteRealmRolesRoleNameCompositesWithResponse call
func ParseDeleteRealmRolesRoleNameCompositesResponse(rsp *http.Response) (*DeleteRealmRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmRolesRoleNameCompositesResponse parses an HTTP response from a GetRealmRolesRoleNameCompositesWithResponse call
func ParseGetRealmRolesRoleNameCompositesResponse(rsp *http.Response) (*GetRealmRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmRolesRoleNameCompositesResponse parses an HTTP response from a PostRealmRolesRoleNameCompositesWithResponse call
func ParsePostRealmRolesRoleNameCompositesResponse(rsp *http.Response) (*PostRealmRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmRolesRoleNameCompositesClientsClientResponse parses an HTTP response from a GetRealmRolesRoleNameCompositesClientsClientWithResponse call
func ParseGetRealmRolesRoleNameCompositesClientsClientResponse(rsp *http.Response) (*GetRealmRolesRoleNameCompositesClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesRoleNameCompositesClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmRolesRoleNameCompositesRealmResponse parses an HTTP response from a GetRealmRolesRoleNameCompositesRealmWithResponse call
func ParseGetRealmRolesRoleNameCompositesRealmResponse(rsp *http.Response) (*GetRealmRolesRoleNameCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesRoleNameCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmRolesRoleNameGroupsResponse parses an HTTP response from a GetRealmRolesRoleNameGroupsWithResponse call
func ParseGetRealmRolesRoleNameGroupsResponse(rsp *http.Response) (*GetRealmRolesRoleNameGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesRoleNameGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmRolesRoleNameManagementPermissionsResponse parses an HTTP response from a GetRealmRolesRoleNameManagementPermissionsWithResponse call
func ParseGetRealmRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*GetRealmRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmRolesRoleNameManagementPermissionsResponse parses an HTTP response from a PutRealmRolesRoleNameManagementPermissionsWithResponse call
func ParsePutRealmRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*PutRealmRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmRolesRoleNameUsersResponse parses an HTTP response from a GetRealmRolesRoleNameUsersWithResponse call
func ParseGetRealmRolesRoleNameUsersResponse(rsp *http.Response) (*GetRealmRolesRoleNameUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmRolesRoleNameUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmSessionsSessionResponse parses an HTTP response from a DeleteRealmSessionsSessionWithResponse call
func ParseDeleteRealmSessionsSessionResponse(rsp *http.Response) (*DeleteRealmSessionsSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmSessionsSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmTestLDAPConnectionResponse parses an HTTP response from a PostRealmTestLDAPConnectionWithResponse call
func ParsePostRealmTestLDAPConnectionResponse(rsp *http.Response) (*PostRealmTestLDAPConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmTestLDAPConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmTestSMTPConnectionResponse parses an HTTP response from a PostRealmTestSMTPConnectionWithResponse call
func ParsePostRealmTestSMTPConnectionResponse(rsp *http.Response) (*PostRealmTestSMTPConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmTestSMTPConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUserStorageIdNameResponse parses an HTTP response from a GetRealmUserStorageIdNameWithResponse call
func ParseGetRealmUserStorageIdNameResponse(rsp *http.Response) (*GetRealmUserStorageIdNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUserStorageIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmUserStorageIdRemoveImportedUsersResponse parses an HTTP response from a PostRealmUserStorageIdRemoveImportedUsersWithResponse call
func ParsePostRealmUserStorageIdRemoveImportedUsersResponse(rsp *http.Response) (*PostRealmUserStorageIdRemoveImportedUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUserStorageIdRemoveImportedUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmUserStorageIdSyncResponse parses an HTTP response from a PostRealmUserStorageIdSyncWithResponse call
func ParsePostRealmUserStorageIdSyncResponse(rsp *http.Response) (*PostRealmUserStorageIdSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUserStorageIdSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest SynchronizationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmUserStorageIdUnlinkUsersResponse parses an HTTP response from a PostRealmUserStorageIdUnlinkUsersWithResponse call
func ParsePostRealmUserStorageIdUnlinkUsersResponse(rsp *http.Response) (*PostRealmUserStorageIdUnlinkUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUserStorageIdUnlinkUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmUserStorageParentIdMappersIdSyncResponse parses an HTTP response from a PostRealmUserStorageParentIdMappersIdSyncWithResponse call
func ParsePostRealmUserStorageParentIdMappersIdSyncResponse(rsp *http.Response) (*PostRealmUserStorageParentIdMappersIdSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUserStorageParentIdMappersIdSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest SynchronizationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmUsersResponse parses an HTTP response from a GetRealmUsersWithResponse call
func ParseGetRealmUsersResponse(rsp *http.Response) (*GetRealmUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmUsersResponse parses an HTTP response from a PostRealmUsersWithResponse call
func ParsePostRealmUsersResponse(rsp *http.Response) (*PostRealmUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersManagementPermissionsResponse parses an HTTP response from a GetRealmUsersManagementPermissionsWithResponse call
func ParseGetRealmUsersManagementPermissionsResponse(rsp *http.Response) (*GetRealmUsersManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmUsersManagementPermissionsResponse parses an HTTP response from a PutRealmUsersManagementPermissionsWithResponse call
func ParsePutRealmUsersManagementPermissionsResponse(rsp *http.Response) (*PutRealmUsersManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmUsersCountResponse parses an HTTP response from a GetRealmUsersCountWithResponse call
func ParseGetRealmUsersCountResponse(rsp *http.Response) (*GetRealmUsersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmUsersIdResponse parses an HTTP response from a DeleteRealmUsersIdWithResponse call
func ParseDeleteRealmUsersIdResponse(rsp *http.Response) (*DeleteRealmUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdResponse parses an HTTP response from a GetRealmUsersIdWithResponse call
func ParseGetRealmUsersIdResponse(rsp *http.Response) (*GetRealmUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmUsersIdResponse parses an HTTP response from a PutRealmUsersIdWithResponse call
func ParsePutRealmUsersIdResponse(rsp *http.Response) (*PutRealmUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdConfiguredUserStorageCredentialTypesResponse parses an HTTP response from a GetRealmUsersIdConfiguredUserStorageCredentialTypesWithResponse call
func ParseGetRealmUsersIdConfiguredUserStorageCredentialTypesResponse(rsp *http.Response) (*GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmUsersIdConsentsResponse parses an HTTP response from a GetRealmUsersIdConsentsWithResponse call
func ParseGetRealmUsersIdConsentsResponse(rsp *http.Response) (*GetRealmUsersIdConsentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdConsentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmUsersIdConsentsClientResponse parses an HTTP response from a DeleteRealmUsersIdConsentsClientWithResponse call
func ParseDeleteRealmUsersIdConsentsClientResponse(rsp *http.Response) (*DeleteRealmUsersIdConsentsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmUsersIdConsentsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdCredentialsResponse parses an HTTP response from a GetRealmUsersIdCredentialsWithResponse call
func ParseGetRealmUsersIdCredentialsResponse(rsp *http.Response) (*GetRealmUsersIdCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmUsersIdCredentialsCredentialIdResponse parses an HTTP response from a DeleteRealmUsersIdCredentialsCredentialIdWithResponse call
func ParseDeleteRealmUsersIdCredentialsCredentialIdResponse(rsp *http.Response) (*DeleteRealmUsersIdCredentialsCredentialIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmUsersIdCredentialsCredentialIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse parses an HTTP response from a PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse call
func ParsePostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse(rsp *http.Response) (*PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse parses an HTTP response from a PostRealmUsersIdCredentialsCredentialIdMoveToFirstWithResponse call
func ParsePostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse(rsp *http.Response) (*PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmUsersIdCredentialsCredentialIdUserLabelResponse parses an HTTP response from a PutRealmUsersIdCredentialsCredentialIdUserLabelWithResponse call
func ParsePutRealmUsersIdCredentialsCredentialIdUserLabelResponse(rsp *http.Response) (*PutRealmUsersIdCredentialsCredentialIdUserLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersIdCredentialsCredentialIdUserLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmUsersIdDisableCredentialTypesResponse parses an HTTP response from a PutRealmUsersIdDisableCredentialTypesWithResponse call
func ParsePutRealmUsersIdDisableCredentialTypesResponse(rsp *http.Response) (*PutRealmUsersIdDisableCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersIdDisableCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmUsersIdExecuteActionsEmailResponse parses an HTTP response from a PutRealmUsersIdExecuteActionsEmailWithResponse call
func ParsePutRealmUsersIdExecuteActionsEmailResponse(rsp *http.Response) (*PutRealmUsersIdExecuteActionsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersIdExecuteActionsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdFederatedIdentityResponse parses an HTTP response from a GetRealmUsersIdFederatedIdentityWithResponse call
func ParseGetRealmUsersIdFederatedIdentityResponse(rsp *http.Response) (*GetRealmUsersIdFederatedIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdFederatedIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []FederatedIdentityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmUsersIdFederatedIdentityProviderResponse parses an HTTP response from a DeleteRealmUsersIdFederatedIdentityProviderWithResponse call
func ParseDeleteRealmUsersIdFederatedIdentityProviderResponse(rsp *http.Response) (*DeleteRealmUsersIdFederatedIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmUsersIdFederatedIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmUsersIdFederatedIdentityProviderResponse parses an HTTP response from a PostRealmUsersIdFederatedIdentityProviderWithResponse call
func ParsePostRealmUsersIdFederatedIdentityProviderResponse(rsp *http.Response) (*PostRealmUsersIdFederatedIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersIdFederatedIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdGroupsResponse parses an HTTP response from a GetRealmUsersIdGroupsWithResponse call
func ParseGetRealmUsersIdGroupsResponse(rsp *http.Response) (*GetRealmUsersIdGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmUsersIdGroupsCountResponse parses an HTTP response from a GetRealmUsersIdGroupsCountWithResponse call
func ParseGetRealmUsersIdGroupsCountResponse(rsp *http.Response) (*GetRealmUsersIdGroupsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdGroupsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmUsersIdGroupsGroupIdResponse parses an HTTP response from a DeleteRealmUsersIdGroupsGroupIdWithResponse call
func ParseDeleteRealmUsersIdGroupsGroupIdResponse(rsp *http.Response) (*DeleteRealmUsersIdGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmUsersIdGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRealmUsersIdGroupsGroupIdResponse parses an HTTP response from a PutRealmUsersIdGroupsGroupIdWithResponse call
func ParsePutRealmUsersIdGroupsGroupIdResponse(rsp *http.Response) (*PutRealmUsersIdGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersIdGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRealmUsersIdImpersonationResponse parses an HTTP response from a PostRealmUsersIdImpersonationWithResponse call
func ParsePostRealmUsersIdImpersonationResponse(rsp *http.Response) (*PostRealmUsersIdImpersonationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersIdImpersonationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmUsersIdLogoutResponse parses an HTTP response from a PostRealmUsersIdLogoutWithResponse call
func ParsePostRealmUsersIdLogoutResponse(rsp *http.Response) (*PostRealmUsersIdLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersIdLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdOfflineSessionsClientIdResponse parses an HTTP response from a GetRealmUsersIdOfflineSessionsClientIdWithResponse call
func ParseGetRealmUsersIdOfflineSessionsClientIdResponse(rsp *http.Response) (*GetRealmUsersIdOfflineSessionsClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdOfflineSessionsClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmUsersIdResetPasswordResponse parses an HTTP response from a PutRealmUsersIdResetPasswordWithResponse call
func ParsePutRealmUsersIdResetPasswordResponse(rsp *http.Response) (*PutRealmUsersIdResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersIdResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdRoleMappingsResponse parses an HTTP response from a GetRealmUsersIdRoleMappingsWithResponse call
func ParseGetRealmUsersIdRoleMappingsResponse(rsp *http.Response) (*GetRealmUsersIdRoleMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdRoleMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmUsersIdRoleMappingsClientsClientResponse parses an HTTP response from a DeleteRealmUsersIdRoleMappingsClientsClientWithResponse call
func ParseDeleteRealmUsersIdRoleMappingsClientsClientResponse(rsp *http.Response) (*DeleteRealmUsersIdRoleMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmUsersIdRoleMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdRoleMappingsClientsClientResponse parses an HTTP response from a GetRealmUsersIdRoleMappingsClientsClientWithResponse call
func ParseGetRealmUsersIdRoleMappingsClientsClientResponse(rsp *http.Response) (*GetRealmUsersIdRoleMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdRoleMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmUsersIdRoleMappingsClientsClientResponse parses an HTTP response from a PostRealmUsersIdRoleMappingsClientsClientWithResponse call
func ParsePostRealmUsersIdRoleMappingsClientsClientResponse(rsp *http.Response) (*PostRealmUsersIdRoleMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersIdRoleMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdRoleMappingsClientsClientAvailableResponse parses an HTTP response from a GetRealmUsersIdRoleMappingsClientsClientAvailableWithResponse call
func ParseGetRealmUsersIdRoleMappingsClientsClientAvailableResponse(rsp *http.Response) (*GetRealmUsersIdRoleMappingsClientsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdRoleMappingsClientsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmUsersIdRoleMappingsClientsClientCompositeResponse parses an HTTP response from a GetRealmUsersIdRoleMappingsClientsClientCompositeWithResponse call
func ParseGetRealmUsersIdRoleMappingsClientsClientCompositeResponse(rsp *http.Response) (*GetRealmUsersIdRoleMappingsClientsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdRoleMappingsClientsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseDeleteRealmUsersIdRoleMappingsRealmResponse parses an HTTP response from a DeleteRealmUsersIdRoleMappingsRealmWithResponse call
func ParseDeleteRealmUsersIdRoleMappingsRealmResponse(rsp *http.Response) (*DeleteRealmUsersIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRealmUsersIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdRoleMappingsRealmResponse parses an HTTP response from a GetRealmUsersIdRoleMappingsRealmWithResponse call
func ParseGetRealmUsersIdRoleMappingsRealmResponse(rsp *http.Response) (*GetRealmUsersIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePostRealmUsersIdRoleMappingsRealmResponse parses an HTTP response from a PostRealmUsersIdRoleMappingsRealmWithResponse call
func ParsePostRealmUsersIdRoleMappingsRealmResponse(rsp *http.Response) (*PostRealmUsersIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRealmUsersIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdRoleMappingsRealmAvailableResponse parses an HTTP response from a GetRealmUsersIdRoleMappingsRealmAvailableWithResponse call
func ParseGetRealmUsersIdRoleMappingsRealmAvailableResponse(rsp *http.Response) (*GetRealmUsersIdRoleMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdRoleMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParseGetRealmUsersIdRoleMappingsRealmCompositeResponse parses an HTTP response from a GetRealmUsersIdRoleMappingsRealmCompositeWithResponse call
func ParseGetRealmUsersIdRoleMappingsRealmCompositeResponse(rsp *http.Response) (*GetRealmUsersIdRoleMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdRoleMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}

// ParsePutRealmUsersIdSendVerifyEmailResponse parses an HTTP response from a PutRealmUsersIdSendVerifyEmailWithResponse call
func ParsePutRealmUsersIdSendVerifyEmailResponse(rsp *http.Response) (*PutRealmUsersIdSendVerifyEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRealmUsersIdSendVerifyEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRealmUsersIdSessionsResponse parses an HTTP response from a GetRealmUsersIdSessionsWithResponse call
func ParseGetRealmUsersIdSessionsResponse(rsp *http.Response) (*GetRealmUsersIdSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRealmUsersIdSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}
