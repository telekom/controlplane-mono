// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/telekom/controlplane-mono/identity/pkg/api"

	mock "github.com/stretchr/testify/mock"
)

// MockKeycloakClient is an autogenerated mock type for the KeycloakClient type
type MockKeycloakClient struct {
	mock.Mock
}

type MockKeycloakClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeycloakClient) EXPECT() *MockKeycloakClient_Expecter {
	return &MockKeycloakClient_Expecter{mock: &_m.Mock}
}

// GetRealmClientsWithResponse provides a mock function with given fields: ctx, realm, params, reqEditors
func (_m *MockKeycloakClient) GetRealmClientsWithResponse(ctx context.Context, realm string, params *api.GetRealmClientsParams, reqEditors ...api.RequestEditorFn) (*api.GetRealmClientsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, realm, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRealmClientsWithResponse")
	}

	var r0 *api.GetRealmClientsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.GetRealmClientsParams, ...api.RequestEditorFn) (*api.GetRealmClientsResponse, error)); ok {
		return rf(ctx, realm, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.GetRealmClientsParams, ...api.RequestEditorFn) *api.GetRealmClientsResponse); ok {
		r0 = rf(ctx, realm, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetRealmClientsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *api.GetRealmClientsParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, realm, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloakClient_GetRealmClientsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRealmClientsWithResponse'
type MockKeycloakClient_GetRealmClientsWithResponse_Call struct {
	*mock.Call
}

// GetRealmClientsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - realm string
//   - params *api.GetRealmClientsParams
//   - reqEditors ...api.RequestEditorFn
func (_e *MockKeycloakClient_Expecter) GetRealmClientsWithResponse(ctx interface{}, realm interface{}, params interface{}, reqEditors ...interface{}) *MockKeycloakClient_GetRealmClientsWithResponse_Call {
	return &MockKeycloakClient_GetRealmClientsWithResponse_Call{Call: _e.mock.On("GetRealmClientsWithResponse",
		append([]interface{}{ctx, realm, params}, reqEditors...)...)}
}

func (_c *MockKeycloakClient_GetRealmClientsWithResponse_Call) Run(run func(ctx context.Context, realm string, params *api.GetRealmClientsParams, reqEditors ...api.RequestEditorFn)) *MockKeycloakClient_GetRealmClientsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.GetRealmClientsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockKeycloakClient_GetRealmClientsWithResponse_Call) Return(_a0 *api.GetRealmClientsResponse, _a1 error) *MockKeycloakClient_GetRealmClientsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloakClient_GetRealmClientsWithResponse_Call) RunAndReturn(run func(context.Context, string, *api.GetRealmClientsParams, ...api.RequestEditorFn) (*api.GetRealmClientsResponse, error)) *MockKeycloakClient_GetRealmClientsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetRealmWithResponse provides a mock function with given fields: ctx, realm, reqEditors
func (_m *MockKeycloakClient) GetRealmWithResponse(ctx context.Context, realm string, reqEditors ...api.RequestEditorFn) (*api.GetRealmResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, realm)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRealmWithResponse")
	}

	var r0 *api.GetRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) (*api.GetRealmResponse, error)); ok {
		return rf(ctx, realm, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.GetRealmResponse); ok {
		r0 = rf(ctx, realm, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, realm, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloakClient_GetRealmWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRealmWithResponse'
type MockKeycloakClient_GetRealmWithResponse_Call struct {
	*mock.Call
}

// GetRealmWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - realm string
//   - reqEditors ...api.RequestEditorFn
func (_e *MockKeycloakClient_Expecter) GetRealmWithResponse(ctx interface{}, realm interface{}, reqEditors ...interface{}) *MockKeycloakClient_GetRealmWithResponse_Call {
	return &MockKeycloakClient_GetRealmWithResponse_Call{Call: _e.mock.On("GetRealmWithResponse",
		append([]interface{}{ctx, realm}, reqEditors...)...)}
}

func (_c *MockKeycloakClient_GetRealmWithResponse_Call) Run(run func(ctx context.Context, realm string, reqEditors ...api.RequestEditorFn)) *MockKeycloakClient_GetRealmWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockKeycloakClient_GetRealmWithResponse_Call) Return(_a0 *api.GetRealmResponse, _a1 error) *MockKeycloakClient_GetRealmWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloakClient_GetRealmWithResponse_Call) RunAndReturn(run func(context.Context, string, ...api.RequestEditorFn) (*api.GetRealmResponse, error)) *MockKeycloakClient_GetRealmWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostRealmClientsWithResponse provides a mock function with given fields: ctx, realm, body, reqEditors
func (_m *MockKeycloakClient) PostRealmClientsWithResponse(ctx context.Context, realm string, body api.ClientRepresentation, reqEditors ...api.RequestEditorFn) (*api.PostRealmClientsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, realm, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostRealmClientsWithResponse")
	}

	var r0 *api.PostRealmClientsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, api.ClientRepresentation, ...api.RequestEditorFn) (*api.PostRealmClientsResponse, error)); ok {
		return rf(ctx, realm, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, api.ClientRepresentation, ...api.RequestEditorFn) *api.PostRealmClientsResponse); ok {
		r0 = rf(ctx, realm, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PostRealmClientsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, api.ClientRepresentation, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, realm, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloakClient_PostRealmClientsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRealmClientsWithResponse'
type MockKeycloakClient_PostRealmClientsWithResponse_Call struct {
	*mock.Call
}

// PostRealmClientsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - realm string
//   - body api.ClientRepresentation
//   - reqEditors ...api.RequestEditorFn
func (_e *MockKeycloakClient_Expecter) PostRealmClientsWithResponse(ctx interface{}, realm interface{}, body interface{}, reqEditors ...interface{}) *MockKeycloakClient_PostRealmClientsWithResponse_Call {
	return &MockKeycloakClient_PostRealmClientsWithResponse_Call{Call: _e.mock.On("PostRealmClientsWithResponse",
		append([]interface{}{ctx, realm, body}, reqEditors...)...)}
}

func (_c *MockKeycloakClient_PostRealmClientsWithResponse_Call) Run(run func(ctx context.Context, realm string, body api.ClientRepresentation, reqEditors ...api.RequestEditorFn)) *MockKeycloakClient_PostRealmClientsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(api.ClientRepresentation), variadicArgs...)
	})
	return _c
}

func (_c *MockKeycloakClient_PostRealmClientsWithResponse_Call) Return(_a0 *api.PostRealmClientsResponse, _a1 error) *MockKeycloakClient_PostRealmClientsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloakClient_PostRealmClientsWithResponse_Call) RunAndReturn(run func(context.Context, string, api.ClientRepresentation, ...api.RequestEditorFn) (*api.PostRealmClientsResponse, error)) *MockKeycloakClient_PostRealmClientsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockKeycloakClient) PostWithResponse(ctx context.Context, body api.RealmRepresentation, reqEditors ...api.RequestEditorFn) (*api.PostResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostWithResponse")
	}

	var r0 *api.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.RealmRepresentation, ...api.RequestEditorFn) (*api.PostResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.RealmRepresentation, ...api.RequestEditorFn) *api.PostResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.RealmRepresentation, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloakClient_PostWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostWithResponse'
type MockKeycloakClient_PostWithResponse_Call struct {
	*mock.Call
}

// PostWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body api.RealmRepresentation
//   - reqEditors ...api.RequestEditorFn
func (_e *MockKeycloakClient_Expecter) PostWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockKeycloakClient_PostWithResponse_Call {
	return &MockKeycloakClient_PostWithResponse_Call{Call: _e.mock.On("PostWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockKeycloakClient_PostWithResponse_Call) Run(run func(ctx context.Context, body api.RealmRepresentation, reqEditors ...api.RequestEditorFn)) *MockKeycloakClient_PostWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(api.RealmRepresentation), variadicArgs...)
	})
	return _c
}

func (_c *MockKeycloakClient_PostWithResponse_Call) Return(_a0 *api.PostResponse, _a1 error) *MockKeycloakClient_PostWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloakClient_PostWithResponse_Call) RunAndReturn(run func(context.Context, api.RealmRepresentation, ...api.RequestEditorFn) (*api.PostResponse, error)) *MockKeycloakClient_PostWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PutRealmClientsIdWithResponse provides a mock function with given fields: ctx, realm, id, body, reqEditors
func (_m *MockKeycloakClient) PutRealmClientsIdWithResponse(ctx context.Context, realm string, id string, body api.ClientRepresentation, reqEditors ...api.RequestEditorFn) (*api.PutRealmClientsIdResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, realm, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRealmClientsIdWithResponse")
	}

	var r0 *api.PutRealmClientsIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, api.ClientRepresentation, ...api.RequestEditorFn) (*api.PutRealmClientsIdResponse, error)); ok {
		return rf(ctx, realm, id, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, api.ClientRepresentation, ...api.RequestEditorFn) *api.PutRealmClientsIdResponse); ok {
		r0 = rf(ctx, realm, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PutRealmClientsIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, api.ClientRepresentation, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, realm, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloakClient_PutRealmClientsIdWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRealmClientsIdWithResponse'
type MockKeycloakClient_PutRealmClientsIdWithResponse_Call struct {
	*mock.Call
}

// PutRealmClientsIdWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - realm string
//   - id string
//   - body api.ClientRepresentation
//   - reqEditors ...api.RequestEditorFn
func (_e *MockKeycloakClient_Expecter) PutRealmClientsIdWithResponse(ctx interface{}, realm interface{}, id interface{}, body interface{}, reqEditors ...interface{}) *MockKeycloakClient_PutRealmClientsIdWithResponse_Call {
	return &MockKeycloakClient_PutRealmClientsIdWithResponse_Call{Call: _e.mock.On("PutRealmClientsIdWithResponse",
		append([]interface{}{ctx, realm, id, body}, reqEditors...)...)}
}

func (_c *MockKeycloakClient_PutRealmClientsIdWithResponse_Call) Run(run func(ctx context.Context, realm string, id string, body api.ClientRepresentation, reqEditors ...api.RequestEditorFn)) *MockKeycloakClient_PutRealmClientsIdWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(api.ClientRepresentation), variadicArgs...)
	})
	return _c
}

func (_c *MockKeycloakClient_PutRealmClientsIdWithResponse_Call) Return(_a0 *api.PutRealmClientsIdResponse, _a1 error) *MockKeycloakClient_PutRealmClientsIdWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloakClient_PutRealmClientsIdWithResponse_Call) RunAndReturn(run func(context.Context, string, string, api.ClientRepresentation, ...api.RequestEditorFn) (*api.PutRealmClientsIdResponse, error)) *MockKeycloakClient_PutRealmClientsIdWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PutRealmWithResponse provides a mock function with given fields: ctx, realm, body, reqEditors
func (_m *MockKeycloakClient) PutRealmWithResponse(ctx context.Context, realm string, body api.RealmRepresentation, reqEditors ...api.RequestEditorFn) (*api.PutRealmResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, realm, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRealmWithResponse")
	}

	var r0 *api.PutRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, api.RealmRepresentation, ...api.RequestEditorFn) (*api.PutRealmResponse, error)); ok {
		return rf(ctx, realm, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, api.RealmRepresentation, ...api.RequestEditorFn) *api.PutRealmResponse); ok {
		r0 = rf(ctx, realm, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PutRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, api.RealmRepresentation, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, realm, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloakClient_PutRealmWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRealmWithResponse'
type MockKeycloakClient_PutRealmWithResponse_Call struct {
	*mock.Call
}

// PutRealmWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - realm string
//   - body api.RealmRepresentation
//   - reqEditors ...api.RequestEditorFn
func (_e *MockKeycloakClient_Expecter) PutRealmWithResponse(ctx interface{}, realm interface{}, body interface{}, reqEditors ...interface{}) *MockKeycloakClient_PutRealmWithResponse_Call {
	return &MockKeycloakClient_PutRealmWithResponse_Call{Call: _e.mock.On("PutRealmWithResponse",
		append([]interface{}{ctx, realm, body}, reqEditors...)...)}
}

func (_c *MockKeycloakClient_PutRealmWithResponse_Call) Run(run func(ctx context.Context, realm string, body api.RealmRepresentation, reqEditors ...api.RequestEditorFn)) *MockKeycloakClient_PutRealmWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(api.RealmRepresentation), variadicArgs...)
	})
	return _c
}

func (_c *MockKeycloakClient_PutRealmWithResponse_Call) Return(_a0 *api.PutRealmResponse, _a1 error) *MockKeycloakClient_PutRealmWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloakClient_PutRealmWithResponse_Call) RunAndReturn(run func(context.Context, string, api.RealmRepresentation, ...api.RequestEditorFn) (*api.PutRealmResponse, error)) *MockKeycloakClient_PutRealmWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeycloakClient creates a new instance of MockKeycloakClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeycloakClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeycloakClient {
	mock := &MockKeycloakClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
