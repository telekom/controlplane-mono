// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/telekom/controlplane-mono/identity/pkg/api"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/telekom/controlplane-mono/identity/api/v1"
)

// MockRealmClient is an autogenerated mock type for the RealmClient type
type MockRealmClient struct {
	mock.Mock
}

type MockRealmClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRealmClient) EXPECT() *MockRealmClient_Expecter {
	return &MockRealmClient_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateRealm provides a mock function with given fields: ctx, realm
func (_m *MockRealmClient) CreateOrUpdateRealm(ctx context.Context, realm *v1.Realm) error {
	ret := _m.Called(ctx, realm)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRealm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Realm) error); ok {
		r0 = rf(ctx, realm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRealmClient_CreateOrUpdateRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRealm'
type MockRealmClient_CreateOrUpdateRealm_Call struct {
	*mock.Call
}

// CreateOrUpdateRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - realm *v1.Realm
func (_e *MockRealmClient_Expecter) CreateOrUpdateRealm(ctx interface{}, realm interface{}) *MockRealmClient_CreateOrUpdateRealm_Call {
	return &MockRealmClient_CreateOrUpdateRealm_Call{Call: _e.mock.On("CreateOrUpdateRealm", ctx, realm)}
}

func (_c *MockRealmClient_CreateOrUpdateRealm_Call) Run(run func(ctx context.Context, realm *v1.Realm)) *MockRealmClient_CreateOrUpdateRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Realm))
	})
	return _c
}

func (_c *MockRealmClient_CreateOrUpdateRealm_Call) Return(_a0 error) *MockRealmClient_CreateOrUpdateRealm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRealmClient_CreateOrUpdateRealm_Call) RunAndReturn(run func(context.Context, *v1.Realm) error) *MockRealmClient_CreateOrUpdateRealm_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateRealmClient provides a mock function with given fields: ctx, realm, client
func (_m *MockRealmClient) CreateOrUpdateRealmClient(ctx context.Context, realm *v1.Realm, client *v1.Client) error {
	ret := _m.Called(ctx, realm, client)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRealmClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Realm, *v1.Client) error); ok {
		r0 = rf(ctx, realm, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRealmClient_CreateOrUpdateRealmClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateRealmClient'
type MockRealmClient_CreateOrUpdateRealmClient_Call struct {
	*mock.Call
}

// CreateOrUpdateRealmClient is a helper method to define mock.On call
//   - ctx context.Context
//   - realm *v1.Realm
//   - client *v1.Client
func (_e *MockRealmClient_Expecter) CreateOrUpdateRealmClient(ctx interface{}, realm interface{}, client interface{}) *MockRealmClient_CreateOrUpdateRealmClient_Call {
	return &MockRealmClient_CreateOrUpdateRealmClient_Call{Call: _e.mock.On("CreateOrUpdateRealmClient", ctx, realm, client)}
}

func (_c *MockRealmClient_CreateOrUpdateRealmClient_Call) Run(run func(ctx context.Context, realm *v1.Realm, client *v1.Client)) *MockRealmClient_CreateOrUpdateRealmClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Realm), args[2].(*v1.Client))
	})
	return _c
}

func (_c *MockRealmClient_CreateOrUpdateRealmClient_Call) Return(_a0 error) *MockRealmClient_CreateOrUpdateRealmClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRealmClient_CreateOrUpdateRealmClient_Call) RunAndReturn(run func(context.Context, *v1.Realm, *v1.Client) error) *MockRealmClient_CreateOrUpdateRealmClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetRealm provides a mock function with given fields: ctx, realm
func (_m *MockRealmClient) GetRealm(ctx context.Context, realm string) (*api.GetRealmResponse, error) {
	ret := _m.Called(ctx, realm)

	if len(ret) == 0 {
		panic("no return value specified for GetRealm")
	}

	var r0 *api.GetRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*api.GetRealmResponse, error)); ok {
		return rf(ctx, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *api.GetRealmResponse); ok {
		r0 = rf(ctx, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRealmClient_GetRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRealm'
type MockRealmClient_GetRealm_Call struct {
	*mock.Call
}

// GetRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - realm string
func (_e *MockRealmClient_Expecter) GetRealm(ctx interface{}, realm interface{}) *MockRealmClient_GetRealm_Call {
	return &MockRealmClient_GetRealm_Call{Call: _e.mock.On("GetRealm", ctx, realm)}
}

func (_c *MockRealmClient_GetRealm_Call) Run(run func(ctx context.Context, realm string)) *MockRealmClient_GetRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRealmClient_GetRealm_Call) Return(_a0 *api.GetRealmResponse, _a1 error) *MockRealmClient_GetRealm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRealmClient_GetRealm_Call) RunAndReturn(run func(context.Context, string) (*api.GetRealmResponse, error)) *MockRealmClient_GetRealm_Call {
	_c.Call.Return(run)
	return _c
}

// GetRealmClients provides a mock function with given fields: ctx, realm, client
func (_m *MockRealmClient) GetRealmClients(ctx context.Context, realm string, client *v1.Client) (*api.GetRealmClientsResponse, error) {
	ret := _m.Called(ctx, realm, client)

	if len(ret) == 0 {
		panic("no return value specified for GetRealmClients")
	}

	var r0 *api.GetRealmClientsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Client) (*api.GetRealmClientsResponse, error)); ok {
		return rf(ctx, realm, client)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Client) *api.GetRealmClientsResponse); ok {
		r0 = rf(ctx, realm, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetRealmClientsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Client) error); ok {
		r1 = rf(ctx, realm, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRealmClient_GetRealmClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRealmClients'
type MockRealmClient_GetRealmClients_Call struct {
	*mock.Call
}

// GetRealmClients is a helper method to define mock.On call
//   - ctx context.Context
//   - realm string
//   - client *v1.Client
func (_e *MockRealmClient_Expecter) GetRealmClients(ctx interface{}, realm interface{}, client interface{}) *MockRealmClient_GetRealmClients_Call {
	return &MockRealmClient_GetRealmClients_Call{Call: _e.mock.On("GetRealmClients", ctx, realm, client)}
}

func (_c *MockRealmClient_GetRealmClients_Call) Run(run func(ctx context.Context, realm string, client *v1.Client)) *MockRealmClient_GetRealmClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*v1.Client))
	})
	return _c
}

func (_c *MockRealmClient_GetRealmClients_Call) Return(_a0 *api.GetRealmClientsResponse, _a1 error) *MockRealmClient_GetRealmClients_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRealmClient_GetRealmClients_Call) RunAndReturn(run func(context.Context, string, *v1.Client) (*api.GetRealmClientsResponse, error)) *MockRealmClient_GetRealmClients_Call {
	_c.Call.Return(run)
	return _c
}

// PostRealm provides a mock function with given fields: ctx, realm
func (_m *MockRealmClient) PostRealm(ctx context.Context, realm *v1.Realm) (*api.PostResponse, error) {
	ret := _m.Called(ctx, realm)

	if len(ret) == 0 {
		panic("no return value specified for PostRealm")
	}

	var r0 *api.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Realm) (*api.PostResponse, error)); ok {
		return rf(ctx, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Realm) *api.PostResponse); ok {
		r0 = rf(ctx, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Realm) error); ok {
		r1 = rf(ctx, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRealmClient_PostRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRealm'
type MockRealmClient_PostRealm_Call struct {
	*mock.Call
}

// PostRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - realm *v1.Realm
func (_e *MockRealmClient_Expecter) PostRealm(ctx interface{}, realm interface{}) *MockRealmClient_PostRealm_Call {
	return &MockRealmClient_PostRealm_Call{Call: _e.mock.On("PostRealm", ctx, realm)}
}

func (_c *MockRealmClient_PostRealm_Call) Run(run func(ctx context.Context, realm *v1.Realm)) *MockRealmClient_PostRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Realm))
	})
	return _c
}

func (_c *MockRealmClient_PostRealm_Call) Return(_a0 *api.PostResponse, _a1 error) *MockRealmClient_PostRealm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRealmClient_PostRealm_Call) RunAndReturn(run func(context.Context, *v1.Realm) (*api.PostResponse, error)) *MockRealmClient_PostRealm_Call {
	_c.Call.Return(run)
	return _c
}

// PostRealmClient provides a mock function with given fields: ctx, realmName, client
func (_m *MockRealmClient) PostRealmClient(ctx context.Context, realmName string, client *v1.Client) (*api.PostRealmClientsResponse, error) {
	ret := _m.Called(ctx, realmName, client)

	if len(ret) == 0 {
		panic("no return value specified for PostRealmClient")
	}

	var r0 *api.PostRealmClientsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Client) (*api.PostRealmClientsResponse, error)); ok {
		return rf(ctx, realmName, client)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Client) *api.PostRealmClientsResponse); ok {
		r0 = rf(ctx, realmName, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PostRealmClientsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Client) error); ok {
		r1 = rf(ctx, realmName, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRealmClient_PostRealmClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRealmClient'
type MockRealmClient_PostRealmClient_Call struct {
	*mock.Call
}

// PostRealmClient is a helper method to define mock.On call
//   - ctx context.Context
//   - realmName string
//   - client *v1.Client
func (_e *MockRealmClient_Expecter) PostRealmClient(ctx interface{}, realmName interface{}, client interface{}) *MockRealmClient_PostRealmClient_Call {
	return &MockRealmClient_PostRealmClient_Call{Call: _e.mock.On("PostRealmClient", ctx, realmName, client)}
}

func (_c *MockRealmClient_PostRealmClient_Call) Run(run func(ctx context.Context, realmName string, client *v1.Client)) *MockRealmClient_PostRealmClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*v1.Client))
	})
	return _c
}

func (_c *MockRealmClient_PostRealmClient_Call) Return(_a0 *api.PostRealmClientsResponse, _a1 error) *MockRealmClient_PostRealmClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRealmClient_PostRealmClient_Call) RunAndReturn(run func(context.Context, string, *v1.Client) (*api.PostRealmClientsResponse, error)) *MockRealmClient_PostRealmClient_Call {
	_c.Call.Return(run)
	return _c
}

// PutRealm provides a mock function with given fields: ctx, realmName, realm
func (_m *MockRealmClient) PutRealm(ctx context.Context, realmName string, realm *v1.Realm) (*api.PutRealmResponse, error) {
	ret := _m.Called(ctx, realmName, realm)

	if len(ret) == 0 {
		panic("no return value specified for PutRealm")
	}

	var r0 *api.PutRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Realm) (*api.PutRealmResponse, error)); ok {
		return rf(ctx, realmName, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Realm) *api.PutRealmResponse); ok {
		r0 = rf(ctx, realmName, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PutRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Realm) error); ok {
		r1 = rf(ctx, realmName, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRealmClient_PutRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRealm'
type MockRealmClient_PutRealm_Call struct {
	*mock.Call
}

// PutRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - realmName string
//   - realm *v1.Realm
func (_e *MockRealmClient_Expecter) PutRealm(ctx interface{}, realmName interface{}, realm interface{}) *MockRealmClient_PutRealm_Call {
	return &MockRealmClient_PutRealm_Call{Call: _e.mock.On("PutRealm", ctx, realmName, realm)}
}

func (_c *MockRealmClient_PutRealm_Call) Run(run func(ctx context.Context, realmName string, realm *v1.Realm)) *MockRealmClient_PutRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*v1.Realm))
	})
	return _c
}

func (_c *MockRealmClient_PutRealm_Call) Return(_a0 *api.PutRealmResponse, _a1 error) *MockRealmClient_PutRealm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRealmClient_PutRealm_Call) RunAndReturn(run func(context.Context, string, *v1.Realm) (*api.PutRealmResponse, error)) *MockRealmClient_PutRealm_Call {
	_c.Call.Return(run)
	return _c
}

// PutRealmClient provides a mock function with given fields: ctx, realmName, id, client
func (_m *MockRealmClient) PutRealmClient(ctx context.Context, realmName string, id string, client *v1.Client) (*api.PutRealmClientsIdResponse, error) {
	ret := _m.Called(ctx, realmName, id, client)

	if len(ret) == 0 {
		panic("no return value specified for PutRealmClient")
	}

	var r0 *api.PutRealmClientsIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.Client) (*api.PutRealmClientsIdResponse, error)); ok {
		return rf(ctx, realmName, id, client)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.Client) *api.PutRealmClientsIdResponse); ok {
		r0 = rf(ctx, realmName, id, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PutRealmClientsIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *v1.Client) error); ok {
		r1 = rf(ctx, realmName, id, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRealmClient_PutRealmClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRealmClient'
type MockRealmClient_PutRealmClient_Call struct {
	*mock.Call
}

// PutRealmClient is a helper method to define mock.On call
//   - ctx context.Context
//   - realmName string
//   - id string
//   - client *v1.Client
func (_e *MockRealmClient_Expecter) PutRealmClient(ctx interface{}, realmName interface{}, id interface{}, client interface{}) *MockRealmClient_PutRealmClient_Call {
	return &MockRealmClient_PutRealmClient_Call{Call: _e.mock.On("PutRealmClient", ctx, realmName, id, client)}
}

func (_c *MockRealmClient_PutRealmClient_Call) Run(run func(ctx context.Context, realmName string, id string, client *v1.Client)) *MockRealmClient_PutRealmClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*v1.Client))
	})
	return _c
}

func (_c *MockRealmClient_PutRealmClient_Call) Return(_a0 *api.PutRealmClientsIdResponse, _a1 error) *MockRealmClient_PutRealmClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRealmClient_PutRealmClient_Call) RunAndReturn(run func(context.Context, string, string, *v1.Client) (*api.PutRealmClientsIdResponse, error)) *MockRealmClient_PutRealmClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRealmClient creates a new instance of MockRealmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRealmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRealmClient {
	mock := &MockRealmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
